{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/osweb/classes/var_store.js","webpack:///./src/js/osweb/backends/clock.js","webpack:///./src/js/osweb/items/item.js","webpack:///./src/js/osweb/util/matrix.js","webpack:///./src/js/osweb/items/loop.js","webpack:///./src/js/osweb/backends/keyboard.js","webpack:///./src/js/osweb/items/sequence.js","webpack:///./src/js/osweb/items/coroutines.js","webpack:///./src/js/osweb/backends/mouse.js","webpack:///./src/js/osweb/items/generic_response.js","webpack:///./src/js/osweb/items/sketchpad.js","webpack:///./src/js/osweb/items/feedback.js","webpack:///./src/js/osweb/items/inline_script.js","webpack:///./src/js/osweb/items/inline_javascript.js","webpack:///./src/js/osweb/items/keyboard_response.js","webpack:///./src/js/osweb/items/mouse_response.js","webpack:///./src/js/osweb/items/logger.js","webpack:///./src/js/osweb/backends/sampler.js","webpack:///./src/js/osweb/items/sampler.js","webpack:///./src/js/osweb/items/synth.js","webpack:///./src/js/osweb/items/advanced_delay.js","webpack:///./src/js/osweb/items/form_html.js","webpack:///./src/js/osweb/items/form_consent.js","webpack:///./src/js/osweb/items/inline_html.js","webpack:///./src/js/osweb/items/form_multiple_choice.js","webpack:///./src/js/osweb/items/form_text_display.js","webpack:///./src/js/osweb/items/form_text_input.js","webpack:///./src/js/osweb/backends/video.js","webpack:///./src/js/osweb/items/media_player.js","webpack:///./src/js/osweb/items/notepad.js","webpack:///./src/js/osweb/items/repeat_cycle.js","webpack:///./src/js/osweb/items/reset_feedback.js","webpack:///./src/js/osweb/items/touch_response.js","webpack:///./src/js/osweb/elements/base_element.js","webpack:///./src/js/osweb/system/constants.js","webpack:///./src/js/osweb/elements/arrow.js","webpack:///./src/js/osweb/elements/circle.js","webpack:///./src/js/osweb/elements/ellipse.js","webpack:///./src/js/osweb/elements/fixdot.js","webpack:///./src/js/osweb/elements/gabor.js","webpack:///./src/js/osweb/elements/image.js","webpack:///./src/js/osweb/elements/line.js","webpack:///./src/js/osweb/elements/noise.js","webpack:///./src/js/osweb/elements/rect.js","webpack:///./src/js/osweb/elements/textline.js","webpack:///./src/js/osweb/system/debugger.js","webpack:///./src/js/osweb/system/convertor.js","webpack:///./src/js/osweb/system/events.js","webpack:///./src/js/osweb/system/parameters.js","webpack:///./src/js/osweb/system/screen.js","webpack:///./src/js/osweb/system/session.js","webpack:///./src/js/osweb/util/files.js","webpack:///./src/js/osweb/system/transfer.js","webpack:///./src/js/osweb/classes/item_stack.js","webpack:///./src/js/osweb/classes/item_store.js","webpack:///./src/js/osweb/classes/file_pool_store.js","webpack:///./src/js/osweb/classes/syntax.js","webpack:///./src/js/osweb/python/python_math.js","webpack:///./src/js/osweb/python/python_opensesame.js","webpack:///./src/js/osweb/python/python_random.js","webpack:///./src/js/osweb/python/python_string.js","webpack:///./src/js/osweb/python/python.js","webpack:///./src/js/osweb/backends/log.js","webpack:///./src/js/osweb/items/experiment.js","webpack:///./src/js/osweb/system/runner.js","webpack:///./src/js/osweb/index.js","webpack:///./src/app.js","webpack:///./src/js/osweb/backends/canvas.js","webpack:///./src/js/osweb/backends/styles.js","webpack:///./src/js/osweb/classes/canvas_handler.js","webpack:///./src/js/osweb/classes/javascript_workspace.js","webpack:///./src/js/osweb/classes/javascript_workspace_api.js","webpack:///./src/js/osweb/classes/python_workspace.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","p","jsonpArray","window","oldJsonpFunction","slice","VarStore","item","parent","this","_item","_parent","_ignored_properties","variable","defaultValue","evaluate","valid","addQuotes","_bypass_proxy","syntax","eval_text","inspect","includes","variables","pairs","has","preserve","unset","Clock","experiment","_experiment","_startTime","_now","performance","now","Math","round","webkitNow","Date","getTime","ms","_runner","_events","_run","constants","RESPONSE_DURATION","Item","script","constructor","_status","STATUS_NONE","clock","count","python_workspace","_pythonWorkspace","response_store","_responseStore","_syntax","vars","STATUS_FINALIZE","_currentItem","run","response","pMs","sleep","time","line","trim","charAt","comments","fromAscii","parse_comment","parse_cmd","cmd","args","set","_debugger","addError","parse_multiline_vars","reset","lines","split","parse_variable","parse_line","STATUS_INITIALIZE","addMessage","type","_prepare_complete","unstack","srcMatrix","TypeError","values","reduce","acc","cycle","entries","val","stack","columns","keys","map","row","fullfactorial","matrix","combos","shuffleVert","grouped","cols","prev","shuffleHoriz","vals","res","sortCol","col","Error","sort","reverseRows","ReferenceError","roll","amount","column","parseInt","rollN","list","unshift","pop","weight","weightCol","Loop","description","_break_if","_cycles","_index","_keyboard","_operations","_initialized","from_string","el","_eval_args","remove_quotes","orig_matrix","cycles","repeat","skip","offset","order","break_if","source","source_file","instruction","params","Number","_pythonParser","_prepare","body","undefined","_runstatement","e","items","_items","parseFileSource","set_item_onset","src","toLowerCase","endsWith","_pool","parse","skip_empty_lines","wholeRepeats","floor","partialRepeats","allCycles","Array","remainder","k","mtrx","func","repeat_cycle","msg","apply_cycle","break_if_val","compile_cond","_eval","_complete","_itemStore","prepare","execute","Keyboard","timeOut","keyList","_keyList","_timeOut","_SYNONYM_MAP","responses","synonyms","defaults","_synonyms","button","RESPONSE_KEYBOARD","moderators","keyDownEvent","event","shiftKey","ctrlKey","altKey","visible","_renderer","view","focus","tmp","document","createElement","appendChild","removeChild","Sequence","flush_keyboard","cond","_itemStack","tokens","strip_slashes","flush","currentItem","self","Coroutines","tasks","schedule","arglist","kwdict","task","item_name","start_time","start","end_time","end","run_if","runif","taskParams","Task","sortBy","launch","active","dt","t0","running","_loop","started","_active","status","step","RUNNING","ABORTED","stopped","TIMER_BREAK","TIMER_EXIT","TIMER_ERROR","_state","setTimeout","kill","abort_on_end","state","UNINITIALISED","_coroutine","isFunction","coroutine","next","newState","done","FINISHED","Mouse","buttonList","_buttonList","_visible","synonym","show_cursor","RESPONSE_MOUSE","_mouseMoveEvent","rtTime","x","clientX","y","clientY","events","_mouse_press","buttons","_mouseDownEvent","pos","show","style","cursor","GenericResponse","_allowed_responses","_duration","_duration_func","_mouse","_responsetype","RESPONSE_NONE","_timeout","process_feedback","timeout","_timeStamp","process_response_timeout","process_response_keypress","process_response_mouseclick","allowed_responses","String","replace","filter","Boolean","duration","_get_default_from_synonym","prepare_duration_keypress","prepare_duration_mouseclick","RESPONSE_SOUND","RESPONSE_VIDEO","_final_duration","_set_config","sleep_for_duration","get_key","get_click","_sampler","wait","_video_player","rect","getBoundingClientRect","scale","min","right","left","width","bottom","top","height","center_x","center_y","cursor_x","cursor_y","retval","_start_response_interval","sri","_end_response_interval","sanitize","resp","response_bookkeeping","set_mouse_coordinates","correct","toString","total_correct","total_response_time","response_time","total_responses","accuracy","average_response_time","avg_rt","prepare_timeout","prepare_duration","prepare_allowed_responses","configure_response_objects","Sketchpad","canvas","Canvas","elements","a","b","z_index","_isClass","element","_newElementClass","_compare","backgroundColor","_styles","background_color","clear","is_shown","draw","_set_bg_color","set_sri","process_response","Feedback","reset_variables","reset_feedback","InlineScript","_prepare_run","_prepare_tree","_run_tree","_process_nodes","_parse","InlineJavaScript","workspace","_javascriptWorkspace","read_run_lines","read_prepare_lines","KeyboardResponse","_flush","correct_response","keyDownHandler","keypress","_processKeyboardEvent","addEventListener","proceed","removeEventListener","MouseResponse","resp_codes","mouseDownHandler","_processMouseEvent","touchHandler","changedTouches","Logger","logvars","auto_log","_log","write_vars","concat","audioCtx","AudioContext","webkitAudioContext","console","warn","SamplerBackend","volume","pitch","pan","fade","block","sample","cloneNode","error","onended","_audioEnded","createMediaElementSource","resume","connect","applyFilters","play","nodes","destination","gainNode","createGain","gain","setValueAtTime","currentTime","linearRampToValueAtTime","StereoPannerNode","Sampler","_sample","fade_in","stop_after","Synth","AdvancedDelay","mean","std","u","v","random","max","sqrt","log","cos","PI","jitter","jitter_mode","_random_uniform","_random_gauss","FormHTML","_widgets","_formContainer","remove","_osweb","display","runner","_keyDownHandler","_keyUpHandler","setBackground","borderTop","borderLeft","borderRight","borderBottom","html","inherit","innerHTML","_paddedHeight","_paddedWidth","padding","margin","fontFamily","fontSize","fontWeight","textDecoration","color","boxType","label","box","labelElement","container","textAlign","append","_customForm","_fontFamily","fontStyle","_padding","join","formElements","formHTML","justifyContent","alignItems","getElementsByClassName","_cached_padding","_width","_height","FormConsent","alertify","_checkbox","checked","resumeOSWeb","onDecline","title","text","checkbox","checkboxContainer","buttonContainer","acceptButton","onclick","onAccept","declineButton","applyTheme","InlineHTML","getElementsByTagName","input","onsubmit","_submitForm","FormMultipleChoice","_boxes","form_var","_hasOkButton","options","option","elementHeight","question","_boxClicked","okButton","FormTextDisplay","FormTextInput","keyCode","_textArea","onkeypress","checkReturnPress","_activateTextArea","Video","audio","full_screen","_playing","_script","_video","_texture","Texture","from","_videoSprite","Sprite","pause","_videoEnded","onplay","_videoPlay","render","_event_handler_always","MediaPlayer","_script_executed","stop","_update","pool","event_handler","event_handler_trigger","Notepad","RepeatCycle","condition","ResetFeedback","TouchResponse","_ncol","_nrow","cell","BaseElement","sketchpad","show_if","fix_coordinates","uniform_coordinates","only_keywords","properties","_properties","xc","yc","prop","eval_properties","itemClasses","loop","sequence","feedback","inline_script","inline_javascript","inline_html","keyboard_response","mouse_response","logger","sampler","synth","coroutines","advanced_delay","form_consent","form_multiple_choice","form_text_display","form_text_input","media_player_mpy","notepad","touch_response","arrow","penwidth","x1","y1","x2","y2","styles","Styles","fill","arrow_body_width","arrow_body_length","arrow_head_width","circle","ellipse","w","h","fixdot","gabor","orient","freq","env","size","stdev","phase","color1","color2","bgmode","image","_file","file","center","rotation","noise","textline","font_family","font_size","font_bold","font_italic","font_underline","PRESSES_ONLY","RELEASES_ONLY","PRESSES_AND_RELEASES","RESPONSE_AUTOKEYBOARD","RESPONSE_AUTOMOUSE","STATUS_BUILD","STATUS_EXECUTE","TIMER_NONE","TIMER_WAIT","TIMER_PAUSE","TIMER_RESUME","TIMER_DONE","TIMER_FORM","Debugger","enabled","messageLog","errorText","context","isPlainObject","notify","_onError","url","messageText","Convertor","variabelName","substr","match","newItem","pair","parseValue","variableName","parseLine","Events","_keyDownEvent","_keyPressMode","_mouseDownHandler","_mouseMoveHandler","_mousePressMode","_mouseUpHandler","_responseGiven","_responseList","_responseType","_soundHasEnded","_statePrevious","_timeHandler","_videoHasEnded","_KEY_CODES","_KEY_SHIFTCODES","_keyDown","_keyUp","_mouseDown","_mouseMove","_mouseUp","_touchStartHandler","_touchStart","Ticker","add","_time","location","_screen","_showPauseScreen","keyboardState","keyboardResponse","_convertKeyCode","indexOf","preventDefault","mouseState","mouseResponse","onEnded","_finalize","responseType","responseList","Parameters","_itemCounter","_parameters","_subject","set_subject","_setupClickScreen","_welcomeText","_updateIntroScreen","dataType","prompt","promptEnabled","_processParameters","_processParameter","_transferParameters","parameter","_exit","_prompt","_onParamConfirm","_onParamCancel","Screen","_click","_container","_fullScreen","requestFullscreen","_fullScreenChanged","_fullScreenError","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","_scaleMode","position","_currentCanvas","clientWidth","clientHeight","ar","resize","_scale_x","_scale_y","_confirm","_onFullScreenConfirm","_onFullScreenCancel","debugger","logoSrc","_introScreen","Container","screenCenter","logoPath","oswebLogo","oswebTitle","Text","versionInfo","VERSION_NUMBER","copyrightText","getFullYear","_statusText","addChild","clickHandler","_clearIntroScreen","_initialize","children","percentage","yOuter","_progressBarOuter","Graphics","lineStyle","drawRect","_progressBarInner","xOuter","hOuter","beginFill","endFill","_onPauseScreenConfirm","_onPauseScreenCancel","Session","_date","_session","_getSessionInformation","browser","codename","navigator","appCodeName","appName","version","appVersion","date","startdate","getDate","getMonth","starttime","getHours","getMinutes","getSeconds","startdateUTC","getUTCDate","getUTCMonth","getUTCFullYear","debug","parameters","pilot","taskname","taskversion","screen","availableHeight","availHeight","availableWidth","availWidth","colorDepth","outerheight","outerwidth","pixelDepth","screenX","screenY","system","os","platform","FileStreamer","chunkSize","rewind","getFileSize","fileReader","FileReader","blob","Promise","resolve","reject","onloadend","target","byteLength","progress","readAsArrayBuffer","decompress","zipfile","onProgress","fs","inflator","pako","Inflate","isEndOfFile","readBlock","err","untar","buffer","readFileAsText","inputFile","temporaryFileReader","onerror","abort","DOMException","onload","readAsText","parseUrl","str","host","getHost","origin","URL","Transfer","isString","isObject","File","_readOsexpFromFile","osScript","uri","fetch","href","remoteFile","_processScript","_readWebFonts","osexp","Blob","osexpFile","_readExpFile","message","_updateProgressBar","files","expFileIndex","findIndex","expFile","poolFiles","_processOsexpPoolItems","axios","onDownloadProgress","lengthComputable","loaded","total","test","userAgent","contents","asyncIterator","currentIndex","currentFile","folder","whole","group1","fromCharCode","ext","lastIndexOf","img","Image","getBlobUrl","ado","Audio","then","WebFont","load","google","families","urls","inactive","resultData","FormData","xhr","XMLHttpRequest","open","subject_nr","send","ItemStack","stackItem","ItemStore","className","string","form","_newItemClass","exit","itemType","suggestion","uniqueName","FilePoolStore","new_name","old_path","new_path","Syntax","isNumber","cnd","bytecode","expression","substring","ast","_run_statement","content","isNaN","in_entity","escapeBrackets","reNormal","search","unescapeBrackets","rePython","nr","add_slashes","dedented","pattern","exec","count_quotes","kwargs","parsed","startsWith","convert_if_numeric","safe_wrap","strict","allowVars","NBrackets","chartype","i1","i2","nBrackets","PythonMath","E","pi","filbert","pythonRuntime","imports","math","ceil","copysign","fabs","factorial","fmod","frexp","fsum","acos","asin","atan","atan2","hypot","sin","tan","iterable","PythonOpenSesame","_objects","close","write","var","functions","set_subject_nr","copy_sketchpad","keyboard","mouse","sometimes","xy_circle","xy_distance","xy_from_polar","xy_grid","xy_random","xy_to_polar","auto_prepare","style_args","resp_args","playback_args","osc","attack","decay","rho","phi0","pole","phi","spacing","min_dist","PythonRandom","shuffle","temporaryValue","randomIndex","PythonString","fillchar","PythonParser","python_math","python_opensesame","python_random","python_string","_classes","_function_stack","_global_return_value","_inline_script","_node","_onConsole","_stack","_statement","_variables","exp","parseFn","locations","ranges","identifier","toNumber","node","return_values","index","_set_node","_get_element_value","return_value","_set_return_value","tmp_value","operator","_set_element_value","break","arguments","callee","tmp_arguments","caller","_get_element","_get_context","global_return_value","init","update","tmp_range","consequent","alternate","returnValue","argument","declarations","id","_process_nodes_jump","_process_nodes_timeout","_array_expression","_assignment_expression","_binary_expression","_block_statement","_break_statement","_call_expression","_empty_statement","_expression_statement","_for_statement","_for_in_statement","_function_expression","_identifier","_if_statement","_literal","_logical_expression","_member_expression","_new_expression","_program","_return_statement","_unary_expression","_update_expression","_variable_declaration","_variable_declarator","_while_statement","ast_tree","Log","varList","entry","varName","onLog","_data","Experiment","_canvas","JavaScriptWorkspace","bidi","round_decimals","form_clicks","sessionid","valueOf","sound_freq","sound_sample_size","sound_channels","sound_buf_size","canvas_backend","background","foreground","pNr","subject_parity","def_str","_source","item_type","read_definition","init_display","datetime","opensesame_version","opensesame_codename","VERSION_NAME","init_clock","toUTCString","Runner","_mimetype","_name","_onFinished","_onLog","_target","_convertor","PythonWorkspace","_transfer","_setupContent","getElementById","autoDetectRenderer","antialias","transparent","resolution","confirm","fullScreen","introClick","introScreen","mimetype","onConsole","onFinished","onError","scaleMode","subject","welcomeText","_setupIntroScreen","_readSource","_build","parseScript","_clean_up","_fullScreenExit","_exitDisplay","_setupContext","OSWEB_VERSION_NAME","OSWEB_VERSION_NO","replaceAll","str1","str2","ignore","RegExp","_pySlice","osweb","printVersionInfo","getRunner","require","_font_string","_textures","sx","sy","ex","ey","bodyWidth","bodyLength","headWidth","pow","angle","_headWidth","p4","p1","p2","p3","p7","p6","doc","DOMParser","parseFromString","childNodes","some","nodeType","styleArgs","assign","textLine","fontBold","lineHeight","div","top1","top2","verticalAlign","scrollTop","ascent","descent","htmlNode","textBlock","currentStyle","elementStyle","_getStyle","nodeName","prev_height","x_pos","y_pos","rows","text_elements","text_dimensions","text_underline","attributes","textStyle","bounds","textElement","textContent","getBounds","dimension","_getTextBaseline","_parseHtmlNode","points","_arrow_shape","polygon","drawCircle","destroy","shape","clone","drawEllipse","_fill","_background_color","_color","_penwidth","_match_env","ctx","getContext","px","getImageData","_convertColorValueToRGB","rx","ry","dx","dy","ux","uy","f","amp","g","putImageData","texture","sprite","fname","path","drawImage","anchor","_convertColorValue","_fullScreenInit","moveTo","lineTo","verticles","drawPolygon","rectangle","rgb","txt","_containsHTML","element_style","visibility","adjust","colorHex","colorRGB255","colorRGBPerc","colorHSV","colorHSL","colorLAB","_initConstants","_bidi","_font_bold","_font_family","_font_italic","_font_size","_font_underline","_html","re","colorConvert","keyword","hex","_matchFloats","perc","hsv","hsl","lab","isInteger","isArray","_DEFAULT_FONTS","sans","serif","mono","arabic","hebrew","hindi","_checkVal","_isInt","CanvasHandler","_style","_xc","_yc","body_length","body_width","head_width","_element_style","col1","col2","vertices","VarStoreHandler","vars_proxy","Proxy","api","JavaScriptWorkspaceAPI","_persistent","js","persistent","randomExt","convert","csvParse","range","pyRange","zip","pyZip","zipLongest","pyZipLongest","enumerate","pyEnumerate","pyItems","eval","_radians","_parse_pole","ox","oy","_degrees","n_col","n_row","n_err_msg","s_col","s_row","spacing_err_msg","too_close","max_try","evalString"],"mappings":"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","file":"js/osweb.1.4.0.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,3]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","/** Class representing a variable store. */\r\nexport default class VarStore {\r\n  /**\r\n   * Create a variable store object for all variables.\r\n   * @param {Object} item - The item to which the var_store belongs.\r\n   * @param {Object} parent - The parent global var_store.\r\n   */\r\n  constructor (item, parent) {\r\n    // Create and set private properties.\r\n    this._item = item\r\n    this._parent = parent\r\n    this._ignored_properties = [\r\n      '_item', '_parent', '_bypass_proxy', '_ignored_properties'\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * Get the value of a variable from the store (or thje parent store).\r\n   * @param {String} variable - The name of the variable.\r\n   * @param {Boolean|Number|String} defaultValue - The default value for the variable.\r\n   * @param {Object} evaluate - The parent global var_store.\r\n   * @param {Object} valid - The parent global var_store.\r\n   * @param {Boolean} addQuotes - The add quotes toggle.\r\n   * @return {Boolean|Number|String} - The value of the given variable.\r\n   */\r\n  get (variable, defaultValue, evaluate, valid, addQuotes) {\r\n    // Set the optional arguments\r\n    defaultValue = (typeof defaultValue === 'undefined') ? null : defaultValue\r\n    evaluate = (typeof evaluate === 'undefined') ? true : evaluate\r\n    valid = (typeof valid === 'undefined') ? null : valid\r\n    var value = null\r\n    // Gets an experimental variable.\r\n    if (variable in this) {\r\n      this._bypass_proxy = true // Avoid Proxy feedback loop\r\n      if (typeof this[variable] === 'string' && evaluate === true) {\r\n        value = this._item.syntax.eval_text(this[variable], null, addQuotes)\r\n      } else {\r\n        value = this[variable]\r\n      }\r\n      this._bypass_proxy = false\r\n    }\r\n    // If value is not found locally, look in experiment object.\r\n    if (value == null && this._parent && variable in this._parent) {\r\n      this._parent._bypass_proxy = true // Avoid Proxy feedback loop\r\n      if (typeof this._parent[variable] === 'string' && evaluate === true) {\r\n        value = this._item.syntax.eval_text(this._parent[variable], null, addQuotes)\r\n      } else {\r\n        value = this._parent[variable]\r\n      }\r\n      this._parent._bypass_proxy = false\r\n    }\r\n    // Return function result.\r\n    return value\r\n  }\r\n\r\n  /**\r\n   * Check if the variable is part of the variable store.\r\n   * @param {String} variable - The name of the variable.\r\n   * @return {Boolean} - True if the variable is part of the store.\r\n   */\r\n  has (variable) {\r\n    return this.inspect().includes(variable)\r\n  }\r\n\r\n  /** Create a list of all avariables available.\r\n   * @return {Array} - Array containing names of all variables.\r\n   */\r\n  inspect () {\r\n    const variables = []\r\n    for (const variable in this) {\r\n      if (this._ignored_properties.includes(variable)) continue\r\n      variables.push(variable)\r\n    }\r\n    return variables\r\n  }\r\n\r\n  /** Create a list of value/name pairs.\r\n   * @return {Array} - Array containing name and values of all variables.\r\n   */\r\n  items () {\r\n    const pairs = {}\r\n    for (const variable of this.inspect()) {\r\n      pairs[variable] = this[variable]\r\n    }\r\n    return pairs\r\n  }\r\n\r\n  /**\r\n   * Set the value of a variable in the store.\r\n   * @param {String} variable - The name of the variable.\r\n   * @value {Boolean|Number|String} - Value of the variable to set.\r\n   */\r\n  set (variable, value) {\r\n    this[variable] = value\r\n  }\r\n\r\n  /**\r\n   * Unset (remove) a variable from the store.\r\n   * @param {String} variable - The name of the variable.\r\n   */\r\n  unset (variable) {\r\n    if (this.has(variable) === true) {\r\n      delete this[variable]\r\n    }\r\n  }\r\n\r\n  /** Create a list of variable names.\r\n   * @return {Array} - Array containing namesof all variables.\r\n   */\r\n  vars () {\r\n    return this.inspect()\r\n  }\r\n\r\n  /**\r\n   * Clears all experimental variables, except those that are explicitly\r\n   * preserved.\r\n   * @param {Array} preserve - An array of variable names to preserve.\r\n   */\r\n  clear (preserve) {\r\n    preserve = (typeof preserve === 'undefined') ? [] : preserve\r\n    for (const variable of this.inspect()) {\r\n      if (preserve.includes(variable)) continue\r\n      this.unset(variable)\r\n    }\r\n  }\r\n}\r\n","import {\r\n  constants\r\n} from '../system/constants.js'\r\n\r\n/** Class representing the clock system. */\r\nexport default class Clock {\r\n  /**\r\n   * Create a clock object which controls a pseudo real-time clock.\r\n   * @param {Object} experiment - The experiment  to which the clock belongs.\r\n   */\r\n  constructor (experiment) {\r\n    // Create and set private properties.\r\n    this._experiment = experiment // Parent experiment item.\r\n    this._startTime = -1 // Start time anchor of the experiment.\r\n  }\r\n\r\n  /** Initialize the clock. */\r\n  _initialize () {\r\n    // Set the absolute start time of the expeirment.\r\n    this._startTime = this._now()\r\n  }\r\n\r\n  /** Get an absolute time stamp from the system in ms.\r\n   * @return {Number} - The current absolute time in ms.\r\n   */\r\n  _now () {\r\n    // Get the current time stamp using the best available timing method.\r\n    if (window.performance.now) {\r\n      return Math.round(window.performance.now())\r\n    } else if (window.performance.webkitNow) {\r\n      return Math.round(window.performance.webkitNow())\r\n    } else {\r\n      return new Date().getTime()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sleeps (pauses) for a duration (in milliseconds).\r\n   * @param {Number} ms - The duration to wait in ms.\r\n   */\r\n  sleep (ms) {\r\n    // Sleeps (pauses) for a duration (in milliseconds).\r\n    if (this._experiment !== null) {\r\n      // Set the event processor.\r\n      this._experiment._runner._events._run(ms, constants.RESPONSE_DURATION, null)\r\n    }\r\n  }\r\n\r\n  /** Get the relative time from the start of an experiment.\r\n   * @return {Number} - The current relative time in ms.\r\n   */\r\n  time () {\r\n    // Gives the current timestamp in milliseconds.\r\n    if (this._startTime !== -1) {\r\n      return (this._now() - this._startTime)\r\n    } else {\r\n      return 0\r\n    }\r\n  }\r\n}\r\n","import { constants } from '../system/constants.js'\r\nimport VarStore from '../classes/var_store.js'\r\nimport Clock from '../backends/clock.js'\r\n\r\n/** Class representing an OpenSesame item. */\r\nexport default class Item {\r\n  constructor (experiment, name, script) {\r\n    // Create and set private properties.\r\n    this._parent = null\r\n    this._runner = (experiment.constructor.name === 'Runner') ? experiment : experiment._runner\r\n    this._status = constants.STATUS_NONE\r\n\r\n    // Create and set public properties.\r\n    this.clock = (experiment.constructor.name === 'Runner') ? new Clock(this) : experiment.clock\r\n    this.count = 0\r\n    this.experiment = (experiment.constructor.name === 'Runner') ? this : experiment\r\n    this.name = name\r\n    this.python_workspace = this._runner._pythonWorkspace\r\n    this.response_store = this._runner._responseStore\r\n    this.syntax = this._runner._syntax\r\n    this.vars = new VarStore(this, (experiment.constructor.name === 'Runner') ? null : this.experiment.vars)\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    // Adjust the status of the item.\r\n    this._status = constants.STATUS_FINALIZE\r\n\r\n    // Implements the complete phase of the item.\r\n    if (this._parent !== null && this._runner._events._currentItem) {\r\n      // Return the process control to the parent of the element.\r\n      this._runner._events._currentItem = this._parent\r\n      this._runner._events._currentItem.run()\r\n    }\r\n  }\r\n\r\n  /** Implements the prepare complete phase of an item. */\r\n  _prepare_complete () {\r\n  }\r\n\r\n  /** Implements the update phase of an item. */\r\n  _update (response) {\r\n  }\r\n\r\n  /**\r\n     * Pauses the object execution. !WARNING This function can not be implemented due the script blocking of javascript.\r\n     * @param {Number} pMs - The sleep time in milliseconds.\r\n     */\r\n  sleep (pMs) {\r\n    this.clock.sleep(pMs)\r\n  }\r\n\r\n  /**\r\n     * Returns the current time.\r\n     * @returns {Number} - The current time in ms from the start of the experiment.\r\n     */\r\n  time () {\r\n    // Returns the current time.\r\n    return this.clock.time()\r\n  }\r\n\r\n  /**\r\n     * Parses comments from a single definition line, indicated by # // or '.\r\n.    * @param {String} line - The definition line to be parsed.\r\n     * @returns {Boolean} - Return true if the commennt is succesfully parsed.\r\n     */\r\n  parse_comment (line) {\r\n    // Parses comments from a single definition line, indicated by # // or '.\r\n    line = line.trim()\r\n    if ((line.length > 0) && (line.charAt(0) === '#')) {\r\n      // Add comments to the array removing the first character.\r\n      this.comments.push(line.slice(1))\r\n      return true\r\n    } else if ((line.length > 1) && (line.charAt(0) === '/')) {\r\n      // Add comments to the array removing the first two characters.\r\n      this.comments.push(line.slice(2))\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Parses keywords  from a single definition line.\r\n     * @param {String} line - The definition line to be parsed.\r\n     * @param {Boolean} fromAscii - If true the source is ascii.\r\n     * @param {Boolean} evaluate - If true the keyword is evaluated.\r\n     * @returns {Object} - Returns the keywords found in the line.\r\n     */\r\n  parse_keyword (line, fromAscii, evaluate) {\r\n  }\r\n\r\n  /**\r\n     * Implements arbitrary line parsing, for item-specific requirements.\r\n     * @param {String} line - The definition line to be parsed.\r\n     */\r\n  parse_line (line) {\r\n  }\r\n\r\n  /**\r\n    * Reads a single variable from a single definition line.\r\n    * @param {String} line - The definition line to be parsed.\r\n    * @return {Boolean} - Return true if the variabel is succesfully parsed.\r\n    */\r\n  parse_variable (line) {\r\n    // Reads a single variable from a single definition line.\r\n    if (this.parse_comment(line)) {\r\n      return true\r\n    } else {\r\n      // Split the single line into a set of tokens.\r\n      const [cmd, args, _kwargs] = this._runner._syntax.parse_cmd(line)\r\n      if (cmd === 'set') {\r\n        if (args.length !== 2) {\r\n          this._runner._debugger.addError('Failed to parse definition: ' + line)\r\n        } else {\r\n          this.vars.set(args[0], args[1])\r\n          return true\r\n        }\r\n      } else {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Parses multiline variables from a script\r\n   * @param {String} script - The definition script line to be parsed.\r\n   */\r\n  parse_multiline_vars (script) {\r\n    const vars = this.syntax.parse_multiline_vars(script)\r\n    for (const key in vars) {\r\n      this.vars.set(key, vars[key])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses the item from a definition string.\r\n   * @param {String} script - The definition script line to be parsed.\r\n   */\r\n  from_string (script) {\r\n    // Parses the item from a definition string.\r\n    this.variables = {}\r\n    this.comments = []\r\n    this.reset()\r\n\r\n    // Split the string into an array of lines.\r\n    if (script !== null) {\r\n      this.parse_multiline_vars(script)\r\n      var lines = script.split('\\n')\r\n      for (var i = 0; i < lines.length; i++) {\r\n        if ((lines[i] !== '') && (this.parse_variable(lines[i]) === false)) {\r\n          this.parse_line(lines[i])\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Implements the reset item variables method. */\r\n  reset () {\r\n  }\r\n\r\n  /** Implements the prepeare phase of an item. */\r\n  prepare () {\r\n    // Set the internal counter.\r\n    this.experiment.vars.set('count_' + this.name, this.count)\r\n    this.count++\r\n\r\n    // Set the status to initialize.\r\n    this._status = constants.STATUS_INITIALIZE\r\n\r\n    // For debugging.\r\n    this._runner._debugger.addMessage('prepare ' + this.name)\r\n\r\n    // Implements the complete phase of the item (to support blocking script in the prepare phase).\r\n    if (!(this.type === 'sequence' && this._parent.type === 'sequence')) {\r\n      if ((this._parent !== null) && (this.type !== 'feedback')) {\r\n        // Prepare cycle of parent.\r\n        this._parent._prepare_complete()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Set a onset time stamp before running an item.\r\n     * @param {Number} time - The time to store as onset time.\r\n     */\r\n  set_item_onset (time) {\r\n    // Set a timestamp for the item's executions\r\n    time = (typeof time === 'undefined') ? this.clock.time() : time\r\n\r\n    // Add the time stamp to the variable list.\r\n    this.experiment.vars.set('time_' + this.name, time)\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    this._runner._debugger.addMessage('run ' + this.name)\r\n  }\r\n}\r\n","/**\n * Loop utility functions\n */\nimport combos from 'combos'\nimport {\n  isInteger,\n  isArray,\n  isPlainObject,\n  isString,\n  isEmpty,\n  shuffle,\n  zip,\n  zipObject,\n  fromPairs,\n  pick,\n  reverse\n} from 'lodash'\n\n/**\n * Group matrix values by their variables names\n *\n * @param {Object} srcMatrix The source matrix to transform\n * @returns {Object}\n */\nexport function unstack (srcMatrix) {\n  if (!isArray(srcMatrix)) {\n    throw new TypeError('srcMatrix should be an array')\n  }\n  return Object.values(srcMatrix).reduce((acc, cycle) => {\n    for (const [key, val] of Object.entries(cycle)) {\n      if (key in acc) {\n        acc[key].push(val)\n      } else {\n        acc[key] = [val]\n      }\n    }\n    return acc\n  }, {})\n}\n\n/**\n * Convert grouped by variable matrix back to a normal matrix\n * @param {array} srcMatrix\n * @returns {array}\n */\nexport function stack (srcMatrix) {\n  if (!isPlainObject(srcMatrix)) {\n    throw new TypeError('srcMatrix should be an object')\n  }\n  const columns = Object.keys(srcMatrix)\n  const rows = zip(...Object.values(srcMatrix))\n  return rows.map(row => zipObject(columns, row))\n}\n\n/**\n * Creates a full factorial design of all the variable values in the matrix\n * @param {array} matrix The array of cycles to fully cross\n * @returns {array}\n */\nexport function fullfactorial (matrix) {\n  const result = combos(unstack(matrix))\n  return result\n}\n\n/**\n * Shuffles the order of the rows in the matrix. If a column/variable name\n * is specified, only the rows in this column are shuffled.\n *\n * @export\n * @param {array} matrix The matrix to be shuffled\n * @param {array} columns  Array containing the variable/column to be shuffled\n * @returns {array}\n */\nexport function shuffleVert (matrix, columns) {\n  if (!isArray(matrix)) {\n    throw new TypeError('matrix should be of type array')\n  }\n  if (typeof (columns) === 'undefined' || (isArray(columns) && columns.length === 0)) {\n    return shuffle(matrix)\n  } else if (!isArray(columns)) {\n    throw new TypeError('Invalid argument for columns passed to shuffleVert. Expects an array containing column names')\n  } else {\n    const grouped = unstack(matrix)\n    let cols = pick(grouped, columns)\n    cols = Object.entries(cols).reduce((prev, [key, values]) => {\n      prev[key] = shuffle(values)\n      return prev\n    }, {})\n    return stack({ ...grouped, ...cols })\n  }\n}\n\n/**\n * Shuffles the matrix horizontally; shuffle the values of the columns\n * If column names are specified, only these will be shuffled\n *\n * @export\n * @param {array} matrix\n * @param {array} columns\n * @returns {array}\n */\nexport function shuffleHoriz (matrix, columns) {\n  if (!isArray(matrix)) {\n    throw new TypeError('matrix should be of type array')\n  }\n  if (typeof columns === 'undefined') columns = []\n  if (!isArray(columns)) {\n    throw new TypeError('Invalid argument specified to shuffleHoriz. Expects an array that optionally contains column names to shuffle')\n  }\n  return Object.values(matrix).map(row => {\n    const vars = columns.length === 0\n      ? row\n      : pick(row, columns)\n    const keys = Object.keys(vars)\n    let vals = Object.values(vars)\n    vals = shuffle(vals)\n    const res = fromPairs(zip(keys, vals))\n    return { ...row, ...res }\n  })\n}\n\n/**\n * Sorts only the specified columns of the matrix\n *\n * @export\n * @param {array} matrix\n * @param {string} col\n * @returns array\n */\nexport function sortCol (matrix, col) {\n  if (!isArray(matrix)) {\n    throw new TypeError('matrix should be of type array')\n  }\n  if (!isString(col) || col === '') {\n    throw new Error('Invalid argument specified to sortCol. Expects a column name')\n  }\n  const grouped = unstack(matrix)\n  grouped[col].sort()\n  return stack(grouped)\n}\n\n/**\n * Reverses the matrix order\n * If column names are specified, only their orders are reversed\n * @export\n * @param {array} matrix\n * @param {array} columns\n * @returns {array}\n */\nexport function reverseRows (matrix, columns) {\n  if (!isArray(matrix)) {\n    throw new TypeError('matrix should be of type array')\n  }\n  if (typeof columns === 'undefined') columns = []\n  if (!isArray(columns)) {\n    throw new TypeError('Invalid argument specified to reverseRows. Expects an array containing a column name')\n  }\n  if (columns.length === 0) {\n    return reverse(matrix)\n  } else {\n    const grouped = unstack(matrix)\n    let cols = pick(grouped, columns)\n    if (isEmpty(cols)) {\n      throw new ReferenceError(`one or more of ${columns} were not found in the matrix`)\n    }\n    cols = Object.entries(cols).reduce((prev, [key, values]) => {\n      prev[key] = reverse(values)\n      return prev\n    }, {})\n    return stack({ ...grouped, ...cols })\n  }\n}\n\n/**\n * Rolls the matrix with the specified distance\n *\n * @export\n * @param {array} matrix\n * @param {number} amount\n * @param {string} column\n * @returns array\n */\nexport function roll (matrix, amount, column) {\n  if (!isArray(matrix)) {\n    throw new TypeError('matrix should be of type array')\n  }\n  // operate on a copy of the array to preserve the original\n  matrix = [...matrix]\n\n  amount = parseInt(amount)\n  if (!isInteger(amount)) {\n    throw new TypeError(`amount needs to be an integer, was ${amount}`)\n  }\n\n  if (!column) {\n    return rollN(matrix, amount)\n  }\n\n  if (!isString(column)) {\n    throw new TypeError(`column expects a string, was ${column}`)\n  } else {\n    const grouped = unstack(matrix)\n    if (!Object.prototype.hasOwnProperty.call(grouped, column)) {\n      throw new ReferenceError(`Could not find column ${column} in matrix`)\n    }\n    grouped[column] = rollN(grouped[column], amount)\n    return stack(grouped)\n  }\n}\n\n/**\n * Roll array contents forward or backward by the specified amount\n *\n * @param {array} list\n * @param {number} amount\n * @returns {array}\n */\nfunction rollN (list, amount) {\n  if (amount > 0) {\n    for (let i = 0; i < amount; i++) {\n      list.unshift(list.pop())\n    }\n  } else {\n    for (let i = 0; i > amount; i--) {\n      list.push(list.shift())\n    }\n  }\n  return list\n}\n\n/**\n * Duplicate (or remove) rows depending on the specified weight parameter\n *\n * @param {array} matrix The matrix containing the data\n * @param {string} weightCol The colom to use for weight values\n */\nexport function weight (matrix, weightCol) {\n  if (!isArray(matrix)) {\n    throw new TypeError('matrix should be of type array')\n  }\n  if (!isString(weightCol)) {\n    throw new TypeError('Invalid argument passed to weight. Expects a column name')\n  }\n  if (!Object.prototype.hasOwnProperty.call(matrix[0], weightCol)) {\n    throw new ReferenceError(`Column '${weightCol}' not found in matrix`)\n  }\n  return matrix.reduce((result, item) => {\n    const weight = parseInt(item[weightCol])\n    if (!isInteger(weight)) {\n      throw new TypeError('Specified weight value is not an integer')\n    }\n    for (let i = 0; i < weight; i++) {\n      result.push(item)\n    }\n    return result\n  }, [])\n}\n","import {\r\n  isNumber,\r\n  isArray,\r\n  shuffle,\r\n  sortBy\r\n} from 'lodash'\r\n\r\nimport {\r\n  constants\r\n} from '../system/constants.js'\r\nimport Item from './item.js'\r\n\r\nimport {\r\n  fullfactorial,\r\n  shuffleVert,\r\n  shuffleHoriz,\r\n  sortCol,\r\n  reverseRows,\r\n  roll,\r\n  weight\r\n} from '../util/matrix'\r\n\r\nimport parse from \"csv-parse/lib/sync\"\r\n\r\n\r\n/**\r\n * Class representing a sequence item.\r\n * @extends Item\r\n */\r\nexport default class Loop extends Item {\r\n  /**\r\n   * Create an experiment item which controls the OpenSesame experiment.\r\n   * @param {Object} experiment - The experiment item to which the item belongs.\r\n   * @param {String} name - The unique name of the item.\r\n   * @param {String} script - The script containing the properties of the item.\r\n   */\r\n  constructor (experiment, name, script) {\r\n    // Inherited create.\r\n    super(experiment, name, script)\r\n\r\n    // Definition of public properties.\r\n    this.description = 'Repeatedly runs another item'\r\n    this.matrix = null\r\n\r\n    // Definition of private properties.\r\n    this._break_if = ''\r\n    this._cycles = []\r\n    this._index = 0\r\n    this._keyboard = null\r\n    this._operations = []\r\n    this._initialized = false\r\n\r\n    // Process the script.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    this._status = constants.STATUS_FINALIZE\r\n    super._complete()\r\n  }\r\n\r\n  /**\r\n   * Scans the provided list of argument for variables and retrieves them if found.\r\n   * The function works recursively and thus also parses elements inside arrays that are part of\r\n   * args.\r\n   *\r\n   * @param {array} args The list of arguments to parse.\r\n   * @returns {array} The parsed arguments list\r\n   */\r\n  _eval_args (args) {\r\n    if (!isArray(args)) return args\r\n    return args.map( el => {\r\n      if (isArray(el)) {\r\n        return this._eval_args(el)\r\n      } else {\r\n        return this._runner._syntax.remove_quotes(this._runner._syntax.eval_text(el))\r\n      }\r\n    })\r\n  }\r\n\r\n  /** Reset all item variables to their default value. */\r\n  reset () {\r\n    this.orig_matrix = []\r\n    this.vars.cycles = 1\r\n    this.vars.repeat = 1\r\n    this.vars.skip = 0\r\n    this.vars.offset = 'no'\r\n    this.vars.order = 'random'\r\n    this.vars.item = ''\r\n    this.vars.break_if = 'never'\r\n    this.vars.source = 'table'\r\n    this.vars.source_file = ''\r\n    this._index = 0\r\n    this._operations = []\r\n    this._initialized = false\r\n  }\r\n\r\n  /**\r\n   * Parse a definition string and retrieve all properties of the item.\r\n   * @param {String} script - The script containing the properties of the item.\r\n   */\r\n  from_string (script) {\r\n    // Creates a loop from a definition in a string.\r\n    this.comments = []\r\n    this.variables = {}\r\n    this.reset()\r\n\r\n    // Split the string into an array of lines.\r\n    if (script != null) {\r\n      const lines = script.split('\\n')\r\n      for (let i = 0; i < lines.length; i++) {\r\n        if ((lines[i] !== '') && (this.parse_variable(lines[i]) === false)) {\r\n          const [instruction, ...params] = this.syntax.split(lines[i])\r\n\r\n          let cycle, name, value\r\n\r\n          switch (instruction) {\r\n          case 'run':\r\n            if (params.length > 0) this.vars.item = params[0]\r\n            break\r\n          case 'setcycle':\r\n            if (params.length <= 2) {\r\n              this._runner._debugger.addError(`Incorrect setcycle command in item ${this.name}`)\r\n              break\r\n            }\r\n            cycle = params[0]\r\n            name = params[1]\r\n            value = this.syntax.remove_quotes(params[2])\r\n            // Check if the value is numeric\r\n            value = isNumber(value) ? Number(value) : value\r\n            // If a python expression, convert to javascript.\r\n            if (value[0] === '=') {\r\n              // Parse the python statement.\r\n              value = this._runner._pythonParser._prepare(value.slice(1))\r\n              if (value !== null) {\r\n                value = value.body[0]\r\n              }\r\n            }\r\n            if (this.orig_matrix[cycle] === undefined) {\r\n              this.orig_matrix[cycle] = {}\r\n            }\r\n            this.orig_matrix[cycle][name] = value\r\n            break\r\n          case 'fullfactorial':\r\n            this._operations.push([fullfactorial, []])\r\n            break\r\n          case 'shuffle':\r\n            this._operations.push([shuffleVert, [params]])\r\n            break\r\n          case 'shuffle_horiz':\r\n            this._operations.push([shuffleHoriz, [params]])\r\n            break\r\n          case 'slice':\r\n            this._operations.push([(matrix, args) => matrix.slice(...args), [params]])\r\n            break\r\n          case 'sort':\r\n            this._operations.push([sortCol, [...params]])\r\n            break\r\n          case 'sortby':\r\n            this._operations.push([sortBy, [params]])\r\n            break\r\n          case 'reverse':\r\n            this._operations.push([reverseRows, [params]])\r\n            break\r\n          case 'roll':\r\n            this._operations.push([roll, [...params]])\r\n            break\r\n          case 'weight':\r\n            this._operations.push([weight, [...params]])\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prepares the variables for one single cycle within the loop.\r\n   * @param {Number} cycle -The cycle to apply.\r\n   */\r\n  apply_cycle (cycle) {\r\n    // Sets all the loop variables according to the cycle.\r\n    if (cycle in this.matrix) {\r\n      for (const variable in this.matrix[cycle]) {\r\n        // Get the value of the variable.\r\n        let value = this.matrix[cycle][variable]\r\n\r\n        // Check for python expression.\r\n        if (typeof value === 'object') {\r\n          // value contains ast tree, run the parser.\r\n          try {\r\n            // Evaluate the expression\r\n            value = this._runner._pythonParser._runstatement(value)\r\n          } catch (e) {\r\n            // Error during evaluation.\r\n            this._runner._debugger.addError(\r\n              'Failed to evaluate expression in in loop item: ' + this.name + ' (' + value + ')')\r\n          }\r\n        } else {\r\n          // Evaluate variabels potentially available in value.\r\n          value = this._runner._syntax.eval_text(value)\r\n        }\r\n        // Set the variable.\r\n        this.experiment.vars.set(variable, value)\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    // Make sure the item to run exists.\r\n    if (this.experiment.items._items[this.vars.item] === 'undefined') {\r\n      this._runner._debugger.addError('Could not find an item which is called by loop item: ' +\r\n      this.name + ' (' + this.vars.item + ')')\r\n    }\r\n    if (this.vars.get('source') === 'file') this.parseFileSource()\r\n    this._initialized = false\r\n    super.prepare()\r\n    this.set_item_onset()\r\n  }\r\n  \r\n  /** Reads the loop table from a csv file in the file pool **/\r\n  parseFileSource () {\r\n    let src = this.vars.get('source_file')\r\n    if (!src.toLowerCase().endsWith('.csv')) {\r\n      throw 'Only csv files are supported as source files by loop items'\r\n    }\r\n    if (typeof this._runner._pool[src] === 'undefined') {\r\n      throw 'Loop item refers to non-existing source file: ' + src\r\n    }\r\n    this.orig_matrix = parse(\r\n      this._runner._pool[src].data,\r\n      {columns: true, skip_empty_lines: true}\r\n    )\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    super.run()\r\n    if (!this._initialized) {\r\n      // The first step is to create an array of cycle indices (`cycles`). We\r\n      // first add the integer part of the repeats to this array, which results\r\n      // in a `cycles` array with a length that is a multiple of the original\r\n      // matrix length.\r\n      let cycles = []\r\n      const wholeRepeats = Math.floor(this.vars.get('repeat'))\r\n      for (let j = 0; j < wholeRepeats; j++) {\r\n        for (let i in this.orig_matrix) {\r\n          cycles.push(i)\r\n        }\r\n      }\r\n      // Next, we add the non-integer part of the repeats to the cycles array.\r\n      const partialRepeats = this.vars.get('repeat') - wholeRepeats\r\n      if (partialRepeats > 0) {\r\n        // Get an array of all cycles indices. (This syntax is like a range().)\r\n        // For randomly ordered loops, shuffle the order of the indices.\r\n        // This makes sure that the next step of determining the repeatcycles\r\n        // is a 'random selection without replacement'\r\n        let allCycles = [...Array(this.orig_matrix.length).keys()]\r\n        if (this.vars.order === 'random') {\r\n          allCycles = shuffle(allCycles)\r\n        }\r\n        // Add the remaining cycles to the cycles array\r\n        const remainder = Math.floor(this.orig_matrix.length * partialRepeats)\r\n        cycles = [...cycles, ...allCycles.splice(0, remainder)]\r\n      }\r\n      if (this.vars.order === 'random') {\r\n        cycles = shuffle(cycles)\r\n      }\r\n      // Create a live matrix that takes into account the repeats and the\r\n      // shuffles.\r\n      this.matrix = []\r\n      for (let k in cycles) {\r\n        this.matrix.push(this.orig_matrix[cycles[k]])\r\n      }\r\n      // Perform the operations. This may change the number of cycles, which\r\n      // is why this._cycles is only determined afterwards.\r\n      this.matrix = this._operations.reduce((mtrx, [func, args]) =>\r\n        func(mtrx, ...this._eval_args(args)), this.matrix)      \r\n      this._cycles = [... this.matrix.keys()]\r\n      this._initialized = true\r\n      this._index = null\r\n    } // end init\r\n    // Check if if the cycle must be repeated.\r\n    if (this.experiment.vars.repeat_cycle === 1 && this._index !== null) {\r\n      this._runner._debugger.msg('Repeating cycle: ' + this._index)\r\n      this._cycles.push(this._index)\r\n      if (this.vars.get('order') === 'random') {\r\n        this._cycles = shuffle(this._cycles)\r\n      }\r\n    }\r\n    // When the loop is finished\r\n    if (this._cycles.length == 0) {\r\n      this._complete()\r\n      return\r\n    }\r\n    // Prepare for the current cycle\r\n    this._index = this._cycles.shift()\r\n    this.apply_cycle(this._index)\r\n    this.experiment.vars.repeat_cycle = 0\r\n    // Process the break-if statement\r\n    const break_if_val = this.vars.get('break_if', undefined, false)\r\n    this._break_if = ['never', ''].includes(break_if_val)\r\n      ? null\r\n      : this.syntax.compile_cond(break_if_val)\r\n    if (this._break_if !== null) {\r\n      this.python_workspace['this'] = this\r\n      if (this.python_workspace._eval(this._break_if) === true) {\r\n        this._complete()\r\n        this._initialized = false\r\n        return\r\n      }\r\n    }\r\n    // Execute the item to run\r\n    if (this._runner._itemStore._items[this.vars.item].type === 'sequence') {\r\n      this._runner._itemStore.prepare(this.vars.item, this)\r\n    } else {\r\n      this._runner._itemStore.execute(this.vars.item, this)\r\n    }\r\n  }\r\n}\r\n","import {\r\n  constants\r\n} from '../system/constants.js'\r\n\r\n/** Class representing a keyboard device. */\r\nexport default class Keyboard {\r\n  /**\r\n   * Create an object which represents a keyboard device.\r\n   * @param {Object} experiment - The experiment to which the logger belongs.\r\n   * @param {Number} timeOut - Duration in ms for time out.\r\n   * @param {Array} keyList - List of acceptable response keys.\r\n   */\r\n  constructor (experiment, timeOut, keyList) {\r\n    // Create and set private properties.\r\n    this._experiment = experiment // Anchor to the experiment object.\r\n    this._keyList = (typeof keyList === 'undefined') ? [] : keyList // List of acceptable response keys.\r\n    this._timeOut = (typeof timeOut === 'undefined') ? null : timeOut // Duration in millisecond for time-out.\r\n\r\n    // Set constant properties.\r\n    this._SYNONYM_MAP = [\r\n      ['space', ' ', 'SPACE'],\r\n      ['\"', 'quotedbl', 'QUOTEDBL'],\r\n      ['!', 'exclaim', 'EXCLAIM'],\r\n      ['#', 'hash', 'HASH'],\r\n      ['$', 'dollar', 'DOLLAR'],\r\n      ['&', 'ampersand', 'AMPERSAND'],\r\n      [\"'\", 'quote', 'QUOTE'],\r\n      ['(', 'leftbracket', 'leftparen', 'LEFTBRACKET', 'LEFTPAREN'],\r\n      [')', 'rightbracket', 'rightparen', 'RIGHTBRACKET', 'RIGHTPAREN'],\r\n      ['*', 'asteriks', 'ASTERISK'],\r\n      ['+', 'plus', 'PLUS'],\r\n      [',', 'comma', 'COMMA'],\r\n      ['-', 'minus', 'MINUS'],\r\n      ['.', 'period', 'PERIOD'],\r\n      ['/', 'slash', 'SLASH'],\r\n      ['1'],\r\n      ['2'],\r\n      ['3'],\r\n      ['4'],\r\n      ['5'],\r\n      ['6'],\r\n      ['7'],\r\n      ['8'],\r\n      ['9'],\r\n      ['0'],\r\n      ['=', 'equals', 'EQUALS'],\r\n      [':', 'colon', 'COLON'],\r\n      [';', 'semicolon', 'SEMICOLON'],\r\n      ['<', 'less', 'LESS'],\r\n      ['>', 'greater', 'GREATER'],\r\n      ['?', 'question', 'QUESTION'],\r\n      ['@', 'at', 'AT'],\r\n      ['a', 'A'],\r\n      ['b', 'B'],\r\n      ['c', 'C'],\r\n      ['d', 'D'],\r\n      ['e', 'E'],\r\n      ['f', 'F'],\r\n      ['g', 'G'],\r\n      ['h', 'H'],\r\n      ['i', 'I'],\r\n      ['j', 'J'],\r\n      ['k', 'K'],\r\n      ['l', 'L'],\r\n      ['m', 'M'],\r\n      ['n', 'N'],\r\n      ['o', 'O'],\r\n      ['p', 'P'],\r\n      ['q', 'Q'],\r\n      ['r', 'R'],\r\n      ['s', 'S'],\r\n      ['t', 'T'],\r\n      ['u', 'U'],\r\n      ['v', 'V'],\r\n      ['w', 'W'],\r\n      ['x', 'X'],\r\n      ['y', 'Y'],\r\n      ['z', 'Z'],\r\n      ['kp0', 'KP0'],\r\n      ['kp1', 'KP1'],\r\n      ['kp2', 'KP2'],\r\n      ['kp3', 'KP3'],\r\n      ['kp4', 'KP4'],\r\n      ['kp5', 'KP5'],\r\n      ['kp6', 'KP6'],\r\n      ['kp7', 'KP7'],\r\n      ['kp8', 'KP8'],\r\n      ['kp9', 'KP9'],\r\n      ['kp_divide', 'KP_DIVIDE'],\r\n      ['kp_enter', 'KP_ENTER'],\r\n      ['kp_equals', 'KP_EQUALS'],\r\n      ['kp_minus', 'KP_MINUS'],\r\n      ['kp_multiply', 'KP_MULTIPLY'],\r\n      ['kp_period', 'KP_PERIOD'],\r\n      ['kp_plus', 'KP_PLUS'],\r\n      ['\\\\', 'backslash', 'BACKSLASH'],\r\n      ['^', 'power', 'caret', 'POWER', 'CARET'],\r\n      ['_', 'underscore', 'UNDERSCORE'],\r\n      ['`', 'backquote', 'BACKQUOTE'],\r\n      ['f1', 'F1', 'help', 'HELP'],\r\n      ['f2', 'F2'],\r\n      ['f3', 'F3'],\r\n      ['f4', 'F4'],\r\n      ['f5', 'F5'],\r\n      ['f6', 'F6'],\r\n      ['f7', 'F7'],\r\n      ['f8', 'F8'],\r\n      ['f9', 'F9'],\r\n      ['f10', 'F10'],\r\n      ['f11', 'F11'],\r\n      ['f12', 'F12'],\r\n      ['f13', 'F13'],\r\n      ['f14', 'F14'],\r\n      ['f15', 'F15'],\r\n      ['up', 'UP'],\r\n      ['down', 'DOWN'],\r\n      ['left', 'LEFT'],\r\n      ['right', 'RIGHT'],\r\n      ['menu', 'MENU'],\r\n      ['lshift', 'left shift', 'LSHIFT', 'LEFT SHIFT'],\r\n      ['lctrl', 'left ctrl', 'LCTRL', 'LEFT CTRL'],\r\n      ['lalt', 'left alt', 'LALT', 'LEFT ALT'],\r\n      ['rshift', 'right shift', 'RSHIFT', 'RIGHT SHIFT'],\r\n      ['rctrl', 'right ctrl', 'RCTRL', 'RIGHT CTRL'],\r\n      ['ralt', 'right alt', 'alt gr', 'RALT', 'RIGHT ALT', 'ALT GR'],\r\n      ['page up', 'pageup', 'PAGE UP', 'PAGEUP'],\r\n      ['page down', 'pagedown', 'PAGE DOWN', 'PAGEDOWN'],\r\n      ['pause', 'PAUSE'],\r\n      ['scroll lock', 'scrollock', 'SCROLL LOCK', 'SCROLLOCK'],\r\n      ['caps lock', 'capslock', 'CAPS LOCK', 'CAPSLOCK'],\r\n      ['nummlock', 'NUMMLOCK'],\r\n      ['clear', 'CLEAR'],\r\n      ['enter', 'ENTER', 'return', 'RETURN'],\r\n      ['tab', 'TAB'],\r\n      ['backspace', 'BACKSPACE'],\r\n      ['end', 'END'],\r\n      ['home', 'HOME'],\r\n      ['insert', 'INSERT'],\r\n      ['delete', 'DELETE'],\r\n      ['sysreq', 'sys req', 'SYSREQ', 'SYS REQ'],\r\n      ['break', 'BREAK'],\r\n      ['escape', 'ESCAPE'],\r\n      ['print', 'PRINT'],\r\n      ['print screen', 'PRINT SCREEN'],\r\n      ['lmeta', 'left meta', 'LMETA', 'LEFT META', 'lsuper', 'LSUPER', 'left super', 'LEFT SUPER'],\r\n      ['rmeta', 'right meta', 'RMETA', 'RIGHT META', 'rsuper', 'right super', 'RSUPER', 'RIGHT SUPER'],\r\n      // key defined below are not supported yet.\r\n      ['euro', 'EURO'],\r\n      ['first', 'FIRST'],\r\n      ['last', 'LAST'],\r\n      ['kp enter', 'KP ENTER'],\r\n      ['kp equals', 'KP EQUALS'],\r\n      ['mode', 'MODE'],\r\n      ['unknown', 'UNKNOWN'],\r\n      ['unknown key', 'UNKNOWN KEY']\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * Convert all response values to their default values (remove synonyms).\r\n   * @param {Array} responses - A list of response values.\r\n   * @return {Array} - List of default values for the given responses.\r\n   */\r\n  _get_default_from_synonym (responses) {\r\n    const defaults = []\r\n    let synonyms\r\n    for (let i = 0; i < responses.length; i++) {\r\n      synonyms = this._synonyms(responses[i])\r\n      if (typeof synonyms === 'undefined') {\r\n        throw new ReferenceError(`Unknown key '${responses[i]}'`)\r\n      }\r\n      defaults.push(synonyms[0])\r\n    }\r\n    return defaults\r\n  }\r\n\r\n  /**\r\n   * Set the configuration for the keyboard backend.\r\n   * @param {Number} timeOut - Duration in ms for time out.\r\n   * @param {Array} keyList - List of acceptable response keys.\r\n   */\r\n  _set_config (timeOut, keyList) {\r\n    // Set the properties.\r\n    this._keyList = keyList\r\n    this._timeOut = timeOut\r\n  }\r\n\r\n  /**\r\n   * Convert a response value to its default value (remove synonym).\r\n   * @param {String} button - A response.\r\n   * @return {String|Null} - Default value of the response.\r\n   */\r\n  _synonyms (button) {\r\n    if (typeof button !== 'undefined') {\r\n      for (let i = 0; i < this._SYNONYM_MAP.length; i++) {\r\n        for (let j = 0; j < this._SYNONYM_MAP[i].length; j++) {\r\n          if (this._SYNONYM_MAP[i][j] === button) {\r\n            return this._SYNONYM_MAP[i]\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /** Clear all pending keyboard input. */\r\n  flush () {\r\n    // Always returns false because flusihing is not possible.\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Collects a single key press.\r\n   * @param {Number} timeOut - Duration in ms for time out.\r\n   * @param {Array} keyList - List of acceptable response keys.\r\n   */\r\n  get_key (timeOut, keyList) {\r\n    // Collects a single key press.\r\n    this._keyList = (typeof keyList === 'undefined') ? this._keyList : keyList\r\n    this._timeOut = (typeof timeOut === 'undefined') ? this._timeOut : timeOut\r\n\r\n    if (this._experiment !== null) {\r\n      // Set the event processor.\r\n      this._experiment._runner._events._run(this._timeOut, constants.RESPONSE_KEYBOARD, this._keyList)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve the moderator keys (LIST, CTRL, ALT) pressed during a response.\r\n   * @return {Array} - List of pressed moderator keys.\r\n   */\r\n  get_mods () {\r\n    var moderators = []\r\n    if (this._experiment._runner._events.keyDownEvent !== null) {\r\n      if (this._experiment._runner._events.keyDownEvent.event.shiftKey === true) {\r\n        moderators.push('shift')\r\n      }\r\n      if (this._experiment._runner._events.keyDownEvent.event.ctrlKey === true) {\r\n        moderators.push('ctrl')\r\n      }\r\n      if (this._experiment._runner._events.keyDownEvent.event.altKey === true) {\r\n        moderators.push('alt')\r\n      }\r\n    }\r\n    return moderators\r\n  }\r\n\r\n  /**\r\n   * Shows or hides a virtual keyboard.\r\n   * @param {Boolean} visible - If true the virtual keyboard is shown.\r\n   */\r\n  show_virtual_keyboard (visible) {\r\n    // Shows or hides a virtual keyboard.\r\n    if (visible === true) {\r\n      // Hack to show the virutal keyboard. ## Must be tested!\r\n      this._experiment._runner._renderer.view.focus()\r\n    } else {\r\n      // Hack to hide the virtual keyboard. ## Must be tested!\r\n      var tmp = document.createElement('input')\r\n      document.body.appendChild(tmp)\r\n      tmp.focus()\r\n      document.body.removeChild(tmp)\r\n    }\r\n  }\r\n}\r\n","import Item from './item.js'\r\nimport Keyboard from '../backends/keyboard.js'\r\nimport { constants } from '../system/constants.js'\r\n\r\n/**\r\n * Class representing a Sequence item.\r\n * @extends Item\r\n */\r\nexport default class Sequence extends Item {\r\n  /** The sequence class controls the running of a series of items. */\r\n  constructor (experiment, name, script) {\r\n    // Inherited.\r\n    super(experiment, name, script)\r\n\r\n    // Create and set private properties.\r\n    this._index = -1\r\n    this._items = null\r\n    this._keyboard = null\r\n\r\n    // Create and set public properties.\r\n    this.description = 'Runs a number of items in sequence'\r\n    this.flush_keyboard = 'yes'\r\n    this.items = null\r\n\r\n    // Process the script.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    // sequence is finalized.\r\n    this._status = constants.STATUS_FINALIZE\r\n\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /** Implements the prepare complete phase of an item. */\r\n  _prepare_complete () {\r\n    // Generate the items list for the run cycle.\r\n    if (this._index < this.items.length) {\r\n      if ((this.items[this._index].item in this._runner._itemStore._items) === false) {\r\n        this._runner._debugger.addError('Could not find a child item which is called by sequence item: ' + this.name + ' (' + this.items[this._index].item.name + ')')\r\n      } else {\r\n        // Increase the current index.\r\n        this._index++\r\n\r\n        // Add the item to the internal list.\r\n        this._items.push({\r\n          item: this.items[this._index - 1].item,\r\n          cond: this.syntax.compile_cond(this.items[this._index - 1].cond)\r\n        })\r\n\r\n        // Prepare the item.\r\n        this._runner._itemStore.prepare(this.items[this._index - 1].item, this)\r\n      }\r\n    } else {\r\n      // Prepare process is done, start execution.\r\n      this._index = 0\r\n\r\n      // Remove the prepare phase form the stack.\r\n      this._runner._itemStack.pop()\r\n\r\n      // Check if this sequence is part of a parent sequence and must jump back in the prepare phase.\r\n      if (this._parent.type === 'sequence') {\r\n        this._parent._prepare_complete()\r\n      } else {\r\n        // Execute the next cycle of the sequence itself.\r\n        this._runner._itemStore.run(this.name, this._parent)\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Reset all item variables to their default value. */\r\n  reset () {\r\n    this.items = []\r\n    this.vars.flush_keyboard = 'yes'\r\n  }\r\n\r\n  /**\r\n     * Parse a definition string and retrieve all properties of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  from_string (script) {\r\n    // Parses a definition string.\r\n    this.variables = {}\r\n    this.comments = []\r\n    this.reset()\r\n\r\n    // Split the string into an array of lines.\r\n    if (script !== null) {\r\n      var lines = script.split('\\n')\r\n      for (var i = 0; i < lines.length; i++) {\r\n        if ((lines[i] !== '') && (this.parse_variable(lines[i]) === false)) {\r\n          var tokens = this.syntax.split(lines[i])\r\n          if ((tokens.length > 0) && (tokens[0] === 'run')) {\r\n            var item = tokens[1]\r\n            var cond = 'always'\r\n            if (tokens.length > 2) {\r\n              cond = this.syntax.strip_slashes(\r\n                this.syntax.remove_quotes(tokens[2])\r\n              )\r\n            }\r\n            // Push the item and condition definition to the items list.\r\n            this.items.push({\r\n              item: item,\r\n              cond: cond\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    // Inherited.\r\n    super.prepare()\r\n\r\n    // Create a keyboard to flush responses at the start of the run phase\r\n    if (this.vars.flush_keyboard === 'yes') {\r\n      this._keyboard = new Keyboard(this.experiment)\r\n    } else {\r\n      this._keyboard = null\r\n    }\r\n\r\n    // Generate the items list for the run cycle.\r\n    this._index = 0\r\n    this._items = []\r\n\r\n    // Prepare the items.\r\n    this._prepare_complete()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Check if all items have been processed.\r\n    if (this._index < this._items.length) {\r\n      // Flush the keyboard at the beginning of the sequence.\r\n      if ((this._index === 0) && (this.vars.flush_keyboard === 'yes')) {\r\n        this._keyboard.flush()\r\n      }\r\n\r\n      // Increase the current index.\r\n      this._index++\r\n      const currentItem = this._items[this._index - 1]\r\n\r\n      // Set the workspace.\r\n      this._runner._pythonWorkspace.self = this\r\n\r\n      // Check if the item may run.\r\n      if (this._runner._pythonWorkspace._eval(currentItem.cond) === true) {\r\n        // run the current item of the sequence object.\r\n        this._runner._itemStore.run(currentItem.item, this)\r\n      } else {\r\n        // Execute the next cycle of the sequence itself.\r\n        this.run()\r\n      }\r\n    } else {\r\n      // sequence is finalized.\r\n      this._complete()\r\n    }\r\n  }\r\n}\r\n","import sortBy from 'lodash/sortBy'\nimport isFunction from 'lodash/isFunction'\n\nimport Item from './item.js'\nimport { constants } from '../system/constants.js'\n\n/**\n * Class representing coroutines\n * @extends Item\n */\nexport default class Coroutines extends Item {\n  constructor (experiment, name, script) {\n    // Inherited create.\n    super(experiment, name, script)\n    // Definition of public properties.\n    this.description = 'Repeatedly runs another item'\n    // The tasks to perform\n    this.tasks = []\n    // The tasks to perform this iteration\n    this.schedule = []\n    // Process the script.\n    this.from_string(script)\n  }\n\n  from_string (script) {\n    if (script === null) return\n    for (const s of script.split('\\n')) {\n      const [cmd, arglist, kwdict] = this.experiment.syntax.parse_cmd(s)\n      if (cmd === 'set') {\n        const [variable, value] = arglist\n        this.vars[variable] = value\n      }\n      if (cmd === 'run' && arglist.length) {\n        const task = {\n          item_name: arglist.shift(),\n          start_time: kwdict.start || 0,\n          end_time: kwdict.end || 0,\n          run_if: kwdict.runif || 'always'\n        }\n        this.tasks.push(task)\n      }\n    }\n  }\n\n  prepare () {\n    this._runner._debugger.addMessage(`Preparing coroutines item '${this.name}'`)\n    this.schedule = this.tasks.reduce((result, taskParams) => {\n      const item_name = this._runner._syntax.eval_text(taskParams.item_name, this.vars)\n      const item = this._runner._itemStore._items[item_name]\n      if (!item) {\n        const msg = `Coroutines '${this.name}' - could not find item: ${item_name}`\n        this._runner._debugger.addError(msg)\n        throw new Error(msg)\n      }\n      this._runner._pythonWorkspace.self = this\n      const cond = this._runner._syntax.compile_cond(taskParams.run_if)\n      if (this._runner._pythonWorkspace._eval(cond) === true) {\n        const start_time = this._runner._syntax.eval_text(taskParams.start_time, this.vars)\n        const end_time = this._runner._syntax.eval_text(taskParams.end_time, this.vars)\n        result.push(new Task(item, item_name, start_time, end_time,\n          taskParams.item_name === this.vars.get('end_after_item')))\n      }\n      return result\n    }, [])\n    super.prepare()\n  }\n\n  run () {\n    this._runner._debugger.addMessage(`Running coroutines item '${this.name}'`)\n    super.run()\n    // Prepare all tasks\n    for (const task of this.schedule) {\n      this._runner._itemStore.prepare(task.item_name, this)\n    }\n    this.schedule = sortBy(this.schedule, 'start_time')\n    // Launch all tasks and wrap them in the coroutine helper\n    for (const task of this.schedule) {\n      this._runner._debugger.addMessage(`Launching task '${task.item_name}'`)\n      task.launch()\n    }\n\n    this.active = []\n    this.dt = 0\n    this.t0 = performance.now()\n    this.running = true\n\n    this._loop()\n  }\n\n  _loop () {\n    while (this.schedule.length > 0 && this.schedule[0].started(this.dt)) {\n      this.active.push(this.schedule.shift())\n    }\n    this.active = sortBy(this.active, 'end_time')\n    const _active = []\n    for (const task of this.active) {\n      const status = task.step()\n      if (status === task.RUNNING) {\n        _active.push(task)\n        continue\n      }\n      if (status === task.ABORTED) {\n        this.running = false\n      }\n    }\n    this.active = _active\n    while (this.active.length > 0 && this.active[0].stopped(this.dt)) {\n      this.active.shift()\n    }\n\n    this.dt = performance.now() - this.t0\n    if (this.running && this.dt < this.vars.get('duration') &&\n      ![constants.TIMER_BREAK, constants.TIMER_EXIT, constants.TIMER_ERROR]\n        .includes(this._runner._events._state)) {\n      setTimeout(this._loop.bind(this), 0) // The well-known trick to deal with JS async nature...\n    } else {\n      // Kill all remaining tasks\n      for (const task of this.active) {\n        this._runner._debugger.addMessage(`Killing task '${task.item_name}'`)\n        task.kill()\n      }\n      this._complete()\n    }\n  }\n}\n\nclass Task {\n  UNINITIALISED = 0\n  RUNNING = 1\n  FINISHED = 2\n  ABORTED = -1\n\n  constructor (item, item_name, start_time, end_time, abort_on_end) {\n    this.item = item\n    this.item_name = item_name\n    this.start_time = start_time\n    this.end_time = end_time\n    this.abort_on_end = abort_on_end\n    this.state = this.UNINITIALISED\n    this._coroutine = null\n    this.step = () => { throw new Error('Task has not been initialized') }\n  }\n\n  launch () {\n    if (!isFunction(this.item.coroutine)) {\n      throw new Error(`Item ${this.item_name} does not have correct coroutine implementation`)\n    }\n    this._coroutine = this.item.coroutine()\n    this._coroutine.next()\n    this.step = () => {\n      // console.log(`Stepping ${this.item_name}`)\n      const { value, done } = this._coroutine.next(true)\n      if (value === false) {\n        this.state = this.ABORTED\n        return this.ABORTED\n      }\n      if (done === true) {\n        let newState\n        if (this.abort_on_end) {\n          newState = this.ABORTED\n        } else {\n          newState = this.FINISHED\n        }\n        this.state = newState\n        return this.state\n      }\n      return this.state // Should be this.RUNNING\n    }\n    this.state = this.RUNNING\n  }\n\n  started (dt) {\n    return dt >= this.start_time\n  }\n\n  stopped (dt) {\n    if (dt < this.end_time) {\n      return false\n    }\n    return this.kill()\n  }\n\n  kill () {\n    const response = this._coroutine.next(false)\n    if (response.done === true) {\n      this.state = this.FINISHED\n      return true\n    } else {\n      return false\n    }\n  }\n}\n","import {\r\n  constants\r\n} from '../system/constants.js'\r\n\r\n/** Class representing a mouse device. */\r\nexport default class Mouse {\r\n  /**\r\n   * Create an object which represents a mouse device.\r\n   * @param {Object} experiment - The experiment to which the logger belongs.\r\n   * @param {Number} timeOut - Duration in ms for time out.\r\n   * @param {Array} buttonList - List of acceptable response buttons.\r\n   * @param {Boolean} visible - Toggle for showing the mouse cursor.\r\n   */\r\n  constructor (experiment, timeOut, buttonList, visible) {\r\n    // Create and set public properties.\r\n    this._experiment = experiment\r\n    this._timeOut = (typeof timeOut === 'undefined') ? null : timeOut\r\n    this._buttonList = (typeof buttonList === 'undefined') ? null : buttonList\r\n    this._visible = (typeof visible === 'undefined') ? false : visible\r\n\r\n    // Set constant properties.\r\n    this._SYNONYM_MAP = [\r\n      ['1', 'left_button', 'left'],\r\n      ['2', 'middle_button', 'middle'],\r\n      ['3', 'right_button', 'right'],\r\n      ['4', 'scroll_up'],\r\n      ['5', 'scroll_down']\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * Convert all response values to their default values (remove synonyms).\r\n   * @param {Array} responses - A list of response values.\r\n   * @return {Array} - List of default values for the given responses.\r\n   */\r\n  _get_default_from_synonym (responses) {\r\n    // Return the default synonym value from a response.\r\n    var defaults = []\r\n    for (var i = 0; i < responses.length; i++) {\r\n      var synonym = this._synonyms(responses[i])\r\n      defaults.push(synonym[0])\r\n    }\r\n    return defaults\r\n  }\r\n\r\n  /**\r\n   * Set the configuration for the mouse backend.\r\n   * @param {Number} timeOut - Duration in ms for time out.\r\n   * @param {Array} buttonList - List of acceptable response buttons.\r\n   * @param {Boolean} visible - Toggle for showing the mouse cursor.\r\n   */\r\n  _set_config (timeOut, buttonList, visible) {\r\n    // Set mouse properties.\r\n    this._timeOut = timeOut\r\n    this._buttonList = buttonList\r\n    this._visible = visible\r\n  }\r\n\r\n  /**\r\n   * Convert a response value to its default value (remove synonym).\r\n   * @param {String} button - A response.\r\n   * @return {String|Null} - Default value of the response or null if none.\r\n   */\r\n  _synonyms (button) {\r\n    if (typeof button !== 'undefined') {\r\n      for (var i = 0; i < this._SYNONYM_MAP.length; i++) {\r\n        for (var j = 0; j < this._SYNONYM_MAP[i].length; j++) {\r\n          if (this._SYNONYM_MAP[i][j] === button) {\r\n            return this._SYNONYM_MAP[i]\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /** Clear all pending mouse input. */\r\n  flush () {\r\n    // Always returns false because flusihing is not possible.\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Collects a single mouse click.\r\n   * @param {Number} timeOut - Duration in ms for time out.\r\n   * @param {Array} buttonList - List of acceptable response buttons.\r\n   * @param {Boolean} visible - Toggle for showing the mouse cursor.\r\n   */\r\n  get_click (timeOut, buttonList, visible) {\r\n    // Collects a single mouse click.\r\n    this._timeOut = (typeof timeOut === 'undefined') ? this._timeOut : timeOut\r\n    this._buttonList = (typeof buttonList === 'undefined') ? this._buttonList : buttonList\r\n    this._visible = (typeof visible === 'undefined') ? this._visible : visible\r\n\r\n    if (this._experiment !== null) {\r\n      // Hide or show the mouse.\r\n      this.show_cursor(this._visible)\r\n\r\n      // Set the event processor.\r\n      this._experiment._runner._events._run(this._timeOut, constants.RESPONSE_MOUSE, this._buttonList)\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Returns the current mouse position. !Warning: this methods uses the state in\r\n   *  the last known mouse move, not the current state.\r\n   *  @param {Object} - Object with time, x and y coordinate of the mouse cursor.\r\n   */\r\n  get_pos () {\r\n    // Returns the current mouse position. !Warning: this methods uses the state in the last known mouse respone, not the current state.\r\n    if (this._experiment._runner._events._mouseMoveEvent !== null) {\r\n      return {\r\n        rtTime: this._experiment._runner._events._mouseMoveEvent.rtTime,\r\n        x: this._experiment._runner._events._mouseMoveEvent.event.clientX,\r\n        y: this._experiment._runner._events._mouseMoveEvent.event.clientY\r\n      }\r\n    } else {\r\n      return {\r\n        rtTime: -1,\r\n        x: -1,\r\n        y: -1\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Returns the current mouse position. !Warning: this methods uses the state in\r\n   *  the last known mouse press, not the current state.\r\n   *  @param {Object} - Object with the state of the mouse buttons.\r\n   */\r\n  get_pressed () {\r\n    // Returns the current button state of the mouse buttons. !Warning: this methods uses the state in the last known mouse respone, not the current state.\r\n    if (this._experiment._runner.events._mouse_press !== null) {\r\n      return {\r\n        buttons: [(this._experiment._runner._events._mouseDownEvent.event.button === 0),\r\n          (this._experiment._runner._events._mouseDownEvent.event.button === 1),\r\n          (this._experiment._runner._events._mouseDownEvent.event.button === 2)\r\n        ]\r\n      }\r\n    } else {\r\n      return {\r\n        buttons: [null, null, null]\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Sets the current position of the cursor. */\r\n  set_pos (pos) {}\r\n\r\n  /**\r\n   * Shows or hides the mouse cursor.\r\n   * @param {Boolean} show - If true the mouse cursor is shown.\r\n   */\r\n  show_cursor (show) {\r\n    // Set the property\r\n    this._visible = show\r\n\r\n    // Immediately changes the visibility of the mouse cursor.\r\n    if (show === true) {\r\n      // Show the mouse cursor.\r\n      this._experiment._runner._renderer.view.style.cursor = 'default'\r\n    } else {\r\n      // Set the cursor visibility to none.\r\n      this._experiment._runner._renderer.view.style.cursor = 'none'\r\n    }\r\n  }\r\n}\r\n","import Item from './item.js'\r\nimport Keyboard from '../backends/keyboard.js'\r\nimport Mouse from '../backends/mouse.js'\r\nimport {\r\n  constants\r\n} from '../system/constants.js'\r\n\r\n/**\r\n * Class representing a GeneralResponse item.\r\n * @extends Item\r\n */\r\nexport default class GenericResponse extends Item {\r\n  /** The sequence class controls the running of a serie of items. */\r\n  constructor (experiment, name, script) {\r\n    // Inherited.\r\n    super(experiment, name, script)\r\n\r\n    // Create and set private properties.\r\n    this._allowed_responses = null\r\n    this._duration = 0\r\n    this._duration_func = null\r\n    this._keyboard = null\r\n    this._mouse = null\r\n    this._responsetype = constants.RESPONSE_NONE\r\n    this._timeout = -1\r\n\r\n    // Create and set public properties.\r\n    this.process_feedback = false\r\n    this.synonyms = null\r\n  }\r\n\r\n  /** Implements the complete phase of the general response item. */\r\n  _complete () {\r\n    // Check if a timeout has occured which must be treaded as a response.\r\n    let timeout = this.vars.get('timeout')\r\n    if ((typeof timeout !== 'undefined') &&\r\n      ((this.experiment._runner._events._timeStamp - this.experiment.vars.get('time_' + this.name)) > timeout)) {\r\n      // Process the timeout none response.\r\n      this.process_response_timeout()\r\n    }\r\n\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /**\r\n     * Implements the update response phase of the general response item.\r\n     * @param {Object} response - The response object which is evaluated.\r\n     */\r\n  _update (response) {\r\n    if (response !== null) {\r\n      // Implements the update response phase of the item.\r\n      if ((this._responsetype === constants.RESPONSE_KEYBOARD) &&\r\n        (response.type === constants.RESPONSE_KEYBOARD)) {\r\n        this.process_response_keypress(response)\r\n      } else if ((this._responsetype === constants.RESPONSE_MOUSE) &&\r\n        (response.type === constants.RESPONSE_MOUSE)) {\r\n        this.process_response_mouseclick(response)\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Prepare the list with allowed responses */\r\n  prepare_allowed_responses () {\r\n    // Prepare the allowed responses.\r\n    if (this.vars.get('allowed_responses') === null) {\r\n      this._allowed_responses = null\r\n    } else {\r\n      // Create a list of allowed responses that are separated by semicolons.\r\n      // Also trim any whitespace.\r\n      const allowed_responses = String(this.vars.get('allowed_responses')).split(';')\r\n        .map(item => (typeof item === 'string')\r\n          ? item.replace(/^\"(.*)\"$/g, '$1').trim()\r\n          : item).filter(Boolean)\r\n      if (this.vars.duration === 'keypress') {\r\n        // this._allowed_responses = allowed_responses;\r\n        this._allowed_responses = this._keyboard._get_default_from_synonym(allowed_responses)\r\n      } else if (this.vars.duration === 'mouseclick') {\r\n        // For mouse responses, we don't check if the allowed responses make sense.\r\n        this._allowed_responses = this._mouse._get_default_from_synonym(allowed_responses)\r\n      }\r\n\r\n      // If allowed responses are provided, the list should not be empty.\r\n      if (this._allowed_responses.length === 0) {\r\n        this.experiment._runner._debugger.addError(\r\n          'Defined responses are not valid in keyboard_response: ' +\r\n          this.name + ' (' + this.vars.get('allowed_responses') + ')')\r\n      }\r\n    }\r\n  }\r\n\r\n  // Prepare the duration of the stimulus interaction. */\r\n  prepare_duration () {\r\n    // Get duration.\r\n    this._duration = this.syntax.remove_quotes(this.vars.get('duration'))\r\n\r\n    // Prepare the duration.\r\n    if (this._duration !== null) {\r\n      if ((this._duration === 'keypress') || (this._duration === 'mouseclick') ||\r\n                (this._duration === 'sound') || (this._duration === 'video')) {\r\n        this._duration = -1\r\n        if (this.vars.duration === 'keypress') {\r\n          this.prepare_duration_keypress()\r\n          this._responsetype = constants.RESPONSE_KEYBOARD\r\n        } else if (this.vars.duration === 'mouseclick') {\r\n          this.prepare_duration_mouseclick()\r\n          this._responsetype = constants.RESPONSE_MOUSE\r\n        } else if (this.vars.duration === 'sound') {\r\n          this._responsetype = constants.RESPONSE_SOUND\r\n        } else if (this.vars.duration === 'video') {\r\n          this._responsetype = constants.RESPONSE_VIDEO\r\n        }\r\n      } else {\r\n        // Prepare a duration in milliseconds\r\n        this._duration = Number(this._duration)\r\n        if (this._duration === 0) {\r\n          this._responsetype = constants.RESPONSE_NONE\r\n        } else {\r\n          this._responsetype = constants.RESPONSE_DURATION\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Prepare the system for a keyboard duration interval. */\r\n  prepare_duration_keypress () {\r\n    // Prepare a keyboard duration.\r\n    this._keyboard = new Keyboard(this.experiment)\r\n    this._final_duration = (this._timeout !== -1) ? this._timeout : this._duration\r\n  }\r\n\r\n  /** Prepare the system for a mouseclick duration interval. */\r\n  prepare_duration_mouseclick () {\r\n    // Prepare a mouseclick duration.\r\n    this._mouse = new Mouse(this.experiment)\r\n    this._final_duration = (this._timeout !== -1) ? this._timeout : this._duration\r\n  }\r\n\r\n  /** Prepare the system for a timeout. */\r\n  prepare_timeout () {\r\n    let timeout = this.vars.get('timeout')\r\n    if (timeout === null) return\r\n    this._timeout = (typeof timeout === 'number') ? timeout : -1\r\n  }\r\n  \r\n  /** Sets duration and allowed responses on the response object. **/\r\n  configure_response_objects() {\r\n    if (this.vars.duration === 'keypress') {\r\n      this._keyboard._set_config(this._final_duration, this._allowed_responses)\r\n    } else if (this.vars.duration === 'mouseclick') {\r\n      this._mouse._set_config(this._final_duration, this._allowed_responses, false)\r\n    }\r\n  }\r\n\r\n  /** Select the type of stimulus response processing. */\r\n  process_response () {\r\n    // Start stimulus response cycle.\r\n    switch (this._responsetype) {\r\n    case constants.RESPONSE_NONE:\r\n      // Duration is 0, so complete the stimulus/response cycle.\r\n      this._status = constants.STATUS_FINALIZE\r\n      this._complete()\r\n      break\r\n    case constants.RESPONSE_DURATION:\r\n      this.sleep_for_duration()\r\n      break\r\n    case constants.RESPONSE_KEYBOARD:\r\n      this._keyboard.get_key()\r\n      break\r\n    case constants.RESPONSE_MOUSE:\r\n      this._mouse.get_click()\r\n      break\r\n    case constants.RESPONSE_SOUND:\r\n      this._sampler.wait()\r\n      break\r\n    case constants.RESPONSE_VIDEO:\r\n      this._video_player.wait()\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Sets the mouse coordinates based **/\r\n  set_mouse_coordinates (clientX, clientY) {\r\n    // We need the top-left and scaling of the viewport to set the mouse\r\n    // coordinates so that 0,0 corresponds to the display center. The scaling\r\n    // needs to be taken into account also such that the viewport always has\r\n    // the same size in cursor coordinates, even if it's scaled down.\r\n    const rect = this._runner._renderer.view.getBoundingClientRect()\r\n    const scale = Math.min(\r\n      (rect.right - rect.left) / this.experiment.vars.width,\r\n      (rect.bottom - rect.top) / this.experiment.vars.height\r\n    )\r\n    const center_x = scale * this.experiment.vars.width / 2\r\n    const center_y = scale * this.experiment.vars.height / 2\r\n    this.experiment.vars.cursor_x = (clientX - center_x - rect.left) / scale\r\n    this.experiment.vars.cursor_y = (clientY - center_y - rect.top) / scale\r\n  }\r\n\r\n  /** Process a keyboard response. */\r\n  process_response_keypress (retval) {\r\n    this.experiment._start_response_interval = this.sri\r\n    this.experiment._end_response_interval = retval.rtTime\r\n    this.experiment.vars.response = this.syntax.sanitize(retval.resp)\r\n    this.synonyms = this._keyboard._synonyms(this.experiment.vars.response)\r\n    this.response_bookkeeping()\r\n  }\r\n\r\n  /** Process a mouse click response. */\r\n  process_response_mouseclick (retval) {\r\n    this.experiment._start_response_interval = this.sri\r\n    this.experiment._end_response_interval = retval.rtTime\r\n    this.experiment.vars.response = retval.resp\r\n    this.synonyms = this._mouse._synonyms(this.experiment.vars.response)\r\n    this.set_mouse_coordinates(retval.event.clientX, retval.event.clientY)\r\n    this.response_bookkeeping()\r\n  }\r\n\r\n  /** Process a time out response. */\r\n  process_response_timeout () {\r\n    this.experiment._start_response_interval = this.sri\r\n    this.experiment._end_response_interval = this.experiment._runner._events._timeStamp\r\n    this.experiment.vars.response = 'None'\r\n    this.synonyms = ['None', 'none']\r\n    this.response_bookkeeping()\r\n  }\r\n\r\n  /** General response logging after a stimulus/response. */\r\n  response_bookkeeping () {\r\n    // The respone and response_time variables are always set, for every response item\r\n    this.experiment.vars.set('response_time', this.experiment._end_response_interval - this.experiment._start_response_interval)\r\n    this.experiment.vars.set('response_' + this.name, this.experiment.vars.get('response'))\r\n    this.experiment.vars.set('response_time_' + this.name, this.experiment.vars.get('response_time'))\r\n    this.experiment._start_response_interval = null\r\n    // But correctness information is only set for dedicated response items,\r\n    // such as keyboard_response items, because otherwise we might confound the feedback\r\n    if (this.process_feedback === true) {\r\n      this.experiment.vars.correct = ''\r\n      if (this.vars.get('correct_response') !== null) {\r\n        // If a correct_response has been defined, we use it to determine accuracy etc.\r\n        if (this.synonyms !== null) {\r\n          if (this.synonyms.includes(this.syntax.remove_quotes(this.vars.get('correct_response').toString()))) {\r\n            this.experiment.vars.correct = 1\r\n            this.experiment.vars.total_correct = this.experiment.vars.total_correct + 1\r\n          } else {\r\n            this.experiment.vars.correct = 0\r\n          }\r\n        }\r\n      }\r\n      // Do some response bookkeeping\r\n      this.experiment.vars.total_response_time = this.experiment.vars.total_response_time + this.experiment.vars.response_time\r\n      this.experiment.vars.total_responses = this.experiment.vars.total_responses + 1\r\n      this.experiment.vars.accuracy = Math.round(100.0 * this.experiment.vars.total_correct / this.experiment.vars.total_responses)\r\n      this.experiment.vars.acc = this.experiment.vars.accuracy\r\n      this.experiment.vars.average_response_time = Math.round(this.experiment.vars.total_response_time / this.experiment.vars.total_responses)\r\n      this.experiment.vars.avg_rt = this.experiment.vars.average_response_time\r\n      this.experiment.vars.set('correct_' + this.name, this.experiment.vars.correct)\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Sets or resets the start of the stimulus response interval.\r\n     * @param {Boolean} reset - If true reset the sri value.\r\n     */\r\n  set_sri (reset) {\r\n    // Sets the start of the response interval.\r\n    if (reset === true) {\r\n      this.sri = self.vars.get('time_' + this.name)\r\n      this.experiment._start_response_interval = this.vars.get('time_' + this.name)\r\n    }\r\n    if (!this.experiment._start_response_interval) {\r\n      this.sri = this.experiment.vars.get('time_' + this.name)\r\n    } else {\r\n      this.sri = this.experiment._start_response_interval\r\n    }\r\n  }\r\n\r\n  /** Sleep for a specified time. */\r\n  sleep_for_duration () {\r\n    // Sleep for a specified time.\r\n    this.sleep(this._duration)\r\n  }\r\n\r\n  /** Implements the prepare phase of the general response item. */\r\n  prepare () {\r\n    // Implements the prepare phase of the item.\r\n    this.prepare_timeout()\r\n    this.prepare_duration()\r\n    this.prepare_allowed_responses()\r\n    this.configure_response_objects()\r\n    // Inherited.\r\n    super.prepare()\r\n  }\r\n}\r\n","import GenericResponse from './generic_response.js'\r\nimport Canvas from '../backends/canvas.js'\r\n\r\n/**\r\n * Class representing a Sketchpad item.\r\n * @extends GeneralResponse\r\n */\r\nexport default class Sketchpad extends GenericResponse {\r\n  constructor (experiment, name, script) {\r\n    super(experiment, name, script)\r\n\r\n    // Create and set public properties.\r\n    this.canvas = new Canvas(experiment, false)\r\n    this.elements = []\r\n\r\n    // Process the script.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /**\r\n     * Sort function used for determining the draw index (z-index) of alle elemente.\r\n     * @param {Object} a - The first object to compare.\r\n     * @param {Object} b - The second object to compare.\r\n     * @return {Number} - The result of the comparison.\r\n     */\r\n  _compare (a, b) {\r\n    // Sort function used for determining the draw index (z-index) of alle elemente.\r\n    if (a.z_index() < b.z_index()) { return 1 } else if (a.z_index() > b.z_index()) { return -1 } else { return 0 }\r\n  }\r\n\r\n  /** Implements the complete phase of the Sketchpad item. */\r\n  _complete () {\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /** Resets all item variables to their default value. */\r\n  reset () {\r\n    // Resets all item variables to their default value.\r\n    this.elements = []\r\n    this.vars.duration = 'keypress'\r\n  }\r\n\r\n  /** Process a time out response. */\r\n  process_response_timeout () {\r\n    // Nothing happens\r\n  }\r\n\r\n  /**\r\n     * Parse a definition string and retrieve all properties of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  from_string (script) {\r\n    // Define and reset variables to their defaults.\r\n    this.variables = {}\r\n    this.comments = []\r\n    this.reset()\r\n\r\n    // Split the string into an array of lines.\r\n    if (script !== null) {\r\n      const lines = script.split('\\n')\r\n      for (let i = 0; i < lines.length; i++) {\r\n        if ((lines[i] !== '') && (this.parse_variable(lines[i]) === false)) {\r\n          const tokens = this.syntax.split(lines[i])\r\n          if ((tokens.length > 0) && (tokens[0] === 'draw')) {\r\n            if (this.experiment.items._isClass(tokens[1]) === true) {\r\n              var element = this.experiment.items._newElementClass(tokens[1], this, lines[i])\r\n              this.elements.push(element)\r\n            } else {\r\n              this.experiment._runner._debugger.addError('Failed to parse definition: ' + tokens[1])\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Sort the elements usin the z-index.\r\n      this.elements.sort(this._compare)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the background color of the canvas if it is defined in the var store\r\n   *\r\n   * @memberof Sketchpad\r\n   */\r\n  _set_bg_color () {\r\n    const backgroundColor = this.vars.get('background')\r\n    if (backgroundColor) {\r\n      this.canvas._styles.background_color = backgroundColor\r\n    }\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    // Clear the canvas.\r\n    this.canvas.clear()\r\n\r\n    // Draw the elements.\r\n    for (let i = 0; i < this.elements.length; i++) {\r\n      if (this.elements[i].is_shown() === true) {\r\n        this.elements[i].draw()\r\n      }\r\n    }\r\n\r\n    // Inherited.\r\n    super.prepare()\r\n  }\r\n\r\n  /** Implements the run phase of the Sketschpad. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    this._set_bg_color()\r\n    // Set the onset and start the stimulus response process.\r\n    this.set_item_onset(this.canvas.show())\r\n    this.set_sri(false)\r\n    this.process_response()\r\n  }\r\n\r\n  * coroutine () {\r\n    yield\r\n    this._set_bg_color()\r\n    this.set_item_onset(this.canvas.show())\r\n  }\r\n}\r\n","import Sketchpad from './sketchpad.js'\r\n\r\n/**\r\n * Class representing a feedback item.\r\n * @extends Sketchpad\r\n */\r\nexport default class Feedback extends Sketchpad {\r\n  /**\r\n   * Create a feedback which show feedback info to the subhect.\r\n   * @param {Object} experiment - The experiment item to which the item belongs.\r\n   * @param {String} name - The unique name of the item.\r\n   * @param {String} script - The script containing the properties of the item.\r\n   */\r\n  constructor (experiment, name, script) {\r\n    // Inherited create.\r\n    super(experiment, name, script)\r\n\r\n    // Definition of public properties.\r\n    this.description = 'Provides feedback to the participant'\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    // Inherited.\r\n    super._complete()\r\n\r\n    // Reset feedback variables.\r\n    if (this.vars.reset_variables === 'yes') {\r\n      this.experiment.reset_feedback()\r\n    }\r\n  }\r\n\r\n  /** Resets all item variables to their default value. */\r\n  reset () {\r\n    // Inherited.\r\n    super.reset()\r\n\r\n    // Reset the variables.\r\n    this.vars.reset_variables = 'yes'\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    this._parent._prepare_complete()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    // Inherited.\r\n    super.prepare()\r\n    super.run()\r\n  }\r\n}\r\n","import Item from './item.js'\r\n\r\n/**\r\n * Class representing an inline item.\r\n * @extends Item\r\n */\r\nexport default class InlineScript extends Item {\r\n  /**\r\n     * Create an inline item which executes inline python code.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited create.\r\n    super(experiment, name, script)\r\n\r\n    // Define and set the public properties.\r\n    this.description = 'Executes Python code'\r\n\r\n    // Define and set the public properties.\r\n    this._prepare_run = false\r\n    this._prepare_tree = null\r\n    this._run_tree = null\r\n\r\n    // Process the script.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    // Check if the parser is in pause mode and must be restarted.\r\n    if (this.experiment._runner._pythonParser._status === 1) {\r\n      // Process the current active node.\r\n      this.experiment._runner._pythonParser._process_nodes()\r\n    } else {\r\n      if (this._prepare_run === true) {\r\n        // Inherited prepare.\r\n        super.prepare()\r\n      } else {\r\n        // Inherited.\r\n        super._complete()\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Implements the complete script phase of an item. */\r\n  _complete_script () {\r\n    // Added for video script functionaliry.\r\n    this._complete()\r\n  }\r\n\r\n  /** Reset all item variables to their default value. */\r\n  reset () {\r\n    this.vars._prepare = ''\r\n    this.vars._run = ''\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    // Compile the script code to ast trees.\r\n    this._prepare_tree = this.experiment._runner._pythonParser._parse(this.vars._prepare)\r\n    this._run_tree = this.experiment._runner._pythonParser._parse(this.vars._run)\r\n\r\n    // Execute the run code.\r\n    if (this._prepare_tree !== null) {\r\n      // Set the current item.\r\n      this.experiment._runner._events._currentItem = this\r\n\r\n      // Set the prepare run toggle.\r\n      this._prepare_run = true\r\n\r\n      // Record the onset of the current item.\r\n      this.set_item_onset()\r\n\r\n      // Start the parser\r\n      this.experiment._runner._pythonParser._run(this, this._prepare_tree)\r\n    } else {\r\n      // Inherited.\r\n      super.prepare()\r\n    }\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Set the prepare run toggle.\r\n    this._prepare_run = false\r\n\r\n    // Record the onset of the current item.\r\n    this.set_item_onset()\r\n\r\n    // Execute the run code.\r\n    if (this._run_tree !== null) {\r\n      // Start the parser\r\n      this.experiment._runner._pythonParser._run(this, this._run_tree)\r\n    } else {\r\n      // To prevent prepeare script from running twice.\r\n      this.experiment._runner._pythonParser._status = 0\r\n\r\n      // No script, so jump to compelte.\r\n      this._complete()\r\n    }\r\n  }\r\n}\r\n","import Item from './item.js'\r\n\r\n/**\r\n * Class representing an inline item.\r\n * @extends Item\r\n */\r\nexport default class InlineJavaScript extends Item {\r\n  /**\r\n     * Create an inline item which executes inline python code.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited create.\r\n    super(experiment, name, script)\r\n    // Define and set the public properties.\r\n    this.description = 'Executes JavaScript code (ECMA 5.1)'\r\n    this.workspace = experiment._javascriptWorkspace\r\n    // Process the script\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Reset all item variables to their default value. */\r\n  reset () {\r\n    this.vars._prepare = ''\r\n    this.vars._run = ''\r\n  }\r\n\r\n  /**\r\n     * Parse a definition string and retrieve all properties of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  from_string (script) {\r\n    // Parses a definition string.\r\n    this.reset()\r\n    // Split the string into an array of lines.\r\n    if (script !== null) {\r\n      var read_run_lines = false\r\n      var read_prepare_lines = false\r\n      var lines = script.split('\\n')\r\n      for (var i = 0; i < lines.length; i++) {\r\n        var tokens = this.syntax.split(lines[i])\r\n        if ((tokens !== null) && (tokens.length > 0)) {\r\n          switch (tokens[0]) {\r\n          case 'set':\r\n            this.parse_variable(lines[i])\r\n            break\r\n          case '__end__':\r\n            read_run_lines = false\r\n            read_prepare_lines = false\r\n            break\r\n          case '___prepare__':\r\n            read_prepare_lines = true\r\n            break\r\n          case '___run__':\r\n            read_run_lines = true\r\n            break\r\n          default:\r\n            if (read_run_lines === true) {\r\n              this.vars._run = this.vars._run + lines[i] + '\\n'\r\n            } else if (read_prepare_lines === true) {\r\n              this.vars._prepare = this.vars._prepare + lines[i] + '\\n'\r\n            }\r\n          }\r\n        } else {\r\n          if (read_run_lines === true) {\r\n            this.vars._run = this.vars._run + lines[i] + '\\n'\r\n          } else if (read_prepare_lines === true) {\r\n            this.vars._prepare = this.vars._prepare + lines[i] + '\\n'\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    this.workspace._eval(this.vars._prepare)\r\n    super.prepare()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    super.run()\r\n    this.set_item_onset()\r\n    this.workspace._eval(this.vars._run)\r\n    this._complete()\r\n  }\r\n}\r\n","import GenericResponse from './generic_response.js'\r\nimport Keyboard from '../backends/keyboard.js'\r\n\r\n/**\r\n * Class representing a keyboard response item.\r\n * @extends GenericResponse\r\n */\r\nexport default class KeyboardResponse extends GenericResponse {\r\n  /**\r\n     * Create a keyboard response item which waits for a keyboard response.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    super(experiment, name, script)\r\n    this.description = 'Collects keyboard responses'\r\n    this._flush = 'yes'\r\n    this._keyboard = new Keyboard(this.experiment)\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Resets all item variables to their default value. */\r\n  reset () {\r\n    this.process_feedback = true\r\n    this.vars.allowed_responses = null\r\n    this.vars.correct_response = null\r\n    this.vars.duration = 'keypress'\r\n    this.vars.flush = 'yes'\r\n    this.vars.timeout = 'infinite'\r\n  }\r\n\r\n  /** Implements the prepare phase of the KeyboardResponse. */\r\n  prepare () {\r\n    // Set the internal flush property.\r\n    this._flush = (this.vars.flush) ? this.vars.flush : 'yes'\r\n\r\n    // Inherited.\r\n    super.prepare()\r\n  }\r\n\r\n  /** Implements the run phase of the KeyboardResponse. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Record the onset of the current item.\r\n    this.set_item_onset()\r\n\r\n    // Flush responses, to make sure that earlier responses are not carried over.\r\n    if (this._flush === 'yes') {\r\n      this._keyboard.flush()\r\n    }\r\n\r\n    this.set_sri()\r\n    this.process_response()\r\n  }\r\n\r\n  * coroutine () {\r\n    const keyDownHandler = (event) => {\r\n      const keypress = this.experiment._runner._events._processKeyboardEvent(event, 1)\r\n      let allowed_responses = 'all'\r\n      if (this.vars.get('allowed_responses')) {\r\n        allowed_responses = this._keyboard._get_default_from_synonym(\r\n          this.vars.get('allowed_responses').split(';').map(key => key.trim())\r\n        )\r\n      }\r\n\r\n      if (allowed_responses === 'all' || allowed_responses.includes(keypress.resp)) {\r\n        this.response = keypress\r\n      }\r\n    }\r\n\r\n    window.addEventListener('keydown', keyDownHandler)\r\n    yield\r\n    // Record the onset of the current item.\r\n    this.set_item_onset()\r\n\r\n    this.set_sri()\r\n    let proceed = true\r\n    this.response = null\r\n    while (!this.response && proceed) {\r\n      proceed = yield true\r\n    }\r\n    window.removeEventListener('keydown', keyDownHandler)\r\n    if (this.response) this.process_response_keypress(this.response)\r\n  }\r\n}\r\n","import GenericResponse from './generic_response.js'\r\nimport Mouse from '../backends/mouse.js'\r\n\r\n/**\r\n * Class representing a mouse response item.\r\n * @extends GenericResponse\r\n */\r\nexport default class MouseResponse extends GenericResponse {\r\n  /**\r\n     * Create an mouse response item which waits for a mouse response.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    super(experiment, name, script)\r\n    this.description = 'Collects mouse responses'\r\n    this.resp_codes = {}\r\n    this._flush = 'yes'\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Implements the complete phase of the Sketschpad. */\r\n  _complete () {\r\n    // Hide the mouse cursor.\r\n    this._mouse.show_cursor(false)\r\n\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /** Resets all item variables to their default value. */\r\n  reset () {\r\n    this.process_feedback = true\r\n    this.resp_codes = {}\r\n    this.resp_codes['0'] = 'timeout'\r\n    this.resp_codes['1'] = 'left_button'\r\n    this.resp_codes['2'] = 'middle_button'\r\n    this.resp_codes['3'] = 'right_button'\r\n    this.resp_codes['4'] = 'scroll_up'\r\n    this.resp_codes['5'] = 'scroll_down'\r\n    this.vars.allowed_responses = null\r\n    this.vars.correct_response = null\r\n    this.vars.duration = 'mouseclick'\r\n    this.vars.flush = 'yes'\r\n    this.vars.show_cursor = 'yes'\r\n    this.vars.timeout = 'infinite'\r\n  }\r\n\r\n  /** Implements the prepare phase of the Sketschpad. */\r\n  prepare () {\r\n    // Set the internal flush property.\r\n    this._flush = (this.vars.flush) ? this.vars.flush : 'yes'\r\n\r\n    // Inherited.\r\n    super.prepare()\r\n  }\r\n\r\n  /** Implements the run phase of the Sketschpad. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Record the onset of the current item.\r\n    this.set_item_onset()\r\n\r\n    // Show the cursor if defined.\r\n    if (this.vars.show_cursor === 'yes') {\r\n      this._mouse.show_cursor(true)\r\n    }\r\n\r\n    // Flush responses, to make sure that earlier responses are not carried over.\r\n    if (this._flush === 'yes') {\r\n      this._mouse.flush()\r\n    }\r\n\r\n    this.set_sri()\r\n    this.process_response()\r\n  }\r\n\r\n  * coroutine () {\r\n    const mouseDownHandler = (event) => {\r\n      this.response = this.experiment._runner._events._processMouseEvent(event, 1)\r\n    }\r\n\r\n    const touchHandler = (event) => {\r\n      event.button = 0\r\n      event.clientX = event.changedTouches[0].clientX\r\n      event.clientY = event.changedTouches[0].clientY\r\n      this.response = this.experiment._runner._events._processMouseEvent(event, 1)\r\n    }\r\n\r\n    window.addEventListener('mousedown', mouseDownHandler)\r\n    window.addEventListener('touchstart', touchHandler)\r\n\r\n    yield\r\n    // Show the cursor if defined.\r\n    if (this.vars.show_cursor === 'yes') {\r\n      this._mouse.show_cursor(true)\r\n    }\r\n\r\n    // Record the onset of the current item.\r\n    this.set_item_onset()\r\n\r\n    this.set_sri()\r\n    let proceed = true\r\n    this.response = null\r\n    while (!this.response && proceed) {\r\n      proceed = yield true\r\n    }\r\n    window.removeEventListener('mousedown', mouseDownHandler)\r\n    window.removeEventListener('touchstart', touchHandler)\r\n    if (this.response) this.process_response_mouseclick(this.response)\r\n  }\r\n}\r\n","import Item from './item.js'\r\nimport { constants } from '../system/constants.js'\r\n\r\n/**\r\n * Class representing a logger item.\r\n * @extends Item\r\n */\r\nexport default class Logger extends Item {\r\n  /**\r\n     * Create an experiment item which controls the OpenSesame experiment.\r\n     * @param {Object} pExperiment - The experiment item to which the item belongs.\r\n     * @param {String} pName - The unique name of the item.\r\n     * @param {String} pScript - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    super(experiment, name, script)\r\n    this.description = 'Logs experimental data'\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /** Reset all item variables to their default value. */\r\n  reset () {\r\n    this.logvars = []\r\n    this.vars.auto_log = 'yes'\r\n  }\r\n\r\n  /**\r\n     * Parse a definition string and retrieve all properties of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  from_string (script) {\r\n    this.reset()\r\n    if (script !== null) {\r\n      var lines = script.split('\\n')\r\n      for (var i = 0; i < lines.length; i++) {\r\n        if ((lines[i] !== '') && (this.parse_variable(lines[i]) === false)) {\r\n          var tokens = this.syntax.split(lines[i])\r\n          if ((tokens[0] === 'log') && (tokens.length > 0)) {\r\n            this.logvars.push(tokens[1])\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.logvars.sort()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    super.run()\r\n    if (this._status !== constants.STATUS_FINALIZE) {\r\n      this._status = constants.STATUS_FINALIZE\r\n      this.set_item_onset()\r\n      this.experiment._log.write_vars(\r\n        (this.vars.get('auto_log') === 'yes')\r\n          ? this.logvars.concat(this.experiment.vars.inspect()).sort()\r\n          : this.logvars\r\n      )\r\n      this._complete()\r\n    }\r\n  }\r\n}\r\n","import {\r\n  constants\r\n} from '../system/constants.js'\r\n\r\nlet audioCtx = null\r\ntry {\r\n  audioCtx = new (window.AudioContext || window.webkitAudioContext)()\r\n} catch (e) {\r\n  console.warn('Web Audio API is not supported in this browser')\r\n}\r\n\r\n/** Class representing a sampler. */\r\nexport default class SamplerBackend {\r\n  /**\r\n   * Create a sampler object which controls the sampler device.\r\n   * @param {Object} experiment - The experiment to which the sampler belongs.\r\n   * @param {String} source - The sound source name.\r\n   * @param {Number} volume - The volume to use when playing the sound.\r\n   * @param {Number} pitch - The pitch to use when playing the sound.\r\n   * @param {Number} pan - The pan to use when playing the sound.\r\n   * @param {String} duration - The duration of the sound.\r\n   * @param {Number} fade - The fade to use when playing the sound.\r\n   * @param {Boolean} block - If true use the sound ad a block wave.\r\n   */\r\n  constructor (experiment, source, volume, pitch, pan, duration, fade, block) {\r\n    // Create and set public properties.\r\n    this.block = (typeof block === 'undefined') ? false : block\r\n    this.duration = (typeof duration === 'undefined') ? 'sound' : duration\r\n    this.experiment = experiment\r\n    this.volume = (typeof volume === 'undefined') ? 1 : volume\r\n    this.fade = (typeof fade === 'undefined') ? 0 : fade\r\n    this.pan = (typeof pan === 'undefined') ? 0 : pan\r\n    this.pitch = (typeof pitch === 'undefined') ? 1 : pitch\r\n    try {\r\n      this.sample = source.data.cloneNode()\r\n    } catch (e) {\r\n      console.error('Could not play sound:', source)\r\n      throw e\r\n    }\r\n    this.sample.onended = () => this.experiment._runner._events._audioEnded(this)\r\n\r\n    if (audioCtx) {\r\n      this.source = audioCtx.createMediaElementSource(this.sample)\r\n    } else {\r\n      this.source = this.sample\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Play a sound file.\r\n   * @param {Number} volume - The volume to use when playing the sound.\r\n   * @param {Number} pitch - The pitch to use when playing the sound.\r\n   * @param {Number} pan - The pan to use when playing the sound.\r\n   * @param {String} duration - The duration of the sound.\r\n   * @param {Number} fade - The fade to use when playing the sound.\r\n   * @param {Boolean} block - If true use the sound ad a block wave.\r\n   */\r\n  play (volume, pitch, pan, duration, fade, block) {\r\n    // Check if optional parameters are defined.\r\n    this.block = block || this.block\r\n    this.duration = typeof duration === 'undefined' ? this.duration : duration\r\n    this.volume = typeof volume === 'undefined' ? this.volume : volume\r\n    this.pitch = typeof pitch === 'undefined' ? this.pitch : pitch\r\n    this.pan = typeof pan === 'undefined' ? this.pan : pan\r\n    this.fade = typeof fade === 'undefined' ? this.fade : fade\r\n\r\n    if (audioCtx) {\r\n      if (audioCtx.state === 'suspended') audioCtx.resume()\r\n      this.source.connect(this.applyFilters())\r\n    } else {\r\n      this.source.volume = this.volume\r\n    }\r\n\r\n    this.sample.play()\r\n  }\r\n\r\n  /** Set the blocking of the sound (wait period). */\r\n  wait () {\r\n    // Set the blocking of the sound.\r\n    this.experiment._runner._events._run(this, -1, constants.RESPONSE_SOUND, [])\r\n  }\r\n\r\n  applyFilters () {\r\n    const nodes = [audioCtx.destination]\r\n\r\n    try {\r\n      const gainNode = audioCtx.createGain()\r\n      gainNode.gain.setValueAtTime(this.volume, audioCtx.currentTime)\r\n\r\n      if (this.fade) {\r\n        gainNode.gain.setValueAtTime(0, audioCtx.currentTime)\r\n        gainNode.gain.linearRampToValueAtTime(this.volume, audioCtx.currentTime + this.fade / 1000)\r\n      }\r\n\r\n      nodes.unshift(gainNode)\r\n    } catch (e) {\r\n      console.warn('Unable to apply volume or gain', e)\r\n    }\r\n\r\n    if (this.pan) {\r\n      try {\r\n        nodes.unshift(new StereoPannerNode(audioCtx, { pan: this.pan }))\r\n      } catch (e) {\r\n        console.warn('Unable to apply panning', e)\r\n      }\r\n    }\r\n\r\n    // Connect the filters creating a chain\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      if (nodes[i] !== audioCtx.destination) {\r\n        nodes[i].connect(nodes[i + 1])\r\n      }\r\n    }\r\n\r\n    return nodes.shift(0)\r\n  }\r\n  \r\n  onEnded () {\r\n  /**\r\n   * Clears the source tag of the sample to free up the WebMediaPlayer. See\r\n   * also: https://github.com/open-cogsci/osweb/issues/69\r\n   **/ \r\n    this.sample.src = \"\"\r\n  }\r\n}\r\n","import GenericResponse from './generic_response.js'\r\nimport SamplerBackend from '../backends/sampler.js'\r\n\r\n/**\r\n * Class representing a sampler item.\r\n * @extends GenericResponse\r\n */\r\nexport default class Sampler extends GenericResponse {\r\n  /**\r\n     * Create a sampler  item which plays a sound.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited create.\r\n    super(experiment, name, script)\r\n\r\n    // Definition of public properties.\r\n    this.block = false\r\n    this.description = 'Plays a sound file in .wav or .ogg format'\r\n\r\n    // Definition of private properties.\r\n    this._sample = null\r\n    this._sampler = null\r\n\r\n    // Process the script.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Reset all item variables to their default value. */\r\n  reset () {\r\n    this.block = false\r\n    this.vars.sample = ''\r\n    this.vars.pan = 0\r\n    this.vars.pitch = 1\r\n    this.vars.fade_in = 0\r\n    this.vars.stop_after = 0\r\n    this.vars.volume = 1\r\n    this.vars.duration = 'sound'\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    // Create the sample\r\n    if (this.vars.sample !== '') {\r\n      // Retrieve the content from the file pool.\r\n      this._sample = this._runner._pool[this.syntax.eval_text(this.vars.sample, this.vars, false)]\r\n      this._sampler = new SamplerBackend(this.experiment, this._sample)\r\n      this._sampler.volume = this.vars.get(\"volume\")\r\n      this._sampler.duration = this.vars.get(\"duration\")\r\n      this._sampler.fade = this.vars.get(\"fade\")\r\n      this._sampler.pan = this.vars.get(\"pan\")\r\n      this._sampler.pitch = this.vars.get(\"pitch\")\r\n    } else {\r\n      // Show error message.\r\n      this._runner._debugger.addError('No sample has been specified in sampler: ' + this.vars.sample)\r\n    }\r\n\r\n    // Inherited.\r\n    super.prepare()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    this.set_item_onset()\r\n    this.set_sri()\r\n    this._sampler.play()\r\n    this.process_response()\r\n  }\r\n}\r\n","import Sampler from './sampler.js'\r\n\r\n/**\r\n * Class representing a synth item.\r\n * @extends Sampler\r\n */\r\nexport default class Synth extends Sampler {\r\n  /**\r\n     * Create a synth item which create a synthessised sound wave.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} Ssript - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited create.\r\n    super(experiment, name, script)\r\n\r\n    // Define and set the public properties.\r\n    this.description = 'A basic sound synthesizer'\r\n  }\r\n}\r\n","import Item from '../items/item.js'\r\nimport {\r\n  isNumber\r\n} from 'lodash'\r\n\r\n/**\r\n * Class representing a advanced delay item.\r\n * @extends Item\r\n */\r\nexport default class AdvancedDelay extends Item {\r\n  /**\r\n   * Create an advanced delay plugin item which delays for e specific duration the experiment.\r\n   * @param {Object} experiment - The experiment item to which the item belongs.\r\n   * @param {String} name - The unique name of the item.\r\n   * @param {String} script - The script containing the properties of the item.\r\n   */\r\n  constructor (experiment, name, script) {\r\n    super(experiment, name, script)\r\n    this.description = 'Waits for a specified duration'\r\n    this._duration = -1\r\n    this.from_string(script)\r\n  }\r\n\r\n  /**\r\n   * Gaussian distribution function.\r\n   * @param {Number} mean - The mean value.\r\n   * @param {Number} std - The standard deviation value.\r\n   * @return {Number} - result value\r\n   */\r\n  _random_gauss (mean, std) {\r\n    let u = 0\r\n    let v = 0\r\n    while (u === 0) u = Math.random()\r\n    while (v === 0) v = Math.random()\r\n    return Math.max(0, mean + Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v) * std)\r\n  }\r\n\r\n  /**\r\n   * Uniform distribution function.\r\n   * @param {Number} mean - The mean value.\r\n   * @param {Number} stdev - The standard deviation value.\r\n   * @return {Number} - result value\r\n   */\r\n  _random_uniform (mean, jitter) {\r\n    return Math.max(0, Math.floor(mean + Math.random() * jitter - jitter / 2))\r\n  }\r\n\r\n  /** Resets all item variables to their default value. */\r\n  reset () {\r\n    this.vars.duration = 1000\r\n    this.vars.jitter = 0\r\n    this.vars.jitter_mode = 'Uniform'\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    const duration = this.vars.get('duration')\r\n    const jitter = this.vars.get('jitter')\r\n    const jitter_mode = this.vars.get('jitter_mode')\r\n    if ((!isNumber(duration)) || (duration < 0)) {\r\n      this._runner._debugger.addError('Duration should be a positive numeric value in advanced_delay ' + this.name)\r\n    }\r\n    if (jitter_mode === 'Uniform') {\r\n      this._duration = this._random_uniform(duration, jitter)\r\n    } else if (jitter_mode === 'Std. Dev.') {\r\n      this._duration = this._random_gauss(duration, jitter)\r\n    } else {\r\n      this._runner._debugger.addError('Unknown jitter mode in advanced_delay ' + this.name)\r\n    }\r\n    if (this._duration < 0) {\r\n      this._duration = 0\r\n    }\r\n    this._duration = Number(this._duration)\r\n    this.experiment.vars.set('delay_' + this.name, this._duration)\r\n    this._runner._debugger.addMessage('delay for ' + this._duration + ' ms.')\r\n    super.prepare()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    super.run()\r\n    this.set_item_onset(this.time())\r\n    if (this._duration > 0) {\r\n      this.sleep(this._duration)\r\n    } else {\r\n      this._complete()\r\n    }\r\n  }\r\n}\r\n","import Item from '../items/item.js'\n\n/**\n * Base class for implementing HTML forms. These forms briefly hide the OSWeb\n * canvas and replace it by an HTML div. When the form is finished, OSWeb is\n * re-activated.\n * @extends Item\n */\nexport default class FormHTML extends Item {\n\n  constructor (experiment, name, script) {\n    super(experiment, name, script)\n    this._widgets = []  // avoid crashes when parsing widgets command\n    this.from_string(script)\n  }\n  \n  /**\n   * Generates an array of HTML elements that are appended to the form. Should\n   * be overridden in the actual form classes.\n   * @return {!Array<Object>} - an array of HTML elements\n   **/\n  formElements() {\n      return []\n  }\n  \n  /**\n   * Gives HTML code to be used for the form. Should be overridden in the\n   * actual form classes.\n   * @return {string}\n   **/\n  formHTML() {\n    return null\n  }\n  \n  /**\n   * Hides the form container and re-enables OSWeb. Also re-enablees the event\n   * listeners.\n   **/\n  resumeOSWeb () {\n      this._formContainer.remove()\n      this._osweb.style.display = 'flex'\n      window.addEventListener('keydown', runner._events._keyDownHandler)\n      window.addEventListener('keyup', runner._events._keyUpHandler)\n      this._complete()\n  }\n  \n  /**\n   * Emulates the 'gray' which is applied to buttons.\n   **/\n  applyTheme (element, setBackground=false) {\n    if (this.vars.get('_theme') !== 'gray')\n      return\n    if (setBackground)\n      element.style.backgroundColor = '#888a85'\n    element.style.borderTop = 'solid 1px #babdb6'\n    element.style.borderLeft = 'solid 1px #555753'\n    element.style.borderRight = 'solid 1px #555753'\n    element.style.borderBottom = 'solid 1px #555753'\n  }\n  \n  /**\n   * Returns an HTML element. If inherit is specified\n   * @param {string} type - an HTML element type, such as 'div'\n   * @param {string} html - the inner HTML content\n   * @param {number} height - proportion of full height\n   * @param {number} width - proportion of full height\n   * @param {boolean} inherit - Indicates whether font style should be\n   *     inherited from the container element.\n   * @return {Object} - an HTML element\n   **/\n  element (type, html, height, width=1, inherit=true) {\n    const element = document.createElement(type)\n    if (typeof html !== \"undefined\") element.innerHTML = html\n    if (typeof height !== \"undefined\") element.style.height = this._paddedHeight * height - 40 + 'px'\n    if (typeof width !== \"undefined\")element.style.width = this._paddedWidth * width - 40 + 'px'\n    element.style.padding = '10px'\n    element.style.margin = '10px'\n    if (inherit) {\n      element.style.fontFamily = 'inherit'\n      element.style.fontSize = 'inherit'\n      element.style.fontWeight = 'inherit'\n      element.style.textDecoration = 'inherit'\n      element.style.color = 'inherit'\n      element.style.backgroundColor = 'inherit'\n    }\n    return element\n  }\n  \n  /**\n   * Builds a container div with a checkbox/ radio button and a label next to\n   * it. See element() for explanation of parameters.\n   * @param {string} boxtype - radio/ checkbox\n   * @param {string} label - a text label\n   * @param {number} height\n   * @param {number} width\n   * @param {boolean} inherit\n   * @return {!Array<Object>}\n   **/\n  checkbox (boxType, label, height, width=1, inherit=true) {\n    const box = this.element('input', null, null, null)\n    box.type = boxType\n    box.value = label\n    const labelElement = this.element('label', label, null, null)\n    const container = this.element('div', null, height, width, inherit)\n    container.style.textAlign = 'left'\n    container.append(box)\n    container.append(labelElement)\n    return [container, box]\n  }\n  \n  /**\n   * Maps the font family onto names that browsers understand.\n   * @returns {string}\n   **/\n  get _fontFamily () {\n    const fontFamily = this.vars.get('font_family')\n    if (fontFamily === 'sans')\n      return 'sans-serif'\n    if (fontFamily === 'mono')\n      return 'monospace'\n    return fontFamily\n  }\n  \n  /**\n   * Gets the padding for all four sides based on the margins variable.\n   * @returns {!Array<number>}\n   **/\n  get _padding () {\n    if (typeof this._cached_padding === \"undefined\")\n      this._cached_padding = String(this.vars.get('margins')).split(';').map(Number)\n    return this._cached_padding\n  }\n  \n  /**\n   * Gets the width that takes into account the padding\n   * @returns {number}\n   **/\n  get _paddedWidth () {\n    if (typeof this._width === \"undefined\") {\n      const [top, right, bottom, left] = this._padding\n      this._width = this.vars.get('width') - right - left\n    }\n    return this._width\n  }\n  \n  /**\n   * Gets the height that takes into account the padding\n   * @returns {number}\n   **/\n  get _paddedHeight () {\n    if (typeof this._height === \"undefined\") {\n      const [top, right, bottom, left] = this._padding\n      this._height = this.vars.get('height') - top - bottom\n    }\n    return this._height\n  }\n  \n  run () {\n    // The main container that contains the form elements\n    this._customForm = document.createElement('div')\n    this._customForm.style.color = this.vars.get('foreground')\n    this._customForm.style.backgroundColor = this.vars.get('background')\n    this._customForm.style.fontSize = this.vars.get('font_size') + 'px'\n    this._customForm.style.fontFamily = this._fontFamily\n    if (this.vars.get('font_bold')=== 'yes')\n      this._customForm.style.fontWeight = 'bold'\n    if (this.vars.get('font_italic')=== 'yes')\n      this._customForm.style.fontStyle = 'italic'\n    if (this.vars.get('font_underline') === 'yes')\n      this._customForm.style.textDecoration = 'underline'\n    // Convert margins from '50;50;50;50' to '50px 50px 50px 50px'\n    this._customForm.style.padding = this._padding.join('px ') + 'px'\n    this._customForm.style.width = this._paddedWidth + 'px'\n    this._customForm.style.height = this._paddedHeight + 'px'\n    this._customForm.style.textAlign = 'center'\n    for (const element of this.formElements())\n      this._customForm.append(element)\n    const html = this.formHTML()\n    if (html !== null)\n      this._customForm.innerHTML = html\n    // A container that centers the form\n    this._formContainer = document.createElement('div')\n    this._formContainer.style.justifyContent = 'center'\n    this._formContainer.style.alignItems = 'center'\n    this._formContainer.style.display = 'flex'\n    this._formContainer.style.height = '100%'\n    this._formContainer.append(this._customForm)\n    this._osweb = document.getElementsByClassName('justify-content-center')[0]\n    document.body.append(this._formContainer)\n    this._osweb.style.display = 'none';\n    window.removeEventListener('keydown', runner._events._keyDownHandler)\n    window.removeEventListener('keyup', runner._events._keyUpHandler)\n  }\n}\n","import FormHTML from './form_html.js'\n\n/**\n * Class representing a form consent item.\n * @extends FormHTML\n */\nexport default class FormConsent extends FormHTML {\n\n  onDecline () {\n    alertify.error(this.vars.get('decline_message'))\n  }\n  \n  onAccept () {\n    if (this._checkbox.checked) {\n      this.resumeOSWeb()\n      return\n    }\n    this.onDecline()\n  }\n\n  formElements () {\n    const title = this.element('h1', this.vars.get('form_title'), 1 / 7)\n    const text = this.element('p', this.vars.get('form_text'), 4 / 7)\n    text.style.textAlign = 'left'\n    const [checkboxContainer, checkbox] = this.checkbox(\n      'checkbox', this.vars.get('checkbox_text'), 1 / 7)\n    this._checkbox = checkbox\n    const buttonContainer = this.element('div', null, 1 / 7)\n    const acceptButton = this.element('input', null, null, 1 / 3)\n    acceptButton.value = this.vars.get('accept_text')\n    acceptButton.type = 'button'\n    acceptButton.onclick = this.onAccept.bind(this)\n    const declineButton = this.element('input', null, null, 1 / 3)\n    declineButton.value = this.vars.get('decline_text')\n    declineButton.type = 'button'\n    declineButton.onclick = this.onDecline.bind(this)\n    buttonContainer.append(acceptButton)\n    buttonContainer.append(declineButton)\n    this.applyTheme(acceptButton, true)\n    this.applyTheme(declineButton, true)\n    return [title, text, checkboxContainer, buttonContainer]\n  }\n}\n","import FormHTML from './form_html.js'\n\n/**\n * Class representing custom HTML code\n * @extends FormHTML\n */\nexport default class InlineHTML extends FormHTML {\n\n  reset() {\n    super.reset()\n    this.vars.html = ''\n  }\n\n  /**\n   * @return {string} - the HTML content\n   **/\n  formHTML() {\n    return this.vars.html\n  }\n  \n  /**\n   * Sets experimental variables based on the name properties of input elements\n   * and then resumes OSWeb.\n   **/\n  _submitForm() {\n    for (const input of document.getElementsByTagName('input'))\n      this.experiment.vars.set(input.name, input.value)\n    this.resumeOSWeb()\n  }\n  \n  run () {\n    super.run()\n    // Disable the submit action of form elements, in case the user has added\n    // (unnecessary) form tags\n    for (const form of document.getElementsByTagName('form'))\n      form.onsubmit = (() => false)\n    // Bind input elements of type submit to the custom submit action\n    for (const input of document.getElementsByTagName('input')) {\n      if (input.type === 'submit')\n        input.onclick = this._submitForm.bind(this)\n    }\n  }\n\n}\n","import FormHTML from './form_html.js'\n\n/**\n * Class representing a form-mulitple-choice item.\n * @extends FormHTML\n */\nexport default class FormMultipleChoice extends FormHTML {\n\n  resumeOSWeb () {\n    const values = []\n    for (const box of this._boxes) {\n        if (box.checked)\n            values.push(box.value)\n    }\n    this.experiment.vars.set(\n        this.vars.form_var,\n        (values.length > 0) ? values.join(';') : 'no'\n    )\n    super.resumeOSWeb()\n  }\n  \n  _boxClicked () {\n    if (!this._hasOkButton)\n      this.resumeOSWeb()\n  }\n\n  formElements () {\n    this._hasOkButton = (this.vars.get('advance_immediately') === 'no' || boxType === 'checkbox')\n    const elements = []\n    this._boxes = []\n    // Create an array of non-empty options\n    const options = String(this.vars.get('options')).split('\\n').filter(\n        option => option .trim().length > 0)\n    const boxType = (this.vars.get('allow_multiple') === 'no') ? 'radio' : 'checkbox'\n    const elementHeight = 1 / (options.length + (this._hasOkButton ? 3 : 2))\n    const title = this.element('h1', this.vars.get('form_title'), elementHeight, 1)\n    elements.push(title)\n    const question = this.element('p', this.vars.get('question'), elementHeight, 1)\n    elements.push(question)\n    for (const option of options) {\n      const [container, box] = this.checkbox(boxType, option, elementHeight)\n      box.name = 'options'\n      box.onclick = this._boxClicked.bind(this)\n      this._boxes.push(box)\n      elements.push(container)\n    }\n    if (this._hasOkButton) {\n      const okButton = this.element('input', null, elementHeight, 1 / 3)\n      okButton.style.width = '100%'\n      this.applyTheme(okButton, true)\n      okButton.type = 'button'\n      okButton.value = this.vars.get('button_text')\n      okButton.onclick = this.resumeOSWeb.bind(this)\n      elements.push(okButton)\n    }\n    return elements\n  }\n}\n","import FormHTML from './form_html.js'\n\n/**\n * Class representing a form text display item.\n * @extends FormHTML\n */\nexport default class FormTextDisplay extends FormHTML {\n\n  formElements () {\n    const title = this.element('h1', this.vars.get('form_title'), 1 / 6)\n    const text = this.element('p', this.vars.get('form_text'), 4 / 6)\n    text.style.textAlign = 'left'\n    const okButton = this.element('input', null, 1 / 6, 1 / 3)\n    okButton.type = 'button'\n    okButton.value = this.vars.get('ok_text')\n    okButton.onclick = this.resumeOSWeb.bind(this)\n    this.applyTheme(okButton, true)\n    return [title, text, okButton]\n  }\n}\n","import FormHTML from './form_html.js'\n\n/**\n * Class representing a form text input item.\n * @extends FormHTML\n */\nexport default class FormTextInput extends FormHTML {\n\n  /**\n   * Is called when a key is pressed in the textarea, and accepts the form\n   * input when return is pressed by setting the response variable to the\n   * value of the textarea.\n   **/\n  checkReturnPress (event) {\n    if (event.keyCode !== 13)\n      return\n    this.experiment.vars.set(this.vars.form_var, this._textArea.value)\n    this.resumeOSWeb()\n  }\n\n  formElements () {\n    const title = this.element('h1', this.vars.get('form_title'), 1 / 8)\n    const question = this.element('p', this.vars.get('form_question'), 1 / 8)\n    question.style.textAlign = 'left'\n    this._textArea = this.element('textarea', null, 6 / 8)\n    this.applyTheme(this._textArea, false)\n    return [title, question, this._textArea]\n  }\n  \n  _activateTextArea () {\n    this._textArea.focus()\n    this._textArea.onkeypress = this.checkReturnPress.bind(this)\n  }\n  \n  run () {\n    super.run()\n    // The textarea is activate after a very short timeout. This avoid previous\n    // keypress from being entered as text immediately.\n    setTimeout(this._activateTextArea.bind(this), 10)\n  }\n}\n","import { Texture, Sprite } from 'pixi.js'\nimport {\n  constants\n} from '../system/constants.js'\n\n/** Class representing a video. */\nexport default class Video {\n  /**\n   * Create a video object which controls the video device.\n   * @param {Object} experiment - The experiment to which the video belongs.\n   * @param {String} src - The video source name.\n   */\n  constructor (experiment, source) {\n    // Set class parameter properties.\n    this._experiment = experiment\n\n    // Set the class public properties.\n    this.audio = true\n    this.duration = 'keypress'\n    this.full_screen = false\n\n    // Set the class pivate properties.\n    this._playing = false\n    this._script = null\n\n    // Create the video instance\n    if (source !== null) {\n      // Set the video object.\n      this._video = source.data\n\n      // create a video texture from the video.\n      this._texture = Texture.from(source.data)\n\n      // create a new Sprite using the video texture (yes it's that easy)\n      this._videoSprite = new Sprite(this._texture)\n      this._video.pause()\n\n      // Set the event anchors.\n      this._video.onended = this._experiment._runner._events._videoEnded.bind(this)\n      this._video.onplay = this._experiment._runner._events._videoPlay.bind(this)\n    }\n  }\n\n  /** Update the video rendering. */\n  _update () {\n    if (this._playing === true) {\n      // Update the renderer.\n      this._experiment._runner._renderer.render(this._videoSprite)\n\n      // execute script.\n      if ((this._script !== null) && (this._event_handler_always === true)) {\n        // Start the parser\n        this._experiment._runner._pythonParser._run(null, this._script)\n      }\n    }\n  }\n\n  /** Play the actual video. */\n  play () {\n    // Enable the video playing.\n    this._video.play()\n\n    // Set the volume\n    this._video.volume = (this.audio === true) ? 1 : 0\n\n    // Check if the video must be scaled.\n    if (this.full_screen === true) {\n      this._videoSprite.width = this._experiment._runner._renderer.width\n      this._videoSprite.height = this._experiment._runner._renderer.height\n    }\n\n    // Render the first frame.\n    this._experiment._runner._renderer.render(this._videoSprite)\n\n    // Set the play toggle.\n    this._playing = true\n  }\n\n  /** Stop playing the video. */\n  stop () {\n    // Pause the actual sound.\n    this._video.pause()\n    this._playing = false\n  }\n\n  /** Set the blocking of the sound. */\n  wait () {\n    this._experiment._runner._events._run(-1, constants.RESPONSE_VIDEO, [])\n  }\n}\n","import Item from '../items/item.js'\nimport Video from '../backends/video.js'\n\n/**\n * Class representing a video player item.\n * @extends Item\n */\nexport default class MediaPlayer extends Item {\n  /**\n     * Create a video player plugin item which plays videos.\n     * @param {Object} experiment - The experiment item to which the item belongs.\n     * @param {String} name - The unique name of the item.\n     * @param {String} script - The script containing the properties of the item.\n     */\n  constructor (experiment, name, script) {\n    // Inherited.\n    super(experiment, name, script)\n\n    // Define and set the public properties.\n    this.description = 'A video player'\n\n    // Define and set the private properties.\n    this._script_executed = false\n\n    // Process the script.\n    this.from_string(script)\n  }\n\n  /** Implements the complete phase of an item. */\n  _complete () {\n    if (this._script_executed === false) {\n      // Stop the video playing.\n      this._video_player.stop()\n\n      // execute script.\n      if ((this._video_player._script !== null) && (this.vars.get('event_handler_trigger') === 'on keypress')) {\n        // Set the execute toggle.\n        this._script_executed = true\n\n        // Execute the script code.\n        this._runner._pythonParser._run(this, this._video_player._script)\n      } else {\n        // Inherited.\n        super._complete()\n      }\n    } else {\n      // Inherited.\n      super._complete()\n    }\n  }\n\n  /** Implements the update phase of an item. */\n  _update (response) {\n    // Update the video canvas.\n    this._video_player._update()\n  }\n\n  /** Implements the prepare phase of an item. */\n  prepare () {\n    // Opens the video file for playback.\n    this._video = this.experiment.pool[this.vars.get('video_src')]\n    this._video_player = new Video(this.experiment, this._video)\n\n    // Set the inline code options.\n    if (this.vars.event_handler !== '') {\n      this._video_player._script = this._runner._pythonParser._parse(this.vars.event_handler)\n    }\n    this._video_player._event_handler_always = (this.vars.event_handler_trigger === 'after every frame')\n\n    // Set the audio option.\n    this._video_player.audio = (this.vars.get('playaudio') === 'yes')\n\n    // Set the full screen option (if enabled).\n    this._video_player.full_screen = (this.vars.get('resizeVideo') === 'yes')\n\n    // Adjust the duration parameter from sound to video if defined.\n    if (this.vars.duration === 'sound') {\n      this.vars.duration = 'video'\n    }\n    this._video_player.duration = this.vars.duration\n\n    // Inherited.\n    super.prepare()\n  }\n\n  /** Implements the run phase of an item. */\n  run () {\n    // Set the onset time.\n    this.set_item_onset()\n    this.set_sri()\n\n    // Start the video player.\n    this._video_player.play()\n\n    // Start response processing.\n    this.process_response()\n  }\n}\n","import Item from '../items/item.js'\r\nimport { constants } from '../system/constants.js'\r\n\r\n/**\r\n * Class representing a notepad item.\r\n * @extends Item\r\n */\r\nexport default class Notepad extends Item {\r\n  /**\r\n     * Create a notepad plugin item which only shows some text in the console.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited.\r\n    super(experiment, name, script)\r\n\r\n    // Define and set the public properties.\r\n    this.description = 'A simple notepad to document your experiment. This plug-in does nothing.'\r\n\r\n    // Read the item definition string.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    // sequence is finalized.\r\n    this._status = constants.STATUS_FINALIZE\r\n\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Complete the current cycle.\r\n    this._complete()\r\n  }\r\n}\r\n","import Item from '../items/item.js'\r\nimport { constants } from '../system/constants.js'\r\n\r\n/**\r\n * Class representing a repeat cycle item.\r\n * @extends Item\r\n */\r\nexport default class RepeatCycle extends Item {\r\n  /**\r\n     * Create a repeat cycle item which repeat a cycle within a loop.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited.\r\n    super(experiment, name, script)\r\n\r\n    // Define and set the public properties.\r\n    this.description = 'Optionally repeat a cycle from a loop'\r\n\r\n    // Process the script.\r\n    this.from_string(script)\r\n  }\r\n\r\n  _complete () {\r\n    // sequence is finalized.\r\n    this._status = constants.STATUS_FINALIZE\r\n\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    // Inherited.\r\n    super.prepare()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Prepare the condtion for which the repeat_cycle must fire.\r\n    const condition = this.syntax.compile_cond(this.vars.get('condition'))\r\n    // Run item only one time.\r\n    if (this._status !== constants.STATUS_FINALIZE) {\r\n      if (this.experiment._runner._pythonWorkspace._eval(condition) === true) {\r\n        this.experiment.vars.repeat_cycle = 1\r\n      }\r\n\r\n      // Complete the current cycle.\r\n      this._complete()\r\n    }\r\n  }\r\n}\r\n","import Item from '../items/item.js'\r\nimport { constants } from '../system/constants.js'\r\n\r\n/**\r\n * Class representing a reset feedback item.\r\n * @extends Item\r\n */\r\nexport default class ResetFeedback extends Item {\r\n  /**\r\n     * Create a reset feedback  item which resets the feedback values.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited.\r\n    super(experiment, name, script)\r\n\r\n    // Define and set the public properties.\r\n    this.description = 'Resets the feedback variables, such as \"avg_rt\" and \"acc\"'\r\n\r\n    // Read the item definition string.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    // sequence is finalized.\r\n    this._status = constants.STATUS_FINALIZE\r\n\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Run item only one time.\r\n    if (this._status !== constants.STATUS_FINALIZE) {\r\n      // Run the item.\r\n      this.experiment.reset_feedback()\r\n\r\n      // Complete the current cycle.\r\n      this._complete()\r\n    }\r\n  }\r\n}\r\n","import MouseResponse from '../items/mouse_response.js'\n\n/**\n * Class representing a reset feedback item.\n * @extends Item\n */\nexport default class TouchResponse extends MouseResponse {\n  /**\n     * Create a reset feedback  item which resets the feedback values.\n     * @param {Object} experiment - The experiment item to which the item belongs.\n     * @param {String} name - The unique name of the item.\n     * @param {String} script - The script containing the properties of the item.\n     */\n  constructor (experiment, name, script) {\n    // Inherited.\n    super(experiment, name, script)\n\n    // Define and set the public properties.\n    this.description = 'A grid-based response item, convenient for touch screens'\n  }\n\n  /** Resets all item variables to their default value. */\n  reset () {\n    super.reset()\n    this.vars.set('allowed_responses', null)\n    this.vars._ncol = 2\n    this.vars._nrow = 1\n  }\n\n  /** Implements the prepare phase of an item. */\n  prepare () {\n    // Temp hack\n    this.experiment.vars.correct = -1\n    // Inherited.\n    super.prepare()\n  }\n\n  /**\n     * Process a mouse click response.\n     * @param {Object} pRetval - The mouse response to process.\n     */\n  process_response_mouseclick (retval) {\n    this.experiment._start_response_interval = this.sri\n    this.experiment._end_response_interval = retval.rtTime\n    this.set_mouse_coordinates(retval.event.clientX, retval.event.clientY)\n    // Calulate the row, column and cell.\n    this.col = Math.floor(\n      (this.experiment.vars.cursor_x + this.experiment.vars.width / 2) /\n        (this.experiment.vars.width / this.vars._ncol)\n    )\n    this.row = Math.floor(\n      (this.experiment.vars.cursor_y + this.experiment.vars.height / 2) /\n        (this.experiment.vars.height / this.vars._nrow)\n    )\n    this.cell = this.row * this.vars._ncol + this.col + 1\n    this.experiment.vars.response = this.cell\n    this.synonyms = [this.experiment.vars.get('response').toString()]\n    this.response_bookkeeping()\n  }\n}\n","/** Class representing a general visual element. */\r\nexport default class BaseElement {\r\n  /**\r\n   * Create a log object which stores all the response data.\r\n   * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n   * @param {String} script - The script containing properties of the visual element.\r\n   * @param {Object} defaults - The default property values of the visual element.\r\n   */\r\n  constructor (sketchpad, script, defaults) {\r\n    // Set class parameter properties.\r\n    this.canvas = sketchpad.canvas\r\n    this.defaults = defaults\r\n    this.defaults.show_if = 'always'\r\n    this.defaults.z_index = 0\r\n    this.experiment = sketchpad.experiment\r\n    this.fix_coordinates = (sketchpad.vars.uniform_coordinates === 'yes')\r\n    this.name = sketchpad.name\r\n    this.only_keywords = false\r\n    this.pool = sketchpad.experiment.pool\r\n    this.properties = {}\r\n    this.sketchpad = sketchpad\r\n    this.syntax = sketchpad.syntax\r\n    this.vars = sketchpad.vars\r\n\r\n    // Set the private properties.\r\n    this._properties = null\r\n\r\n    // Read the definition string.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /**\r\n   * Parses the element from a definition string.\r\n   *\r\n   * @param {String} script The definition script line to be parsed.\r\n   * @memberof BaseElement\r\n   */\r\n  from_string (script) {\r\n    this.properties = this.sketchpad.syntax.parse_cmd(script)[2]\r\n  }\r\n\r\n  /**\r\n   * Determines the drawing order of the elements.\r\n   *\r\n   * @returns {Number}\r\n   * @memberof BaseElement\r\n   */\r\n  z_index () {\r\n    return this.properties.z_index\r\n  }\r\n\r\n  /**\r\n   * Calculate the dynamic elements within properties.\r\n   *\r\n   * @memberof BaseElement\r\n   */\r\n  eval_properties () {\r\n    // Evaluates all properties and return them.\r\n    const xc = this.experiment.vars.width / 2\r\n    const yc = this.experiment.vars.height / 2\r\n\r\n    this._properties = Object.entries(this.properties).reduce((result, [prop, val]) => {\r\n      let value = this.syntax.eval_text(val, this.vars, false)\r\n\r\n      if (['x', 'x1', 'x2'].includes(prop)) {\r\n        value = Math.round(Number(value) + xc)\r\n      }\r\n\r\n      if (['y', 'y1', 'y2'].includes(prop)) {\r\n        value = Math.round(Number(value) + yc)\r\n      }\r\n\r\n      result[prop] = value\r\n      return result\r\n    }, {})\r\n  }\r\n\r\n  /**\r\n   * Determines whether the element should be shown, based on the show-if statement.\r\n   *\r\n   * @returns {Boolean} Returns true if the element must be shown.\r\n   * @memberof BaseElement\r\n   */\r\n  is_shown () {\r\n    // Set the self of the current workspace.\r\n    this.experiment.python_workspace.self = this.sketchpad\r\n\r\n    // Determines whether the element should be shown, based on the show-if statement.\r\n    return this.experiment.python_workspace._eval(this.experiment.syntax.compile_cond(this.properties.show_if))\r\n  }\r\n\r\n  /**\r\n   * Draws the element\r\n   *\r\n   * @memberof BaseElement\r\n   */\r\n  draw () {\r\n    // Calculate the dynamic properties.\r\n    this.eval_properties()\r\n  }\r\n}\r\n","// Control elements\r\nimport Loop from '../items/loop.js'\r\nimport Sequence from '../items/sequence.js'\r\nimport Coroutines from '../items/coroutines.js'\r\n// Slides\r\nimport Sketchpad from '../items/sketchpad.js'\r\nimport Feedback from '../items/feedback.js'\r\n// Scripts\r\nimport InlineScript from '../items/inline_script.js'\r\nimport InlineJavaScript from '../items/inline_javascript.js'\r\n// Responses\r\nimport KeyboardResponse from '../items/keyboard_response.js'\r\nimport MouseResponse from '../items/mouse_response'\r\nimport Logger from '../items/logger.js'\r\n// Audio\r\nimport Sampler from '../items/sampler.js'\r\nimport Synth from '../items/synth.js'\r\n// Plugins\r\nimport AdvancedDelay from '../items/advanced_delay.js'\r\nimport FormConsent from '../items/form_consent.js'\r\nimport InlineHTML from '../items/inline_html.js'\r\nimport FormMultipleChoice from '../items/form_multiple_choice.js'\r\nimport FormTextDisplay from '../items/form_text_display.js'\r\nimport FormTextInput from '../items/form_text_input.js'\r\nimport MediaPlayer from '../items/media_player.js'\r\nimport Notepad from '../items/notepad.js'\r\nimport RepeatCycle from '../items/repeat_cycle.js'\r\nimport ResetFeedback from '../items/reset_feedback.js'\r\nimport TouchResponse from '../items/touch_response.js'\r\n// Elements\r\nimport Arrow from '../elements/arrow.js'\r\nimport Circle from '../elements/circle.js'\r\nimport Ellipse from '../elements/ellipse.js'\r\nimport Fixdot from '../elements/fixdot.js'\r\nimport Gabor from '../elements/gabor.js'\r\nimport ImageElement from '../elements/image.js' // Image is a reserved JS class\r\nimport Line from '../elements/line.js'\r\nimport Noise from '../elements/noise.js'\r\nimport Rect from '../elements/rect.js'\r\nimport TextLine from '../elements/textline.js'\r\n\r\n\r\n/**\r\n * this variable maps the string representation of each element to the corresponding\r\n * class names.\r\n * @type {Object}\r\n */\r\nexport const itemClasses = {\r\n  // Items\r\n  loop: Loop,\r\n  sequence: Sequence,\r\n  sketchpad: Sketchpad,\r\n  feedback: Feedback,\r\n  inline_script: InlineScript,\r\n  inline_javascript: InlineJavaScript,\r\n  inline_html: InlineHTML,\r\n  keyboard_response: KeyboardResponse,\r\n  mouse_response: MouseResponse,\r\n  logger: Logger,\r\n  sampler: Sampler,\r\n  synth: Synth,\r\n  coroutines: Coroutines,\r\n  advanced_delay: AdvancedDelay,\r\n  form_consent: FormConsent,\r\n  form_multiple_choice: FormMultipleChoice,\r\n  form_text_display: FormTextDisplay,\r\n  form_text_input: FormTextInput,\r\n  media_player_mpy: MediaPlayer,\r\n  notepad: Notepad,\r\n  repeat_cycle: RepeatCycle,\r\n  reset_feedback: ResetFeedback,\r\n  touch_response: TouchResponse,\r\n  // Elements\r\n  arrow: Arrow,\r\n  circle: Circle,\r\n  ellipse: Ellipse,\r\n  fixdot: Fixdot,\r\n  gabor: Gabor,\r\n  image: ImageElement,\r\n  line: Line,\r\n  noise: Noise,\r\n  rect: Rect,\r\n  textline: TextLine,\r\n}\r\n\r\nexport const constants = {\r\n  // Type of used collection mode.\r\n  PRESSES_ONLY: 1,\r\n  RELEASES_ONLY: 2,\r\n  PRESSES_AND_RELEASES: 3,\r\n\r\n  // Type of response used.\r\n  RESPONSE_NONE: 0,\r\n  RESPONSE_DURATION: 1,\r\n  RESPONSE_KEYBOARD: 2,\r\n  RESPONSE_MOUSE: 3,\r\n  RESPONSE_SOUND: 4,\r\n  RESPONSE_AUTOKEYBOARD: 5,\r\n  RESPONSE_AUTOMOUSE: 6,\r\n\r\n  // Running status of an item.\r\n  STATUS_NONE: 0,\r\n  STATUS_BUILD: 1,\r\n  STATUS_INITIALIZE: 2,\r\n  STATUS_EXECUTE: 3,\r\n  STATUS_FINALIZE: 4,\r\n\r\n  // Definition of the event loop status contstants.\r\n  TIMER_NONE: 0,\r\n  TIMER_WAIT: 1,\r\n  TIMER_EXIT: 2,\r\n  TIMER_PAUSE: 3,\r\n  TIMER_RESUME: 4,\r\n  TIMER_DONE: 5,\r\n  TIMER_BREAK: 6,\r\n  TIMER_ERROR: 7,\r\n  TIMER_FORM: 8\r\n}\r\n","import BaseElement from './base_element.js'\r\nimport Styles from '../backends/styles.js'\r\n\r\n/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nexport default class Arrow extends BaseElement {\r\n  /**\r\n   * Create an experiment item which controls the OpenSesame experiment.\r\n   * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n   * @param {String} script - The script containing properties of the visual element.\r\n   */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.arrow_body_length = 0.8\r\n    defaults.arrow_body_width = 0.5\r\n    defaults.arrow_head_width = 30\r\n    defaults.fill = 1\r\n    defaults.color = sketchpad.vars.get('foreground')\r\n    defaults.penwidth = 1\r\n    defaults.x1 = null\r\n    defaults.y1 = null\r\n    defaults.x2 = null\r\n    defaults.y2 = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Create a styles object containing style information\r\n    var styles = new Styles()\r\n    styles.background_color = this._properties.color\r\n    styles.color = this._properties.color\r\n    styles.fill = this._properties.fill\r\n    styles.penwidth = this._properties.penwidth\r\n\r\n    // Draw the arrow element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.arrow(this._properties.x1, this._properties.y1,\r\n      this._properties.x2, this._properties.y2, this._properties.arrow_body_width,\r\n      this._properties.arrow_body_length, this._properties.arrow_head_width,\r\n      styles)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\nimport Styles from '../backends/styles.js'\r\n\r\n/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nexport default class Circle extends BaseElement {\r\n  /**\r\n   * Create an experiment item which controls the OpenSesame experiment.\r\n   * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n   * @param {String} script - The script containing properties of the visual element.\r\n   */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.color = sketchpad.vars.get('foreground')\r\n    defaults.fill = 0\r\n    defaults.penwidth = 1\r\n    defaults.x = null\r\n    defaults.y = null\r\n    defaults.r = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Create a styles object containing style information\r\n    var styles = new Styles()\r\n    styles.color = this._properties.color\r\n    styles.fill = this._properties.fill\r\n    styles.penwidth = this._properties.penwidth\r\n\r\n    // Draw the circle element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.circle(this._properties.x, this._properties.y,\r\n      this._properties.r, styles)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\nimport Styles from '../backends/styles.js'\r\n\r\n/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nexport default class Ellipse extends BaseElement {\r\n  /**\r\n   * Create an experiment item which controls the OpenSesame experiment.\r\n   * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n   * @param {String} script - The script containing properties of the visual element.\r\n   */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    const defaults = {\r\n      fill: 1,\r\n      color: sketchpad.vars.get('foreground'),\r\n      penwidth: 1,\r\n      x: null,\r\n      y: null,\r\n      w: null,\r\n      h: null\r\n    }\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Create a styles object containing style information\r\n    var styles = new Styles()\r\n    styles.background_color = this._properties.color\r\n    styles.color = this._properties.color\r\n    styles.fill = this._properties.fill\r\n    styles.penwidth = this._properties.penwidth\r\n\r\n    // Draw the ellipse element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.ellipse(Number(this._properties.x),\r\n      Number(this._properties.y), Number(this._properties.w),\r\n      Number(this._properties.h), styles)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\nimport Styles from '../backends/styles.js'\r\n\r\n/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nexport default class Fixdot extends BaseElement {\r\n  /**\r\n   * Create an experiment item which controls the OpenSesame experiment.\r\n   * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n   * @param {String} script - The script containing properties of the visual element.\r\n   */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.color = sketchpad.vars.get('foreground')\r\n    defaults.style = 'default'\r\n    defaults.x = null\r\n    defaults.y = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Create a styles object containing style information\r\n    var styles = new Styles(this.sketchpad)\r\n    styles.color = this._properties.color\r\n    // Draw the fixdot element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.fixdot(this._properties.x, this._properties.y,\r\n      this._properties.style, styles)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\n\r\n/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nexport default class Gabor extends BaseElement {\r\n  /**\r\n   * Create an experiment item which controls the OpenSesame experiment.\r\n   * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n   * @param {String} script - The script containing properties of the visual element.\r\n   */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.bgmode = 'avg'\r\n    defaults.color1 = 'white'\r\n    defaults.color2 = 'black'\r\n    defaults.env = 'gaussian'\r\n    defaults.freq = 1\r\n    defaults.orient = 0\r\n    defaults.phase = 0\r\n    defaults.size = 96\r\n    defaults.stdev = 12\r\n    defaults.x = null\r\n    defaults.y = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Draw the gabor element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.gabor(this._properties.x, this._properties.y,\r\n      this._properties.orient, this._properties.freq, this._properties.env,\r\n      this._properties.size, this._properties.stdev, this._properties.phase,\r\n      this._properties.color1, this._properties.color2, this._properties.bgmode)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\n\r\n/**\r\n * Class representing an image element.\r\n * @extends BaseElement\r\n */\r\nexport default class ImageElement extends BaseElement {\r\n  /**\r\n     * Create an experiment item which controls the OpenSesame experiment.\r\n     * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n     * @param {String} script - The script containing properties of the visual element.\r\n     */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    const defaults = {}\r\n    defaults.center = 1\r\n    defaults.file = null\r\n    defaults.scale = 1\r\n    defaults.rotation = 0\r\n    defaults.x = null\r\n    defaults.y = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n\r\n    // Set the class private properties.\r\n    this._file = null\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Draw the image element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.image(this._properties.file, this._properties.center,\r\n      this._properties.x, this._properties.y, this._properties.scale,\r\n      this._properties.rotation)\r\n  }\r\n}\r\n","/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nimport BaseElement from './base_element.js'\r\nimport Styles from '../backends/styles.js'\r\n\r\nexport default class Line extends BaseElement {\r\n  /**\r\n     * Create an experiment item which controls the OpenSesame experiment.\r\n     * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n     * @param {String} script - The script containing properties of the visual element.\r\n     */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.color = sketchpad.vars.get('foreground')\r\n    defaults.penwidth = 1\r\n    defaults.x1 = null\r\n    defaults.y1 = null\r\n    defaults.x2 = null\r\n    defaults.y2 = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Create a styles object containing style information\r\n    var styles = new Styles()\r\n    styles.color = this._properties.color\r\n    styles.penwidth = this._properties.penwidth\r\n\r\n    // Draw the line element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.line(this._properties.x1, this._properties.y1,\r\n      this._properties.x2, this._properties.y2, styles)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\n\r\n/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nexport default class Noise extends BaseElement {\r\n  /**\r\n   * Create an experiment item which controls the OpenSesame experiment.\r\n   * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n   * @param {String} script - The script containing properties of the visual element.\r\n   */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.color1 = 'white'\r\n    defaults.color2 = 'black'\r\n    defaults.env = 'gaussian'\r\n    defaults.size = 96\r\n    defaults.stdev = 12\r\n    defaults.x = null\r\n    defaults.y = null\r\n    defaults.bgmode = 'avg'\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Draw the noise element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.noise(this._properties.x, this._properties.y,\r\n      this._properties.env, this._properties.size, this._properties.stdev,\r\n      this._properties.color1, this._properties.color2, this._properties.bgmode)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\nimport Styles from '../backends/styles.js'\r\n\r\n/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nexport default class Rect extends BaseElement {\r\n  /**\r\n     * Create an experiment item which controls the OpenSesame experiment.\r\n     * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n     * @param {String} script - The script containing properties of the visual element.\r\n     */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.fill = 1\r\n    defaults.color = sketchpad.vars.get('foreground')\r\n    defaults.penwidth = 1\r\n    defaults.x = null\r\n    defaults.y = null\r\n    defaults.w = null\r\n    defaults.h = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Create a styles object containing style information\r\n    var styles = new Styles()\r\n    styles.fill = this._properties.fill\r\n    styles.color = this._properties.color\r\n    styles.background_color = this._properties.color\r\n    styles.penwidth = this._properties.penwidth\r\n\r\n    // Draw the rectangle element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.rect(this._properties.x, this._properties.y,\r\n      this._properties.w, this._properties.h, styles)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\nimport Styles from '../backends/styles.js'\r\n\r\n/**\r\n * Class representing a textline element.\r\n * @extends BaseElement\r\n */\r\nexport default class Textline extends BaseElement {\r\n  /**\r\n     * Create an experiment item which controls the OpenSesame experiment.\r\n     * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n     * @param {String} script - The script containing properties of the visual element.\r\n     */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.center = 1\r\n    defaults.color = sketchpad.vars.get('foreground')\r\n    defaults.font_family = sketchpad.vars.get('font_family')\r\n    defaults.font_size = sketchpad.vars.get('font_size')\r\n    defaults.font_bold = sketchpad.vars.get('font_bold')\r\n    defaults.font_italic = sketchpad.vars.get('font_italic')\r\n    defaults.html = 'yes'\r\n    defaults.text = null\r\n    defaults.x = null\r\n    defaults.y = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n    const text = this._properties.text\r\n    // Create a styles object containing style information\r\n    const styles = new Styles()\r\n    styles.color = this._properties.color\r\n    styles.font_family = this._properties.font_family\r\n    styles.font_size = Number(this._properties.font_size)\r\n    styles.font_italic = (this._properties.font_italic === 'yes')\r\n    styles.font_bold = (this._properties.font_bold === 'yes')\r\n    styles.font_underline = (this._properties.font_underline === 'yes')\r\n\r\n    this.sketchpad.canvas.text(text, this._properties.center,\r\n      this._properties.x, this._properties.y, this._properties.html,\r\n      styles)\r\n  }\r\n}\r\n","import {\n  constants\n} from './constants.js'\n\nimport isFunction from 'lodash/isFunction'\nimport isPlainObject from 'lodash/isPlainObject'\n\n/** Class representing a debugger. */\nexport default class Debugger {\n  /**\n   * Create a debugger which handles errors and messahes during an session.\n   * @param {Object} runner - The runner class to which the debugger belongs.\n   */\n  constructor (runner) {\n    // Create and set private properties.\n    this._runner = runner // Parent runner attached to the debugger.\n\n    // Create and set public properties.\n    this.enabled = true // Enable the debugger.\n    this.error = false // True if an error occured.\n    this.messageLog = [] // Arraty with alle log messages.\n  }\n\n  /** Initialize the debugger object class. */\n  _initialize () {\n    // Clear the log.\n    this.messageLog = []\n  }\n\n  /** Finalize the debugger object class. */\n  _finalize () {\n    // If enabled push the messages to the javascript console.\n    if (this.enabled === true) {\n      console.log(this.messageLog)\n    }\n\n    // Clear the log.\n    this.messageLog = []\n  }\n\n  /**\n   * Show a fatal error to the user and stops the running of the experiment.\n   * @param {String} errorText - The error shown to the user.\n   */\n  addError (errorText, context = null) {\n    // Set the error flag.\n    this.error = true\n\n    // Set status of the event system to break.\n    this._runner._events.state = constants.TIMER_ERROR\n\n    // Throw the exception.\n    console.error('OSWeb has stopped running due to a fatal error.')\n    console.error(errorText)\n\n    if (isPlainObject(context)) {\n      if (context.notify === true && isFunction(this._runner._onError)) {\n        const url = context.url || null\n        this._runner._onError(errorText, url)\n      }\n    }\n  }\n\n  /**\n   * Add a message to the debugger list.\n   * @param {String} message - The message to be added to the list.\n   */\n  addMessage (messageText) {\n    // Push the error message to the log.\n    this.messageLog.push(messageText)\n\n    if (this.enabled === true) {\n      console.log(messageText)\n    }\n  }\n\n  /**\n   * Mirror function for the AddMessage method.\n   * @param {String} messageText - The message to be added to the list.\n   */\n  msg (messageText) {\n    // Push the error message to the log.\n    this.addMessage(messageText)\n  }\n}\n","import {\n  isNumber\n} from 'lodash'\n\n/** Class representing a convertor. */\nexport default class Convertor {\n  /**\n   * Create a convertor which converts an osexp script to a JSON object stucture.\n   * @param {Object} runner - The runner class to which the debugger belongs.\n   */\n  constructor (runner) {\n    // Create and set private properties.\n    this.item = null // Current item to process.\n    this.runner = runner // Parent runner attached to the debugger.\n    this.variable = null // Container for global multiline variable.\n    this.variabelName = '' // Name of a global multiline variable.\n  }\n\n  /**\n   * Strip additional quotes for value token.\n   * @param {String} value - The value to check and (optional) convert.\n   * @return {String} - The converted value.\n   */\n  parseValue (value) {\n    // Strip additional quotes.\n    if ((value.length >= 4) && (value.substr(0, 1) === '\"') && (value.substr(value.length - 1, 1) === '\"')) {\n      return value.substr(1, value.length - 2)\n    } else {\n      return value\n    }\n  }\n\n  /**\n   * Process a single line within the osexp script.\n   * @param {String} line - The string line to parse.\n   */\n  parseLine (line) {\n    // Split a line into items and process them.\n    var items = line.match(/(\".*?\"|[^\"\\s]+)+(?=\\s*|\\s*$)/g)\n\n    // if defined process a single line.\n    if (items !== null) {\n      // Select action on first token.\n      switch (items[0]) {\n      case 'define':\n        // Process a define statement.\n        this.item = this.runner._itemStore.newItem(items[1], items[2], '')\n        break\n      case 'draw':\n        // Create the element.\n        var element = this.runner._itemStore._newElementClass(items[1], this.item, '')\n\n        // Split the properties and process them.\n        for (var i = 2; i < items.length; i++) {\n          var pair = items[i].split('=', 2)\n          element.properties[pair[0]] = pair[1]\n        }\n\n        // Add the element to the item.\n        this.item.elements.push(element)\n        break\n      case 'run':\n        if (this.item.type === 'sequence') {\n          // Process a run statement for a sequence item.\n          this.item.items.push({\n            item: items[1],\n            cond: items[2]\n          })\n        } else {\n          // Process a run statement for a loop item.\n          this.item.vars.item = items[1]\n        }\n        break\n      case 'set':\n        // Process a set statement.\n        this.item.vars[items[1]] = this.parseValue(items[2])\n        break\n      case 'setcycle':\n        // Process a setcycle statement.\n        var value = this.parseValue(items[3])\n\n        // Convert the python expression to javascript.\n        if (value[0] === '=') {\n          // Parse the python statement.\n          value = this.runner._pythonParser._prepare(value.slice(1))\n          if (value !== null) {\n            value = value.body[0]\n          }\n        } else {\n          // Check if the value is numeric\n          value = isNumber(value) ? Number(value) : value\n        }\n\n        // Set the matrix with the proper values.\n        if (this.item.orig_matrix[items[1]] === undefined) {\n          this.item.orig_matrix[items[1]] = {}\n        }\n        this.item.orig_matrix[items[1]][items[2]] = value\n        break\n      case 'widget':\n        // Remove the widget token from the list.\n        items.shift()\n\n        // Add the element to the item.\n        this.item._widgets.push(items)\n        break\n      default:\n        // check for multiline variables.\n        if ((items[0].length > 5) && (items[0].substr(0, 2) === '__') && (items[0].substr(-2) === '__')) {\n          // Start of end of the multiline variable.\n          if (items[0] === '__end__') {\n            this.item.vars[this.variableName] = this.variable\n            this.variable = null\n          } else {\n            this.variableName = items[0].substr(2, items[0].length - 4)\n            this.variable = []\n          }\n        } else {\n          if (this.variable !== null) {\n            this.variable.push(line)\n          }\n        }\n      }\n    } else {\n      if (this.variable !== null) {\n        this.variable.push('')\n      } else {\n        // Return to default level.\n        this.item = this.runner._experiment\n      }\n    }\n  }\n\n  /** Initialize the debugger object class. */\n  parseScript (script) {\n    // Set first item.\n    this.item = this.runner._experiment\n\n    // Split the script into lines.\n    if (script !== null) {\n      // Split the script into lines.\n      var lines = script.split('\\n')\n      for (var i = 0; i < lines.length; i++) {\n        // Parse a single line\n        this.parseLine(lines[i])\n      }\n    }\n  }\n}\n","import { constants } from '../system/constants.js'\r\nimport { Ticker } from 'pixi.js'\r\n\r\n/** Class representing the event system. */\r\nexport default class Events {\r\n  /** The events class controls the running of an experiment. */\r\n  constructor (runner) {\r\n    // Create and set private properties.\r\n    this._currentItem = null // The current active item.\r\n    this._keyDownEvent = null // Container for last key event.\r\n    this._keyDownHandler = null // Key down event handler.\r\n    this._keyPressMode = constants.PRESSES_ONLY // Keyboard press mode.\r\n    this._keyUpHandler = null // Key up event handler.\r\n    this._mouseDownEvent = null // Container for last mouse event.\r\n    this._mouseDownHandler = null // Mouse down event handler.\r\n    this._mouseMoveEvent = null // Container for last mouse move event.\r\n    this._mouseMoveHandler = null // Mouse move event handler.\r\n    this._mousePressMode = constants.PRESSES_ONLY // Mouse press mode.\r\n    this._mouseUpHandler = null // Mouse up event handler.\r\n    this._runner = runner // Parent runner class.\r\n    this._responseGiven = false // Valid response toggle\r\n    this._responseList = null // Items to respond on.\r\n    this._responseType = constants.RESPONSE_NONE // Set type of response (0 = none, 1 = keyboard, 2 = mouse, 3 = sound).\r\n    this._soundHasEnded = false // Sound play is finished.\r\n    this._state = constants.TIMER_NONE // Current status of the runner.\r\n    this._statePrevious = constants.TIMER_NONE // Previous state, used when pausing experiment.\r\n    this._timeHandler = null // Timing event handler.\r\n    this._timeOut = -1 // Duration before timeout occures.\r\n    this._timeStamp = -1 // Moment of update checking.\r\n    this._videoHasEnded = false // Video play is finished.\r\n\r\n    // Definition of the conversion table to convert keycodes to OpenSesame codes.\r\n    this._KEY_CODES = [\r\n      '', '', '', '', '', '', 'help', '', 'backspace', 'tab', '', '', 'clear', 'enter', 'enter_special', '', 'shift', 'ctrl', 'alt', 'pause', // 00  .. 19\r\n      'caps', '', '', '', '', '', '', 'escape', '', '', '', '', 'space', 'page up', 'page down', 'end', 'home', 'left', 'up', 'right', // 20  .. 39\r\n      'down', 'select', 'print', 'execute', 'print screen', 'insert', 'delete', '', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', // 40  .. 59\r\n      '<', '=', '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', // 60  .. 79\r\n      'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'left meta', 'right meta', 'menu', '', '', 'kp0', 'kp1', 'kp2', 'kp3', // 80  .. 99\r\n      'kp4', 'kp5', 'kp6', 'kp7', 'kp8', 'kp9', 'kp_multiply', 'kp_plus', '', 'kp_minus', 'kp_period', 'kp_divide', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', // 100 .. 119\r\n      'f9', 'f10', 'f11', 'f12', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 120 .. 139\r\n      '', '', '', '', 'numlock', 'scrollock', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 140 .. 159\r\n      '^', '!', '\"', '#', '$', '%', '&', '_', '(', ')', '*', '+', '|', '_', '{', '}', '~', '', '', '', // 160 .. 179\r\n      '', '', '', '', '', '', ';', '=', ',', '-', '.', '/', '`', '', '', '', '', '', '', '', // 180 .. 199\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '[', // 200 .. 219\r\n      '\\\\', ']', '\\'', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 220 .. 239\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '' // 240 .. 255\r\n    ]\r\n\r\n    // Definition of the conversion table to convert shift keycodes to OpenSesame codes.\r\n    this._KEY_SHIFTCODES = [\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'pause', // 00  .. 19\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 20  .. 39\r\n      '', '', '', '', '', '', '', '', ')', '!', '@', '#', '$', '%', '^', '&', '*', '(', '', ':', // 40  .. 59\r\n      '', '+', '', '', '', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', // 60  .. 79\r\n      'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'y', 'z', '', '', '', '', '', '', '', '', '', '', // 80  .. 99\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 100 .. 119\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 120 .. 139\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 140 .. 159\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '_', '', '', '', '', '', '', // 160 .. 179\r\n      '', '', '', '', '', '', '', '', '<', '', '>', '?', '~', '', '', '', '', '', '', '', // 180 .. 199\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '{', // 200 .. 219\r\n      '|', '}', '\"', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 220 .. 239\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '' // 240 .. 255\r\n    ]\r\n  }\r\n\r\n  /** Initialize the event system. */\r\n  _initialize () {\r\n    // Create and set the keyboard event listeners.\r\n    this._keyDownHandler = this._keyDown.bind(this)\r\n    this._keyUpHandler = this._keyUp.bind(this)\r\n    window.addEventListener('keydown', this._keyDownHandler)\r\n    window.addEventListener('keyup', this._keyUpHandler)\r\n\r\n    // Create and set the mouse event listeners.\r\n    this._mouseDownHandler = this._mouseDown.bind(this)\r\n    this._mouseMoveHandler = this._mouseMove.bind(this)\r\n    this._mouseUpHandler = this._mouseUp.bind(this)\r\n    this._touchStartHandler = this._touchStart.bind(this)\r\n    this._runner._renderer.view.addEventListener('mousedown', this._mouseDownHandler)\r\n    this._runner._renderer.view.addEventListener('mousemove', this._mouseMoveHandler)\r\n    this._runner._renderer.view.addEventListener('mouseup', this._mouseUpHandler)\r\n    this._runner._renderer.view.addEventListener('touchstart', this._touchStartHandler)\r\n\r\n    // Set the current item to the experiment object.\r\n    this._currentItem = this._runner._experiment\r\n    this._state = constants.TIMER_NONE\r\n\r\n    // Create the time handler and start the experiment.\r\n    this._timeHandler = new Ticker()\r\n    this._timeHandler.add(this._time.bind(this))\r\n    this._timeHandler.start()\r\n  }\r\n\r\n  /** Finalize the event system. */\r\n  _finalize () {\r\n    // Remove the keyboard event listeners.\r\n    window.removeEventListener('keydown', this._keyDownHandler)\r\n    window.removeEventListener('keyup', this._keyUpHandler)\r\n\r\n    // Remove the mouse event listeners.\r\n    this._runner._renderer.view.removeEventListener('mousedown', this._mouseDownHandler)\r\n    this._runner._renderer.view.removeEventListener('mousemove', this._mouseMoveHandler)\r\n    this._runner._renderer.view.removeEventListener('mouseup', this._mouseUpHandler)\r\n    this._runner._renderer.view.removeEventListener('touchstart', this._touchStartHandler)\r\n\r\n    // Stop the timing event listener.\r\n    this._timeHandler.stop()\r\n    this._timeHandler.remove(this._time)\r\n\r\n    // Clear the properties.\r\n    this._currentItem = null\r\n    this._mouseDownEvent = null\r\n    this._mouseMoveEvent = null\r\n    this._responseList = null\r\n    this._timeHandler = null\r\n  }\r\n\r\n  /**\r\n     * Convert a keyboard code to a OpenSesame code (including special characters ctrl/shift/alt).\r\n     * @param {Object} event - The keyboard event to process.\r\n     * @return {String} - The converted keyboard code.\r\n     */\r\n  _convertKeyCode (event) {\r\n    // Check for special characters\r\n    var key = ''\r\n    if ((event.shiftKey === true) && (event.keyCode !== 16)) {\r\n      // Shift key pressed with other key, so convert shift keys.\r\n      key = this._KEY_SHIFTCODES[event.keyCode]\r\n    } else if ((event.shiftKey === true) && (event.keyCode === 16)) {\r\n      // Shift code pressed, check for location (left or right)\r\n      key = (event.location === 1) ? 'lshift' : 'rshift'\r\n    } else if ((event.ctrlKey === true) && (event.keyCode === 17)) {\r\n      // Ctrl code pressed, check for location (left or right)\r\n      key = (event.location === 1) ? 'lctrl' : 'rctrl'\r\n    } else if ((event.altKey === true) && (event.keyCode === 18)) {\r\n      // Alt code pressed, check for location (left or right)\r\n      key = (event.location === 1) ? 'lalt' : 'ralt'\r\n    } else {\r\n      // Convert standard keycode.\r\n      key = this._KEY_CODES[event.keyCode]\r\n    }\r\n\r\n    // Return function result.\r\n    return key\r\n  }\r\n\r\n  /**\r\n     * Event handler for retrieving key down events.\r\n     * @param {Object} event - system keydown event.\r\n     */\r\n  _keyDown (event) {\r\n    // Ignore events if the key was already down. This is to avoid keypresses\r\n    if (event.repeat) return\r\n    // Store the keyboard event.\r\n    this._keyDownEvent = {\r\n      event: event,\r\n      rtTime: this._runner._experiment.clock.time()\r\n    }\r\n\r\n    // Check for esc key to pause the experiment.\r\n    if ((event.keyCode === 27) && (this._state !== constants.TIMER_PAUSE)) {\r\n      // Set system to paused.\r\n      this._statePrevious = this._state\r\n      this._state = constants.TIMER_PAUSE\r\n\r\n      // Show the pause screen.\r\n      this._runner._screen._showPauseScreen()\r\n    } else if ((this._state === constants.TIMER_WAIT) &&\r\n      ((this._keyPressMode === constants.PRESSES_ONLY) ||\r\n      (this._keyPressMode === constants.PRESSES_AND_RELEASES))) {\r\n      // Process the event.\r\n      return this._processKeyboardEvent(event, 1)\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Event handler for retrieving key up events.\r\n     * @param {Object} event - system keyup event.\r\n     */\r\n  _keyUp (event) {\r\n    if (event.repeat) return\r\n    // Only select this event when the collection mode is set for this.\r\n    if ((this._state === constants.TIMER_WAIT) && ((this._keyPressMode === constants.RELEASES_ONLY) ||\r\n      (this._keyPressMode === constants.PRESSES_AND_RELEASES))) {\r\n      // Process the event.\r\n      return this._processKeyboardEvent(event, 0)\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Process and convert keyboard events into response objects.\r\n     * @param {Object} event - system keyboard event.\r\n     * @param {Number} keyboardState - type of keyboard event.\r\n     */\r\n  _processKeyboardEvent (event, keyboardState) {\r\n    // Create a new keyboard response object.\r\n    const keyboardResponse = {\r\n      event: event,\r\n      rtTime: this._runner._experiment.clock.time(),\r\n      state: keyboardState,\r\n      type: constants.RESPONSE_KEYBOARD\r\n    }\r\n\r\n    // Convert response to proper keyboard token.\r\n    keyboardResponse.resp = this._convertKeyCode(event)\r\n\r\n    // Process the response to the current object.\r\n    if ((this._responseType === constants.RESPONSE_KEYBOARD) &&\r\n      ((this._responseList === null) ||\r\n      (this._responseList.indexOf(keyboardResponse.resp) >= 0))) {\r\n      // Process the current item.\r\n      if (this._currentItem !== null) {\r\n        // Process the response.\r\n        this._currentItem._update(keyboardResponse)\r\n      }\r\n\r\n      // Set the valid response given toggle.\r\n      this._responseGiven = true\r\n    }\r\n    return keyboardResponse\r\n  }\r\n\r\n  /** Prevent the right mouse context menu from showing. */\r\n  _mouseContext (event) {\r\n    // Prevent default action.\r\n    event.preventDefault()\r\n\r\n    // Return false to prevent the context menu from pushing up.\r\n    return false\r\n  }\r\n\r\n  /** Store the last mouse move event for later use. */\r\n  _mouseMove (event) {\r\n    // Store the mouse move event and its timestamp for use in the mouse class.\r\n    this._mouseMoveEvent = {\r\n      event: event,\r\n      rtTime: this._runner._experiment.clock.time()\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Event handler for touch start events, which for now are translated to\r\n     * moudown events.\r\n     * @param {Object} event - system touchstart event.\r\n     */\r\n  _touchStart (event) {\r\n    event.button = 0\r\n    event.clientX = event.changedTouches[0].clientX\r\n    event.clientY = event.changedTouches[0].clientY\r\n    this._mouseDown(event)\r\n  }\r\n\r\n  /**\r\n     * Event handler for retrieving mouse down events.\r\n     * @param {Object} event - system mousedown event.\r\n     */\r\n  _mouseDown (event) {\r\n    // Store the mouse down event and its timestamp for use in the mouse class.\r\n    this._mouseDownEvent = {\r\n      event: event,\r\n      rtTime: this._runner._experiment.clock.time()\r\n    }\r\n\r\n    // Only select this event when the collection mode is set for this.\r\n    if ((this._state === constants.TIMER_WAIT) && ((this._mousePressMode === constants.PRESSES_ONLY) || (this._mousePressMode === constants.PRESSES_AND_RELEASES))) {\r\n      // Process the event.\r\n      return this._processMouseEvent(event, 1)\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Event handler for retrieving mouse up events.\r\n     * @param {Object} event - system mouseup event.\r\n     */\r\n  _mouseUp (event) {\r\n    // Only select this event when the collection mode is set for this.\r\n    if ((this._state === constants.TIMER_WAIT) && ((this._mousePressMode === constants.RELEASES_ONLY) || (this._mousePressMode === constants.PRESSES_AND_RELEASES))) {\r\n      // Process the event.\r\n      this._processMouseEvent(event, 0)\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Process and convert mouse events into response objects.\r\n     * @param {Object} event - system mouse event.\r\n     * @param {Number} mouseState - type of mouse event.\r\n     */\r\n  _processMouseEvent (event, mouseState) {\r\n    // Create a mouse response object.\r\n    var mouseResponse = {\r\n      event: event,\r\n      rtTime: this._runner._experiment.clock.time(),\r\n      state: mouseState,\r\n      type: constants.RESPONSE_MOUSE\r\n    }\r\n\r\n    // Adjust mouse response.\r\n    mouseResponse.resp = String(event.button + 1)\r\n\r\n    // Process the response to the current object.\r\n    if ((this._responseType === constants.RESPONSE_MOUSE) && ((this._responseList === null) ||\r\n      (this._responseList.indexOf(mouseResponse.resp) >= 0))) {\r\n      // Process the response to the current object.\r\n      if (this._currentItem !== null) {\r\n        this._currentItem._update(mouseResponse)\r\n      }\r\n\r\n      // Set the valid response given toggle.\r\n      this._responseGiven = true\r\n    }\r\n    return mouseResponse\r\n  }\r\n\r\n  /**\r\n     * Event handler for sound event processing.\r\n     * @param {Object} event - sound end event.\r\n     */\r\n  _audioEnded (sampler) {\r\n    sampler.onEnded()\r\n    // If duration isequal to sound exit the sound item.\r\n    if (sampler.duration === 'sound') {\r\n      this.proceed()\r\n    }\r\n  }\r\n\r\n  /** Definition of methods for video event processing. */\r\n  _videoEnded (event) {\r\n    // If duration is set to video end respons to this.\r\n    var video = this\r\n    if (video.duration === 'video') {\r\n      video._experiment._runner._events._videoHasEnded = true\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Event handler for video play processing.\r\n     * @param {Object} event - sound end event.\r\n     */\r\n  _videoPlay (event) {\r\n  }\r\n\r\n  /**\r\n     * Event handler for experiment execution.\r\n     * @param {Object} event - system timer event.\r\n     */\r\n  _time (event) {\r\n    // Select the proper state.\r\n    switch (this._state) {\r\n    case constants.TIMER_NONE:\r\n      // Do nothing in the loop\r\n      break\r\n    case constants.TIMER_WAIT:\r\n      // Set current time stamp\r\n      this._timeStamp = this._currentItem.clock.time()\r\n\r\n      // Check if a time out occures or a valid response is given.\r\n      if (((this._timeOut === -1) && ((this._responseGiven === true) || (this._videoHasEnded === true))) ||\r\n                    ((this._timeOut > 0) && ((this._responseType === constants.RESPONSE_KEYBOARD) || (this._responseType === constants.RESPONSE_MOUSE)) && (this._responseGiven === true)) ||\r\n                    ((this._timeOut > 0) && ((this._timeStamp - this._currentItem.experiment.vars.get('time_' + this._currentItem.name)) > this._timeOut))) {\r\n        this.proceed()\r\n      } else {\r\n        // Update the current item without response.\r\n        this._currentItem._update(null)\r\n      }\r\n      break\r\n    case constants.TIMER_PAUSE:\r\n      // Do nothing in the loop\r\n      break\r\n    case constants.TIMER_RESUME:\r\n      // Do nothing in the loop\r\n      break\r\n    case constants.TIMER_BREAK:\r\n    case constants.TIMER_EXIT:\r\n      // Adjus the status.\r\n      this._state = constants.TIMER_NONE\r\n\r\n      // Exit the runner.\r\n      this._runner._finalize()\r\n      break\r\n    case constants.TIMER_FORM:\r\n      // Update the current item without response.\r\n      this._currentItem._update(null)\r\n      break\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Execute a stimulus/response wait period for a certain item.\r\n     * @param {Number} timeout - maximum time to wait for a response.\r\n     * @param {Number} responseType - type of response to wait for.\r\n     * @param {Array} responseList - list of acceptable respones.\r\n     */\r\n  _run (timeOut, responseType, responseList) {\r\n    // Set the event run|ning properties.\r\n    this._responseList = responseList\r\n    this._responseType = responseType\r\n    this._timeOut = timeOut\r\n\r\n    // Activate the event running.\r\n    this._responseGiven = false\r\n    this._soundHasEnded = false\r\n    this._state = constants.TIMER_WAIT\r\n    this._videoHasEnded = false\r\n  }\r\n\r\n  proceed () {\r\n    // Adjust the status.\r\n    this._state = constants.TIMER_NONE\r\n\r\n    // Remove the items from the general stack.\r\n    this._runner._itemStack.pop()\r\n\r\n    // Execute the post-run phase after duration is finished or response is received.\r\n    this._currentItem._complete()\r\n  }\r\n}\r\n","import { isFunction } from 'lodash'\r\n\r\n/** Class representing a parameter processor. */\r\nexport default class Parameters {\r\n  /**\r\n     * Create an session class which stores information about the client system.\r\n     * @param {Runner} runner - The runner class to which the debugger belongs.\r\n     */\r\n  constructor (runner) {\r\n    // Create and set private properties.\r\n    this._itemCounter = 0 // Number of active parameter.\r\n    this._parameters = [] // All parameters to process.\r\n    this._runner = runner // Parent runner attached to the session object.\r\n  }\r\n\r\n  /** Initialize the parameters class. */\r\n  _initialize () {\r\n    // Check if subject parameter is already defined.\r\n    if (this._runner._subject !== null) {\r\n      // Set the subject number\r\n      this._runner._experiment.set_subject(this._runner._subject)\r\n\r\n      // Parameters are processed, next phase.\r\n      this._runner._screen._setupClickScreen(this._runner._welcomeText)\r\n    } else {\r\n      // Update inroscreen.\r\n      this._runner._screen._updateIntroScreen('Retrieving input parameters.')\r\n\r\n      // Set properties if defined.\r\n      var parameter = {\r\n        dataType: 'number',\r\n        defaultValue: '0',\r\n        name: 'subject_nr',\r\n        title: 'Starting the experiment',\r\n        prompt: 'Please enter the subject number',\r\n        promptEnabled: true\r\n      }\r\n\r\n      // Add the subject parameter to the parameters list.\r\n      this._parameters.push(parameter)\r\n\r\n      // Process the Parameters.\r\n      this._processParameters()\r\n    }\r\n  }\r\n\r\n  /** Process all parameters within the parameter list. */\r\n  _processParameters () {\r\n    // Process all items for which a user input is required.\r\n    if (this._itemCounter < this._parameters.length) {\r\n      // Process a  parameter.\r\n      this._processParameter(this._parameters[this._itemCounter])\r\n    } else {\r\n      // Transfer the startup info to the context.\r\n      this._transferParameters()\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Callback function for dialog when aits OK button has been clicked.\r\n     * @param {Object} parameter - The parameter to set.\r\n     * @param {String} value - The value to set.\r\n     */\r\n  _onParamConfirm (parameter, value) {\r\n    // Get the response information\r\n    parameter.response = value\r\n\r\n    // Increase the counter.\r\n    this._itemCounter++\r\n\r\n    // Continue processing.\r\n    this._processParameters()\r\n  }\r\n\r\n  /** Callback function for dialog when its cancel button has been clicked. */\r\n  _onParamCancel () {\r\n    // Exit the runner.\r\n    this._runner._exit()\r\n  }\r\n\r\n  /**\r\n     * Process a single parameter\r\n     * @param {Object} parameter - The parameter which must be processed.\r\n     */\r\n  _processParameter (parameter) {\r\n    // Check if a user request is required.\r\n    if (parameter.promptEnabled === true) {\r\n      // Use passed function that displays a prompt. This leaves the display\r\n      // of the prompt to the library or system that implements osweb.\r\n      if (isFunction(this._runner._prompt)) {\r\n        this._runner._prompt(parameter.title, parameter.prompt,\r\n          parameter.defaultValue, parameter.dataType,\r\n          this._onParamConfirm.bind(this, parameter), this._onParamCancel.bind(this))\r\n      } else {\r\n        // Fallback to the window prompt if no function has been passed.\r\n        const result = window.prompt(parameter.prompt, parameter.defaultValue)\r\n\r\n        if (result === null) {\r\n          this._onParamCancel()\r\n        } else {\r\n          this._onParamConfirm(parameter, result)\r\n        }\r\n      }\r\n    } else {\r\n      // Assign default value to the Startup item.\r\n      parameter.response = parameter.defaultValue\r\n\r\n      // Increase the counter.\r\n      this._itemCounter++\r\n\r\n      // Continue processing.\r\n      this._processParameters()\r\n    }\r\n  }\r\n\r\n  /** Transfer the startup info items to the context. */\r\n  _transferParameters () {\r\n    // Transfer the startup info items to the context.\r\n    for (var i = 0; i < this._parameters.length; i++) {\r\n      // Additional run for subject_nr\r\n      if (this._parameters[i].name === 'subject_nr') {\r\n        this._runner._experiment.set_subject(this._parameters[i].response)\r\n      } else {\r\n        this._runner._experiment.vars.set(this._parameters[i].name,\r\n          this._parameters[i].response)\r\n      }\r\n    }\r\n\r\n    // Parameters are processed, next phase.\r\n    this._runner._screen._setupClickScreen(this._runner._welcomeText)\r\n  }\r\n}\r\n","import { isFunction } from 'lodash'\r\nimport { Container, Sprite, Graphics, Text } from 'pixi.js'\r\nimport { VERSION_NUMBER } from '../index.js'\r\n\r\n/** Class representing a Screen. */\r\nexport default class Screen {\r\n  /**\r\n   * Create an introduction screen which handles the start of the experiment.\r\n   * @param {Object} runner - The runner class to which the screen belongs.\r\n   */\r\n  constructor (runner) {\r\n    // Set class parameter properties.\r\n    this._runner = runner // Parent runner attached to the screen object.\r\n\r\n    // Set class properties.\r\n    this._active = true // If true the introduction screen is shown.\r\n    this._click = true // If true all is started with a mouse click.\r\n    this._container = null //  Container which holds the screen info.\r\n    this._exit = false // Exit toggle to prevent dialog when closing experiment.\r\n  }\r\n\r\n  screenCenter () {\r\n    return {\r\n      x: this._runner._renderer.width / 2,\r\n      y: this._runner._renderer.height / 2\r\n    }\r\n  }\r\n\r\n  /** Initialize the fullscreen mode if enabled. */\r\n  _fullScreenInit () {\r\n    // Check if fullscreen must be enabled.\r\n    if (this._runner._fullScreen === true) {\r\n      // Get the container element.\r\n      var element = this._runner._container\r\n\r\n      // Go full-screen\r\n      if (element.requestFullscreen) {\r\n        document.addEventListener('fullscreenchange', (e) => {\r\n          this._fullScreenChanged(e)\r\n        })\r\n        document.addEventListener('fullscreenerror', (e) => {\r\n          this._fullScreenError(e)\r\n        })\r\n        element.requestFullscreen()\r\n      } else if (element.webkitRequestFullscreen) {\r\n        document.addEventListener('webkitfullscreenchange', (e) => {\r\n          this._fullScreenChanged(e)\r\n        })\r\n        document.addEventListener('webkitfullscreenerror', (e) => {\r\n          this._fullScreenError(e)\r\n        })\r\n        element.webkitRequestFullscreen()\r\n      } else if (element.mozRequestFullScreen) {\r\n        document.addEventListener('mozfullscreenchange', (e) => {\r\n          this._fullScreenChanged(e)\r\n        })\r\n        document.addEventListener('mozfullscreenerror', (e) => {\r\n          this._fullScreenError(e)\r\n        })\r\n        element.mozRequestFullScreen()\r\n      } else if (element.msRequestFullscreen) {\r\n        document.addEventListener('MSFullscreenChange', (e) => {\r\n          this._fullScreenChanged(e)\r\n        })\r\n        document.addEventListener('MSFullscreenError', (e) => {\r\n          this._fullScreenError(e)\r\n        })\r\n        element.msRequestFullscreen()\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Finalize the fullscreen mode if if was enabled. */\r\n  _fullScreenExit () {\r\n    // Check if fullscreen must be enabled.\r\n    if (this._runner._fullScreen === true) {\r\n      // Set the exit toggle.\r\n      this._exit = true\r\n\r\n      // Exit the full screen mode.\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen()\r\n      } else if (document.webkitExitFullscreen) {\r\n        document.webkitExitFullscreen()\r\n      } else if (document.mozCancelFullScreen) {\r\n        document.mozCancelFullScreen()\r\n      } else if (document.msExitFullscreen) {\r\n        document.msExitFullscreen()\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Event handler which responds to full-screen change. */\r\n  _fullScreenChanged () {\r\n    // Check if we are dropping out of full-screen.\r\n    if (document.fullscreenElement ||\r\n      document.webkitFullscreenElement ||\r\n      document.mozFullScreenElement ||\r\n      document.msFullscreenElement) {\r\n      // Scale the canvas\r\n      switch (this._runner._scaleMode) {\r\n      case 'noScale':\r\n        // Default mode, no scaling, canbas is centered on the screen.\r\n        this._runner._renderer.view.style.top = '0px'\r\n        this._runner._renderer.view.style.bottom = '0px'\r\n        this._runner._renderer.view.style.left = '0px'\r\n        this._runner._renderer.view.style.right = '0px'\r\n        this._runner._renderer.view.style.right = '0px'\r\n        this._runner._renderer.view.style.margin = 'auto'\r\n        this._runner._renderer.view.style.display = 'block'\r\n        this._runner._renderer.view.style.position = 'absolute'\r\n        this._runner._renderer.render(this._runner._experiment._currentCanvas._container)\r\n        break\r\n      case 'showAll':\r\n        // Default mode, no scaling, canbas is centered on the screen.\r\n        this._runner._renderer.view.style.top = '0px'\r\n        this._runner._renderer.view.style.bottom = '0px'\r\n        this._runner._renderer.view.style.left = '0px'\r\n        this._runner._renderer.view.style.right = '0px'\r\n        this._runner._renderer.view.style.right = '0px'\r\n        this._runner._renderer.view.style.margin = 'auto'\r\n        this._runner._renderer.view.style.display = 'block'\r\n        this._runner._renderer.view.style.position = 'absolute'\r\n        if ((this._runner._container.clientWidth - this._runner._experiment.vars.width) >\r\n            (this._runner._container.clientHeight - this._runner._experiment.vars.height)) {\r\n          const ar = (this._runner._container.clientHeight / this._runner._experiment.vars.height)\r\n          this._runner._renderer.resize(Math.round(this._runner._experiment.vars.width * ar), this._runner._container.clientHeight)\r\n          this._runner._experiment._scale_x = Math.round(this._runner._experiment.vars.width * ar) / this._runner._experiment.vars.width\r\n          this._runner._experiment._scale_y = (this._runner._container.clientHeight / this._runner._experiment.vars.height)\r\n        } else {\r\n          const ar = (this._runner._container.clientWidth / this._runner._experiment.vars.width)\r\n          this._runner._renderer.resize(this._runner._container.clientWidth, Math.round(this._runner._experiment.vars.height * ar))\r\n          this._runner._experiment._scale_x = (this._runner._container.clientWidth / this._runner._experiment.vars.width)\r\n          this._runner._experiment._scale_y = Math.round(this._runner._experiment.vars.height * ar) / this._runner._experiment.vars.height\r\n        }\r\n        this._runner._experiment._currentCanvas._container.scale.x = this._runner._experiment._scale_x\r\n        this._runner._experiment._currentCanvas._container.scale.y = this._runner._experiment._scale_y\r\n        this._runner._renderer.render(this._runner._experiment._currentCanvas._container)\r\n        break\r\n      case 'exactFit':\r\n        // Fit to the exact window size (cropping).\r\n        this._runner._experiment._scale_x = (this._runner._container.clientWidth / this._runner._experiment.vars.width)\r\n        this._runner._experiment._scale_y = (this._runner._container.clientHeight / this._runner._experiment.vars.height)\r\n\r\n        // Reize the current canvas.\r\n        this._runner._renderer.resize(this._runner._container.clientWidth, this._runner._container.clientHeight)\r\n        this._runner._experiment._currentCanvas._container.scale.x = this._runner._experiment._scale_x\r\n        this._runner._experiment._currentCanvas._container.scale.y = this._runner._experiment._scale_y\r\n        this._runner._renderer.render(this._runner._experiment._currentCanvas._container)\r\n        break\r\n      }\r\n    } else {\r\n      // Check for exiting experiment.\r\n      if (this._exit === false) {\r\n        // Resclae to 1Fit to the exact window size (cropping).\r\n        this._runner._experiment._scale_x = 1\r\n        this._runner._experiment._scale_y = 1\r\n\r\n        // Fit to the exact window size (cropping).\r\n        this._runner._renderer.resize(this._runner._experiment.vars.width, this._runner._experiment.vars.height)\r\n        this._runner._experiment._currentCanvas._container.scale.x = 1\r\n        this._runner._experiment._currentCanvas._container.scale.y = 1\r\n        this._runner._renderer.render(this._runner._experiment._currentCanvas._container)\r\n\r\n        // Open Sesame is running, request subject to continue of to stop.\r\n        if (isFunction(this._runner._confirm)) {\r\n          this._runner._confirm('Leaving full-screen mode, pausing experiment.',\r\n            'Please press ok the resume the experiment otherwise cancel to stop.',\r\n            this._onFullScreenConfirm.bind(this), this._onFullScreenCancel.bind(this))\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Event handler which responds to full-screen change errors. */\r\n  _fullScreenError () {\r\n    // Show error message.\r\n    this._runner.debugger.addError('Could not start full-screen mode, experiment stopped.')\r\n  }\r\n\r\n  /** Event handler to respond to dialog ok conmfirmation. */\r\n  _onFullScreenConfirm () {\r\n    // Get the container element.\r\n    var element = this._runner._container\r\n    // Go full-screen\r\n    if (element.requestFullscreen) {\r\n      element.requestFullscreen()\r\n    } else if (element.webkitRequestFullscreen) {\r\n      element.webkitRequestFullscreen()\r\n    } else if (element.mozRequestFullScreen) {\r\n      element.mozRequestFullScreen()\r\n    } else if (element.msRequestFullscreen) {\r\n      element.msRequestFullscreen()\r\n    }\r\n  }\r\n\r\n  /** Event handler to respond to dialog cancel confirmation. */\r\n  _onFullScreenCancel () {\r\n    // Exit the experiment.\r\n    this._runner._finalize()\r\n  }\r\n\r\n  /** Set the introscreen elements. */\r\n  _setupIntroScreen ( logoSrc ) {\r\n    // Check if introscreen is used.\r\n    if (this._active === true) {\r\n      // Define introscreen elements.\r\n      this._introScreen = new Container()\r\n\r\n      const center = this.screenCenter()\r\n\r\n      const logoPath = (typeof logoSrc === 'undefined') ? 'img/opensesame.png' : logoSrc\r\n\r\n      const oswebLogo = Sprite.from(logoPath)\r\n      const oswebTitle = new Text('OSWeb', {\r\n        fontFamily: 'Arial',\r\n        fontSize: 26,\r\n        fill: '#FFFFFF'\r\n      })\r\n      const versionInfo = new Text(VERSION_NUMBER, {\r\n        fontFamily: 'Arial',\r\n        fontSize: 16,\r\n        fill: '#FFFFFF'\r\n      })\r\n\r\n      const copyrightText = new Text(\r\n        `Copyright Jaap Bos, Daniel Schreij & Sebastiaan Mathot, 2016 - ${(new Date()).getFullYear()}`,\r\n        {\r\n          fontFamily: 'Arial',\r\n          fontSize: 12,\r\n          fill: '#FFFFFF'\r\n        }\r\n      )\r\n\r\n      oswebLogo.width = oswebLogo.height = 150\r\n\r\n      oswebLogo.position.set(center.x - oswebLogo.width / 2, 50)\r\n      oswebTitle.position.set(center.x - oswebTitle.width / 2, 215)\r\n      versionInfo.position.set(center.x - versionInfo.width / 2, 250)\r\n      copyrightText.position.set(\r\n        center.x - copyrightText.width / 2,\r\n        center.y * 2 - copyrightText.height * 2\r\n      )\r\n\r\n      this._statusText = new Text('', {\r\n        fontFamily: 'Arial',\r\n        fontSize: 18,\r\n        fill: '#FFFFFF'\r\n      })\r\n      this._statusText.position.set(\r\n        center.x - this._statusText.width / 2,\r\n        center.y\r\n      )\r\n      this._introScreen.addChild(oswebLogo, oswebTitle,\r\n        versionInfo, copyrightText, this._statusText)\r\n\r\n      // Show the introduction screen.\r\n      this._runner._renderer.render(this._introScreen)\r\n    }\r\n  }\r\n\r\n  /** Check if the experiment must be clicked to start. */\r\n  _setupClickScreen (text) {\r\n    // Check if the experiment must be clicked to start.\r\n    if (this._click === true) {\r\n      // Update inroscreen.\r\n      if ((typeof text === \"undefined\") || (text.length === 0)) {\r\n        text = `\r\n    Your participation in this experiment should be anonymous.\r\n        Never provide any personal or sensitive information\r\n            (e.g. credit card or social security numbers).\r\n\r\n                    Click here with the mouse to begin.`\r\n      }\r\n      this._updateIntroScreen(text)\r\n\r\n      // Setup the mouse click response handler.\r\n      var clickHandler = function (event) {\r\n        // Remove the handler.\r\n        this._runner._renderer.view.removeEventListener('click', clickHandler)\r\n        this._runner._renderer.view.removeEventListener('touchstart', clickHandler)\r\n\r\n        // Finalize the introscreen elements.\r\n        this._clearIntroScreen()\r\n\r\n        // Start the task.\r\n        this._runner._initialize()\r\n      }.bind(this)\r\n\r\n      // Set the temporary mouse click.\r\n      this._runner._renderer.view.addEventListener('click', clickHandler, false)\r\n      this._runner._renderer.view.addEventListener('touchstart', clickHandler, false)\r\n    } else {\r\n      // Finalize the introscreen elements.\r\n      this._clearIntroScreen()\r\n\r\n      // Start the runner.\r\n      this._runner._initialize()\r\n    }\r\n  }\r\n\r\n  /** Clear the introscreen elements. */\r\n  _clearIntroScreen () {\r\n    // Update the introscreen elements.\r\n    if (this._active === true) {\r\n      // Clear the stage by temoving al the child elements.\r\n      for (var i = this._introScreen.children.length - 1; i >= 0; i--) {\r\n        this._introScreen.removeChild(this._introScreen.children[i])\r\n      }\r\n      this._runner._renderer.render(this._introScreen)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the progress bar used when loading the file pool.\r\n   * @param {Number} percentage - The percentage (0-100) of the progress bar.\r\n   */\r\n  _updateProgressBar (percentage) {\r\n    const center = this.screenCenter()\r\n\r\n    const xOuter = 200\r\n    const wOuter = 400\r\n    const hOuter = 20\r\n    const yOuter = center.y + 2 * hOuter\r\n\r\n    if (this._active === true) {\r\n      // Select the stage.\r\n      switch (percentage) {\r\n      case -1:\r\n        this._progressBarOuter = new Graphics()\r\n        this._progressBarOuter.lineStyle(1, 0xFFFFFF, 1)\r\n        this._progressBarOuter.drawRect(xOuter, yOuter, wOuter, hOuter)\r\n        this._progressBarOuter.x = 0\r\n        this._progressBarOuter.y = 0\r\n        this._progressBarInner = new Graphics()\r\n        this._progressBarInner.lineStyle(1, 0xFFFFFF, 1)\r\n        this._progressBarInner.drawRect(xOuter + 2, yOuter + 2, 1, hOuter - 4)\r\n        this._progressBarInner.x = 0\r\n        this._progressBarInner.y = 0\r\n        this._introScreen.addChild(this._progressBarInner)\r\n        this._introScreen.addChild(this._progressBarOuter)\r\n        this._runner._renderer.render(this._introScreen)\r\n        break\r\n      case 100:\r\n        this._introScreen.removeChild(this._progressBarInner)\r\n        this._introScreen.removeChild(this._progressBarOuter)\r\n        this._runner._renderer.render(this._introScreen)\r\n        break\r\n      default:\r\n        this._progressBarOuter.beginFill(0xFFFFFF)\r\n        this._progressBarOuter.drawRect(xOuter + 2, yOuter + 2, Math.round(percentage * (wOuter - 4)), hOuter - 4)\r\n        this._progressBarOuter.endFill()\r\n        this._runner._renderer.render(this._introScreen)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the introscreen elements.\r\n   * @param {String} text - The text which must be updated.\r\n   */\r\n  _updateIntroScreen (text) {\r\n    // Update the introscreen elements.\r\n    if (this._active === true) {\r\n      const center = this.screenCenter()\r\n      this._statusText.text = text.replace(/<br \\/>/g, '\\n')\r\n      this._statusText.position.set(\r\n        center.x - this._statusText.width / 2,\r\n        center.y\r\n      )\r\n      this._runner._renderer.render(this._introScreen)\r\n    }\r\n  }\r\n\r\n  /** Show the pause screen. */\r\n  _showPauseScreen () {\r\n    // Open Sesame is running, request subject to continue of to stop.\r\n    if (isFunction(this._runner._confirm)) {\r\n      this._runner._confirm('Esc key pressed, pausing experiment.',\r\n        'Please press ok the resume the experiment otherwise cancel to stop.',\r\n        this._onPauseScreenConfirm.bind(this), this._onPauseScreenCancel.bind(this))\r\n    }\r\n  }\r\n\r\n  /** Event handler to respond to dialog ok conmfirmation. */\r\n  _onPauseScreenConfirm () {\r\n    // Restore the old state.\r\n    this._runner._events._state = this._runner._events._statePrevious\r\n  }\r\n\r\n  /** Event handler to respond to dialog cancel confirmation. */\r\n  _onPauseScreenCancel () {\r\n    // Exit the experiment.\r\n    this._runner._finalize()\r\n  }\r\n}\r\n","/** Class representing a client session information collector. */\r\nexport default class Session {\r\n  /**\r\n     * Create an session object which stores information about the client system.\r\n     * @param {Object} runner - The runner class to which the session belongs.\r\n     */\r\n  constructor (runner) {\r\n    // Create and set private properties.\r\n    this._date = null // Date information container.\r\n    this._runner = runner // Parent runner attached to the session object.\r\n    this._session = null // Session information container.\r\n  }\r\n\r\n  /** Initialize the session. */\r\n  _initialize () {\r\n    // Update the loader text.\r\n    this._runner._screen._updateIntroScreen('Retrieving session information.')\r\n\r\n    // Get the session information.\r\n    this._getSessionInformation()\r\n  }\r\n\r\n  /** Retrieve session information from the client. */\r\n  _getSessionInformation () {\r\n    // Get the session information from the client system.\r\n    this._date = new Date()\r\n    this._session = {\r\n      browser: {\r\n        codename: navigator.appCodeName,\r\n        name: navigator.appName,\r\n        version: navigator.appVersion\r\n      },\r\n      date: {\r\n        startdate: ('0' + this._date.getDate()).slice(-2) + '-' + ('0' + this._date.getMonth()).slice(-2) + '-' + ('0' + this._date.getFullYear()).slice(-2),\r\n        starttime: ('0' + this._date.getHours()).slice(-2) + ':' + ('0' + this._date.getMinutes()).slice(-2) + ':' + ('0' + this._date.getSeconds()).slice(-2),\r\n        startdateUTC: ('0' + this._date.getUTCDate()).slice(-2) + '-' + ('0' + this._date.getUTCMonth()).slice(-2) + '-' + ('0' + this._date.getUTCFullYear()).slice(-2)\r\n      },\r\n      experiment: {\r\n        debug: 0,\r\n        parameters: 0,\r\n        pilot: 0,\r\n        taskname: 0,\r\n        taskversion: 0\r\n      },\r\n      screen: {\r\n        availableHeight: screen.availHeight,\r\n        availableWidth: screen.availWidth,\r\n        colorDepth: screen.colorDepth,\r\n        height: screen.height,\r\n        outerheight: window.outerheight,\r\n        outerwidth: window.outerwidth,\r\n        pixelDepth: screen.pixelDepth,\r\n        screenX: window.screenX,\r\n        screenY: window.screenY,\r\n        width: screen.width\r\n      },\r\n      system: {\r\n        os: navigator.platform\r\n      }\r\n    }\r\n  }\r\n}\r\n","import pako from 'pako'\nimport isFunction from 'lodash/isFunction'\nimport untar from 'js-untar'\n\n/**\n * FileStreamer makes it possible to asynchronously stream a file to another reader\n *\n * @class FileStreamer\n */\nclass FileStreamer {\n  constructor (file, chunkSize = 64 * 1024) {\n    this.file = file\n    this.offset = 0\n    this.chunkSize = chunkSize // bytes\n    this.rewind()\n  }\n\n  rewind () {\n    this.offset = 0\n  }\n\n  isEndOfFile () {\n    return this.offset >= this.getFileSize()\n  }\n\n  readBlock () {\n    const fileReader = new FileReader()\n    const blob = this.file.slice(this.offset, this.offset + this.chunkSize)\n\n    return new Promise((resolve, reject) => {\n      fileReader.onloadend = (event) => {\n        const target = (event.target)\n        if (target.error) {\n          return reject(target.error)\n        }\n\n        this.offset += target.result.byteLength\n\n        resolve({\n          data: target.result,\n          progress: Math.min(this.offset / this.file.size, 1)\n        })\n      }\n\n      fileReader.readAsArrayBuffer(blob)\n    })\n  }\n\n  getFileSize () {\n    return this.file.size\n  }\n}\n\n/**\n * Decompresses a cpmpressed experiment file\n *\n * @export\n * @param {File} zipfile The file to extract\n * @param {function} onProgress Function to be called during extraction progress. Receives proportion complete\n * @returns array of Files\n */\nexport async function decompress (zipfile, onProgress) {\n  const fs = new FileStreamer(zipfile)\n  const inflator = new pako.Inflate()\n  let block\n\n  while (!fs.isEndOfFile()) {\n    block = await fs.readBlock()\n    inflator.push(block.data, fs.isEndOfFile())\n    if (inflator.err) {\n      throw inflator.msg\n    }\n    if (isFunction(onProgress)) onProgress(block.progress)\n  }\n  return untar(inflator.result.buffer)\n}\n\n/**\n * Converts a File/Blob to a string representation\n *\n * @export\n * @param {File} inputFile The file to convert\n * @returns string\n */\nexport function readFileAsText (inputFile) {\n  const temporaryFileReader = new FileReader()\n\n  return new Promise((resolve, reject) => {\n    temporaryFileReader.onerror = () => {\n      temporaryFileReader.abort()\n      reject(new DOMException('Problem parsing input file.'))\n    }\n\n    temporaryFileReader.onload = () => {\n      resolve(temporaryFileReader.result)\n    }\n    temporaryFileReader.readAsText(inputFile)\n  })\n}\n\n/**\n * Returns current host as detected by browser\n *\n * @returns String\n */\nfunction getHost () {\n  return window.location.origin !== 'null' ? window.location.origin : 'http://nodejs.test'\n}\n\n/**\n * Checks if the passed string contains a valid URL\n *\n * @export\n * @param {String} str The string to check\n * @returns boolean\n */\nexport function parseUrl (str) {\n  try {\n    const host = getHost()\n    return new URL(str, host)\n  } catch (e) {\n    return false\n  }\n}\n","import WebFont from 'webfontloader'\r\nimport {\r\n  decompress,\r\n  readFileAsText,\r\n  parseUrl\r\n} from '../util/files'\r\nimport isString from 'lodash/isString'\r\nimport isObject from 'lodash/isObject'\r\nimport axios from 'axios'\r\n\r\n/** Class representing a information stream processor. */\r\nexport default class Transfer {\r\n  /**\r\n   * Create a transfer object used for streaming information.\r\n   * @param {Object} runner - The runner class to which the transfer belongs.\r\n   */\r\n  constructor (runner) {\r\n    // Create and set private properties.\r\n    this._runner = runner // Parent runner attached to the transfer object.\r\n  }\r\n\r\n  /**\r\n   * Read an osexp file.\r\n   * @param {Object|String} source - A file object or a String containing the experiment or a download URL.\r\n   */\r\n  async _readSource (source) {\r\n    // Check type of object.\r\n    if (!isString(source) && (!isObject(source) || source.constructor !== File)) {\r\n      throw new Error('No osexp source file defined.')\r\n    }\r\n\r\n    // This var will hold the OS script after parsing\r\n    let osScript\r\n\r\n    if (source.constructor === File) {\r\n      // Source is a local file.\r\n      try {\r\n        osScript = await this._readOsexpFromFile(source)\r\n      } catch (e) {\r\n        throw new Error(`Could not read local osexp, ${e}`)\r\n      }\r\n    } else if (isString(source)) {\r\n      // Check if the source string is an URL\r\n      const uri = parseUrl(source)\r\n\r\n      if (uri !== false) {\r\n        // Attempt to download and load the remote experiment\r\n        try {\r\n          const remoteFile = await this.fetch(uri.href)\r\n          osScript = await this._readOsexpFromFile(remoteFile)\r\n        } catch (e) {\r\n          throw new Error(`Could not read remote osexp, ${e}`)\r\n        }\r\n      } else {\r\n        try {\r\n          osScript = this._processScript(source)\r\n        } catch (e) {\r\n          throw new Error(`Could not read source string, ${e}\\n\\n${source}`)\r\n        }\r\n      }\r\n    }\r\n    // Read in and generate the webfonts\r\n    await this._readWebFonts()\r\n\r\n    return osScript\r\n  }\r\n\r\n  /**\r\n   * Reads in an osexp from a string\r\n   *\r\n   * @param {File|String} osexpFile The osexp to parse, can be a string or a File containing a string\r\n   * @returns boolean\r\n   * @memberof Transfer\r\n   */\r\n  async _readExpFile (osexp) {\r\n    if ([File, Blob].includes(osexp.constructor)) {\r\n      osexp = await readFileAsText(osexp)\r\n    }\r\n    return this._processScript(osexp)\r\n  }\r\n\r\n  /**\r\n   * Reading and extracting an osexp file from a file location.\r\n   * @param {Object} file - A file object containing the experiment.\r\n   */\r\n  async _readOsexpFromFile (osexpFile) {\r\n    try {\r\n      return await this._readExpFile(osexpFile)\r\n    } catch (e) {\r\n      this._runner._debugger.addMessage(`Could not read osexp file as plain text: ${e.message}.\\nFile is probably binary`)\r\n    }\r\n    // Reading and extracting an osexp file from a file location.\r\n    const files = await decompress(\r\n      osexpFile,\r\n      (progress) => this._runner._screen._updateProgressBar(progress)\r\n    )\r\n\r\n    // Find the script in the array of extracted files. Throw an error if it isn't found.\r\n    const expFileIndex = files.findIndex((item) => item.name === 'script.opensesame')\r\n    if (expFileIndex === -1) throw new Error('Could not locate experiment script')\r\n    // Pop the script out of the file array and proccess it\r\n    const expFile = files.splice(expFileIndex, 1)[0]\r\n    const script = await this._readExpFile(expFile.blob)\r\n\r\n    // According to the zlib convention followed by the pako library we use to decompress\r\n    // the osexp file, files have a type of 0, so filter these out.\r\n    const poolFiles = files.filter(\r\n      (item) => item.type === '0'\r\n    )\r\n    // Process the file pool items\r\n    await this._processOsexpPoolItems(poolFiles)\r\n    return script\r\n  }\r\n\r\n  /**\r\n   * Reads an osexp file from a remote server, if its type is indicated to be\r\n   * 'text/plain' (opposed to being zipped)\r\n   * @param  {string} url The url at which the osexp can be found\r\n   * @return {void}\r\n   */\r\n  async fetch (url) {\r\n    const response = await axios.get(url, {\r\n      responseType: 'blob',\r\n      onDownloadProgress: (event) => {\r\n        if (event.lengthComputable) {\r\n          this._runner._screen._updateProgressBar(event.loaded / event.total)\r\n        }\r\n      }\r\n    })\r\n    let res\r\n    if (/Edge/.test(navigator.userAgent)) {\r\n      res = new Blob([response.data])\r\n      res.name = 'downloaded.osexp'\r\n    } else {\r\n      res = new File([response.data], 'downloaded.osexp')\r\n    }\r\n    return res\r\n  }\r\n\r\n  /**\r\n   * Process an osexp script\r\n   * @param  {string} contents - The script contents\r\n   * @return {boolean} - True if script was successfully processed, false otherwise\r\n   */\r\n  _processScript (contents) {\r\n    if (contents.substr(0, 3) !== '---') {\r\n      throw new Error('Specified script file is not valid OpenSesame script')\r\n    }\r\n\r\n    // Disable the progressbar.\r\n    this._runner._screen._updateProgressBar(100)\r\n    // Set the script paramter.\r\n    // this._runner._script = contents\r\n    return contents\r\n  }\r\n\r\n  /**\r\n   * Asynchronously iterate over file pool files and generate items for them.\r\n   *\r\n   * @param {array} poolFiles The array containing file pool files\r\n   * @returns void\r\n   * @memberof Transfer\r\n   */\r\n  async _processOsexpPoolItems (poolFiles) {\r\n    // Async iterator that handles each file in the poolFiles array\r\n    const asyncIterator = {\r\n      currentIndex: 0,\r\n      next () { // All the action happens here\r\n        const currentFile = poolFiles[this.currentIndex]\r\n\r\n        // If currentFile is undefined, then the array has been depleted and all\r\n        // files have been processed. This ends the async iteration properly\r\n        if (!currentFile) {\r\n          return {\r\n            value: undefined,\r\n            done: true\r\n          }\r\n        }\r\n\r\n        // Generate the item.\r\n        const item = {\r\n          data: null,\r\n          folder: currentFile.name.match(/(.*)[/\\\\]/)[1] || '',\r\n          name: currentFile.name.replace(/^.*[\\\\/]/, '').replace(\r\n            /U\\+([0-9A-F]{4})/g, (whole, group1) => {\r\n              // Parse encoded characters back to their unicode counterparts\r\n              return String.fromCharCode(parseInt(group1, 16))\r\n            }\r\n          ),\r\n          size: currentFile.size,\r\n          type: 'undefined'\r\n        }\r\n\r\n        // Determine the file type and generate the appropriate osweb item\r\n        const ext = currentFile.name.substr(currentFile.name.lastIndexOf('.') + 1)\r\n        if (['jpg', 'jpeg', 'png', 'bmp'].includes(ext.toLowerCase())) {\r\n          // Create a new file pool mage item.\r\n          const img = new Image()\r\n          img.src = currentFile.getBlobUrl()\r\n          item.data = img\r\n          item.type = 'image'\r\n        } else if (['wav', 'ogg'].includes(ext.toLowerCase())) {\r\n          const ado = new Audio()\r\n          ado.src = currentFile.getBlobUrl()\r\n          item.data = ado\r\n          item.type = 'sound'\r\n        } else if (['ogv', 'mp4', 'm4v'].includes(ext.toLowerCase())) {\r\n          const ado = document.createElement('VIDEO')\r\n          ado.src = currentFile.getBlobUrl()\r\n          item.data = ado\r\n          item.type = 'video'\r\n        } else if (['csv','txt','md'].includes(ext.toLowerCase())) {\r\n          item.type = 'text'\r\n          currentFile.blob.text().then(text => (item.data = text))\r\n        }\r\n        // Increment the counter.\r\n        this.currentIndex++\r\n\r\n        return {\r\n          value: item,\r\n          done: false\r\n        }\r\n      },\r\n      // for-await calls this on whatever it's passed, so\r\n      // iterators tend to return themselves.\r\n      [Symbol.asyncIterator] () {\r\n        return this\r\n      }\r\n    }\r\n\r\n    // Iterate over the file pool items\r\n    for await (const item of asyncIterator) {\r\n      // Add the item to the virtual pool.\r\n      this._runner._pool.add(item)\r\n\r\n      // Update the progress bar.\r\n      this._runner._screen._updateProgressBar(asyncIterator.currentIndex / poolFiles.length)\r\n    }\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Read in webfonts\r\n   *\r\n   * @returns Promise\r\n   * @memberof Transfer\r\n   */\r\n  async _readWebFonts () {\r\n    // Update the introscreen\r\n    this._runner._screen._updateProgressBar(100)\r\n    this._runner._screen._updateIntroScreen('Retrieving required webfonts.')\r\n\r\n    return new Promise((resolve, reject) => {\r\n      // Load the required fonts using webfont.\r\n      WebFont.load({\r\n        google: {\r\n          families: ['Droid Sans', 'Droid Serif', 'Droid Sans Mono'],\r\n          urls: ['//fonts.googleapis.com/css?family=Droid Sans',\r\n            '//fonts.googleapis.com/css?family=Droid Serif',\r\n            '//fonts.googleapis.com/css?family=Droid Sans Mono'\r\n          ]\r\n        },\r\n        active: () => resolve(),\r\n        inactive: () => reject(new Error('Could not load webfonts'))\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Writing experiment result data to a location.\r\n   * @param {String} target - An addres to store result data.\r\n   * @param {Object} resultData - The result data itself to store.\r\n   */\r\n  _writeDataFile (target, resultData) {\r\n    // Check if the target and resultData are defined.\r\n    if ((target !== null) && (resultData !== null)) {\r\n      // Add the data as a form element.\r\n      var data = new FormData()\r\n      data.append('data', resultData.toString())\r\n\r\n      // Create the request.\r\n      var xhr = new XMLHttpRequest()\r\n      xhr.open('post', target + '?file=subject-' + this._runner._experiment.vars.subject_nr, true)\r\n\r\n      // Send the actual data.\r\n      return xhr.send(data)\r\n    }\r\n  }\r\n}\r\n","/** Class representing an item stack. */\r\nexport default class ItemStack {\r\n  /**\r\n   * Create an stack array for running items.\r\n   * @param {Object} runner - The runner to which the item stack belongs.\r\n   */\r\n  constructor (runner) {\r\n    // Create and set private properties.\r\n    this._items = [] // Container for all items.\r\n    this._runner = runner // Parent runner attached to the item stack class.\r\n  }\r\n\r\n  /** Clear the entire item stack. */\r\n  clear () {\r\n    // Clears the stack.\r\n    this._items = []\r\n  }\r\n\r\n  /**\r\n   * Push a new item onto the item stack.\r\n   * @param {Object} item - The item to add to the item stack.\r\n   * @param {String} phase - The phase in which the stack exists.\r\n   */\r\n  push (item, phase) {\r\n    // Create the stack item.\r\n    const stackItem = {\r\n      item: item,\r\n      phase: phase\r\n    }\r\n\r\n    // Push the item onto the stack.\r\n    this._items.push(stackItem)\r\n  }\r\n\r\n  /**\r\n   * Pops the last item from the stack.\r\n   * @return {Object} - The last added item from the stack.\r\n   */\r\n  pop () {\r\n    // Pops the last item from the stack.\r\n    return this._items.pop()\r\n  }\r\n}\r\n","// This itemClasses variable is a temporary solution. We should think of a simpler\r\n// method of converting string names (e.g. keyboard_response) to the associated\r\n// class names (e.g. KeyboardResponse), without relying on eval.\r\nimport {\r\n  itemClasses\r\n} from '../system/constants.js'\r\n\r\n/** Class representing an item store. */\r\nexport default class ItemStore {\r\n  /**\r\n   * Create an item store for all OpenSesame items.\r\n   * @param {Object} runner - The runner to which the item store belongs.\r\n   */\r\n  constructor (runner) {\r\n    // Set the class private properties.\r\n    this._items = {} // All the unique items in the item store.\r\n    this._runner = runner // Parent runner attached to the item store.\r\n  }\r\n\r\n  /** Clear all the items in the store. */\r\n  _clean_up () {\r\n    // Clear the items.\r\n    this._items = {}\r\n  }\r\n\r\n  /**\r\n   * Checks of the classname is defined within the osweb namespace.\r\n   * @param {String} className - name of the class to check.\r\n   * @return {Boolean} - True if the class is valid within the opsweb context.\r\n   */\r\n  _isClass (className) {\r\n    // Return true if the classname is found in the item classes.\r\n    return (className in itemClasses)\r\n  }\r\n\r\n  /**\r\n   * Add a new OpenSesame element to a sketchpad item.\r\n   * @param {String} type -type of the element to be created.\r\n   * @param {Object} sketchpad - sketchpad item to which the item belongs.\r\n   * @param {String} script - string definition of the ites.\r\n   * @return {Object} - The item which wass created.\r\n   */\r\n  _newElementClass (type, sketchpad, string) {\r\n    // Create the element.\r\n    var element = new itemClasses[type](sketchpad, string)\r\n\r\n    // Return the element\r\n    return element\r\n  }\r\n\r\n  /**\r\n   * Add a new OpenSesame item to the experiment.\r\n   * @param {String} type -type of the item to be created.\r\n   * @param {Object} experiment - experiment item to which the item belongs.\r\n   * @param {String} name - name of the item to be created.\r\n   * @param {String} script - string definition of the ites.\r\n   * @return {Object} - The item which was created.\r\n   */\r\n  _newItemClass (type, experiment, name, script) {\r\n    // Create the element.\r\n    var element = new itemClasses[type](experiment, name, script)\r\n\r\n    // Set the type of the item.\r\n    element.type = type\r\n\r\n    // Return the element\r\n    return element\r\n  }\r\n\r\n  /**\r\n   * Add a new OpenSesame widget to the experiment.\r\n   * @param {String} type -type of the widget to be created.\r\n   * @param {Object} form - form to which the widget belongs.\r\n   * @param {String} variables - variabled belonging to the widget.\r\n   * @return {Object} - The widget which was created.\r\n   */\r\n  _newWidgetClass (type, form, variables) {\r\n    // Create the widget.\r\n    var widget = new itemClasses[type + '_widget'](form, variables)\r\n\r\n    // Return the element\r\n    return widget\r\n  }\r\n\r\n  /**\r\n   * Executes the prepare and the run phase of an item.\r\n   * @param {String} name - name of the item to prepare and run\r\n   * @param {String} parent - parent of the item.\r\n   */\r\n  execute (name, parent) {\r\n    // Prepare the item.\r\n    this.prepare(name, parent)\r\n    // Remove the prepare phase call of the item from the stack\r\n    this._runner._itemStack.pop()\r\n    // Run the item.\r\n    this.run(name, parent)\r\n  }\r\n\r\n  /**\r\n   * Create an array with all the items in the store.\r\n   * @return {Array} - An array containing all the items.\r\n   */\r\n  items () {\r\n    // Create a list o keys.\r\n    var items = []\r\n    for (var key in this._items) {\r\n      items.push([key, this._items[key]])\r\n    }\r\n\r\n    // Returns a list of item names.\r\n    return items\r\n  }\r\n\r\n  /**\r\n   * Create an array with all the names of the items in the store.\r\n   * @return {Array} - An array containing all the names.\r\n   */\r\n  keys () {\r\n    // Create a list o keys.\r\n    var keys = []\r\n    for (var key in this._items) {\r\n      keys.push(key)\r\n    }\r\n\r\n    // Returns a list of item names.\r\n    return keys\r\n  }\r\n\r\n  /**\r\n   * Create a new OpenSesame item and add it to the item store.\r\n   * @param {String} type - type of item to add.\r\n   * @param {String} name - unique name of the item to add.\r\n   * @param {String} script - script containing definitions of the item.\r\n   */\r\n  newItem (type, name, script) {\r\n    // Check if the element is part of the osweb name space\r\n    if (this._isClass(type) === true) {\r\n      // Add the new item as property of items.\r\n      this._items[name] = this._newItemClass(type, this._runner._experiment, name, script)\r\n\r\n      return this._items[name]\r\n    } else {\r\n      // Unknown class definition, show error message.\r\n      this._runner._debugger.addError('The item \"' + type + '\" is not yet supported by osweb', {\r\n        notify: true,\r\n        url: 'https://osdoc.cogsci.nl/manual/osweb/osweb/#supported-functionality'\r\n      })\r\n      this._runner.exit()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the prepare phase of an item, and updates the item stack.\r\n   * @param {String} name - name of the item to prepare.\r\n   * @param {String} parent - parent of the item.\r\n   */\r\n  prepare (name, parent) {\r\n    // Add item to the stack.\r\n    this._runner._itemStack.push(name, 'prepare')\r\n\r\n    // Prepare the item.\r\n    this._items[name]._parent = parent\r\n    this._items[name].prepare()\r\n  }\r\n\r\n  /**\r\n   * Executes the run phase of an item, and updates the item stack.\r\n   * @param {String} name - name of the item to run.\r\n   * @param {String} pParent - parent of the item.\r\n   */\r\n  run (name, parent) {\r\n    // Set the current and its parent item.\r\n    this._runner._events._currentItem = this._items[name]\r\n    this._runner._events._currentItem._parent = parent\r\n\r\n    // Executes the run phase of an item, and updates the item stack.\r\n    this._runner._itemStack.push(name, 'run')\r\n    this._items[name].run()\r\n  }\r\n\r\n  /**\r\n   * Create a valid name for an item within the OpenSesame context.\r\n   * @param {String} itemType - type of the item for which a name must be build.\r\n   * @param {String} suggestion - An suggestion how to build up the name.\r\n   * @return {String} - A valid string name for the given item.\r\n   */\r\n  valid_name (itemType, suggestion) {\r\n    // Check the optional parameters.\r\n    suggestion = (typeof suggestion === 'undefined') ? null : suggestion\r\n\r\n    let name\r\n    if (suggestion === null) {\r\n      name = 'new_' + itemType\r\n    } else {\r\n      name = this._runner._experiment.syntax.sanitize(suggestion, true, false)\r\n    }\r\n\r\n    // Create a unique name.\r\n    var i = 1\r\n    var uniqueName = name\r\n    while (Object.prototype.hasOwnProperty.call(this._items, uniqueName) === true) {\r\n      uniqueName = name + '_' + String(i)\r\n      i++\r\n    }\r\n\r\n    // Return function result\r\n    return uniqueName\r\n  }\r\n\r\n  /**\r\n   * Create an array with all the values (items) in the store.\r\n   * @return {Array} - An array containing all the items.\r\n   */\r\n  values () {\r\n    // Create a list o keys.\r\n    var values = []\r\n    for (var key in this._items) {\r\n      values.push(this._items[key])\r\n    }\r\n\r\n    // Returns a list of item names.\r\n    return values\r\n  }\r\n}\r\n","/** Class representing a file pool. */\r\nexport default class FilePoolStore {\r\n  /**\r\n   * Create a file store object for all stimuli files.\r\n   * @param {Object} runner - The runner to which the file store belongs.\r\n   */\r\n  constructor (runner) {\r\n    // Create and set private properties.\r\n    this._items = [] // Container for all pool items.\r\n    this._runner = runner // Parent runner attached to the file pool.\r\n  }\r\n\r\n  /** Clear all the items in the store. */\r\n  _clean_up () {\r\n    // Clear the items.\r\n    this._items = []\r\n  }\r\n\r\n  /**\r\n   * General function for adding an item to the pool.\r\n   * @param {Object} item - The item which is added to the pool.\r\n   */\r\n  add (item, new_name) {\r\n    // Check parameter new_name.\r\n    new_name = (typeof new_name === 'undefined') ? null : new_name\r\n\r\n    // Set the new name of the item.\r\n    if (new_name !== null) {\r\n      item.name = new_name\r\n    }\r\n\r\n    // Add the item to the pool.\r\n    this._items.push(item)\r\n\r\n    // Link the item as property\r\n    this[item.name] = item\r\n  }\r\n\r\n  /**\r\n   * Should return the fallback folder bunt osweb this is not functional.\r\n   * @return {null} - always null due to the nature of osweb.\r\n   */\r\n  fallback_folder () {\r\n    // Always returns null because this function is not possible.\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Create an array with all the files in the store.\r\n   * @return {Array} - An array containing all the files.\r\n   */\r\n  files () {\r\n    // Create a list o keys.\r\n    var files = []\r\n    for (var i = 0; i < this._items.length; i++) {\r\n      files.push(this._items[i])\r\n    }\r\n\r\n    // Returns a list of item names.\r\n    return files\r\n  }\r\n\r\n  /**\r\n   * Renames a file in the pool folder.\r\n   * @param {String} old_path - The olod file name.\r\n   * @param {String} new_path - The new file name.\r\n   */\r\n  rename (old_path, new_path) {\r\n    for (var i = 0; i < this._items.length; i++) {\r\n      // Check for the old_name.\r\n      if (this._items[i].name === old_path) {\r\n        // Set the new property name.\r\n        this[new_path] = this._items[i]\r\n\r\n        // Remove the old property name.\r\n        delete this[old_path]\r\n\r\n        // Set the new name.\r\n        this._items[i].name = new_path\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates and returns the total size in bytes of all thje fioles.\r\n   * @return {Number} - The size of all files in bytes.\r\n   */\r\n  size () {\r\n    // Create a list of keys.\r\n    var size = 0\r\n    for (var i = 0; i < this._items.length; i++) {\r\n      size = size + this._items[i].size\r\n    }\r\n\r\n    // Returns a list of item names.\r\n    return size\r\n  }\r\n}\r\n","import {\r\n  isNumber,\r\n  toNumber,\r\n  isObject,\r\n  isString\r\n} from 'lodash'\r\n\r\n/** Class representing a syntax checker. */\r\nexport default class Syntax {\r\n  /**\r\n   * Create a syntax checker within OpenSesame.\r\n   * @param {Object} runner - The runner to which the syntax checker belongs.\r\n   */\r\n  constructor (runner) {\r\n    // Create and set private properties.\r\n    this._runner = runner // Parent runner attached to the syntax class.\r\n    this.isNumber = isNumber // attach lodash function to class;\r\n  }\r\n\r\n  /**\r\n   * Compile a os condition for further processing.\r\n   * @param {String} cnd - The condition to compile.\r\n   * @param {Boolean} bytecode - The condition is converted to a python AST tree.\r\n   * @return {String} - The compiled condition.\r\n   */\r\n  compile_cond (cnd, bytecode) {\r\n    // Check for conditional paramters.\r\n    bytecode = (typeof bytecode === 'undefined') ? true : bytecode\r\n\r\n    if (cnd.toLowerCase() === 'always') {\r\n      return true\r\n    } else if (cnd.toLowerCase() === 'never') {\r\n      return false\r\n    } else {\r\n      if (cnd[0] === '=') {\r\n        cnd = cnd.substr(1)\r\n      } else {\r\n        cnd = this.remove_quotes(cnd)\r\n        // Scan for literals (strings, ßnumbers, etc).\r\n        cnd = cnd.replace(/(?!(?:and|or|not)\\b)(?:\".*?\"|'.*?'|\\[(?:\\w+?|=.+)\\]|\\b\\w+\\b)/g, (match, offset, string) => {\r\n          if (string[offset] === '[' && string[offset + match.length - 1] === ']') {\r\n            // Check if match is a variable.\r\n            if (string[offset - 1] === '\\\\' && string[offset - 2] !== '\\\\') {\r\n              // Check if the current match is escaped, and simpl\\w+?|=.+y return it untouched if so.\r\n              return `\"${match}\"`\r\n            }\r\n            // Check if the variable contains a Python expression\r\n            if (match[1] === '=') {\r\n              const expression = match.substring(2, match.length - 1)\r\n              const ast = this._runner._pythonParser._parse(expression)\r\n              return this._runner._pythonParser._run_statement(ast)\r\n            }\r\n\r\n            // Return the var. notation otherwise\r\n            const content = match.substring(1, match.length - 1)\r\n            return `var.${content}`\r\n          } else if (['\"', '\\''].includes(string[offset]) &&\r\n            string[offset] === string[offset + match.length - 1]) {\r\n            // Check if match is between quotes. Don't do anything then\r\n            return match\r\n          } else if (!Number.isNaN(Number(match))) {\r\n            return Number(match)\r\n          } else {\r\n            return `\"${match}\"`\r\n          }\r\n        })\r\n\r\n        // Handle operators.\r\n        cnd = cnd.replace(/([^!<>=\\-+*])(=)([^=])/g, '$1==$3')\r\n      }\r\n    }\r\n    if (bytecode === true) {\r\n      return this._runner._pythonParser._parse(cnd)\r\n    } else {\r\n      return cnd\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts a string to a float or integer if possible.\r\n   * @param {String|Number} value -The variable to convert to a number.\r\n   * @return {String|Number} - An number or float if variable could be converted, original value otherwise.\r\n   */\r\n  convert_if_numeric (value) {\r\n    var result = Number(value)\r\n    return Number.isNaN(result) ? value : result\r\n  }\r\n\r\n  /**\r\n   * Counts the quotes occuring inside the provided string.\r\n   * @param {String} line - The string line to count the quotes in.\r\n   * @return {Number} - The number of quotes counted.\r\n   */\r\n  count_quotes (line) {\r\n    var res = 0\r\n    var in_entity = false\r\n    for (var i = 0; i < line.length; i++) {\r\n      if ((line[i] === '\\\\' && !in_entity) || in_entity) { // reverse the flag\r\n        in_entity = !in_entity\r\n      } else if (line[i] === '\"' && !in_entity) { // an unescaped \"\r\n        res += 1\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  /**\r\n   * Evaluate a given text with optional variable definitions.\r\n   * @param {Boolean|Number|Object|String} txt - The text to evaluate.\r\n   * @param {Object} vars - The variables used for evaluation.\r\n   * @param {Boolean} addQuotes - The add quotes toggle.\r\n   * @return {Boolean|Number|Object|String} - The result of the evaluated text.\r\n   */\r\n  eval_text (text, vars, addQuotes = false) {\r\n    // if pTxt is an object then it is a parsed python expression.\r\n    if (isObject(text)) return this._runner._pythonParser._run_statement(text)\r\n    // if pTxt is already a number simply return it\r\n    if (isNumber(text)) return text\r\n    // Try to convert text to a number. If this succeeds return it.\r\n    if ((text !== '') && !isNaN(toNumber(text))) return toNumber(text)\r\n    text = this.escapeBrackets(text)\r\n    // First, parse the regular variables. These should be parsed recursively\r\n    // to allow for [[nested]variables].\r\n    const reNormal = /\\[(?!=)(\\w+?)\\]/g\r\n    while (text.search(reNormal) >= 0) {\r\n      text = text.replace(reNormal, (match, content, offset, string) => {\r\n        content = this.unescapeBrackets(content)\r\n        let value\r\n        try {\r\n          if ((typeof vars === 'undefined') || (vars === null) || (typeof vars[content] === 'undefined')) {\r\n            value = this._runner._experiment.vars[content]\r\n          } else {\r\n            value = vars[content]\r\n          }\r\n          // Value could still be an expression, so evaluate again\r\n          if (typeof value === 'undefined') {\r\n            throw new ReferenceError(`Variable '${content}' not present in var store`)\r\n          }\r\n          if (isString(value)) {\r\n            if (value !== '') {\r\n              value = this.eval_text(value, vars, addQuotes)\r\n            }\r\n          }\r\n        } catch (err) {\r\n          this._runner._debugger.addError(`Could not resolve variable '${content}': ${err.message}`)\r\n          throw err\r\n        }\r\n        if (addQuotes === true) {\r\n          // Temporary hack for string types.\r\n          return isString(value) ? `\"${value}\"` : value\r\n        }\r\n        return value\r\n      })\r\n    }\r\n    // Next, parse the inline-Python defintions. Those should only be parsed\r\n    // once, not recursively, because they may contain literal [brackets]\r\n    const rePython = /\\[=(.+?)\\]/g\r\n    text = text.replace(rePython, (match, content, offset, string) => {\r\n        // Check if contents of [] start with an =. In this case they should be\r\n        // evaluated as a Python statement\r\n        content = this.unescapeBrackets(content)\r\n        const ast = this._runner._pythonParser._parse(content)\r\n        return this._runner._pythonParser._run_statement(ast)\r\n    })    \r\n    // Try to convert the result to a number again. If this succeeds return it.\r\n    if (text !== '') {\r\n      const nr = toNumber(text)\r\n      if (!isNaN(nr)) return nr\r\n    }\r\n    // Check if content has additional quotes\r\n    return this.strip_slashes(this.unescapeBrackets(text))\r\n  }\r\n\r\n  /**\r\n   * Wraps and escapes a text so that it can safely be embedded in a\r\n        command string. For example:\r\n        He said: \"hi\"\r\n        would become:\r\n        \"He said: \\\"hi\\\"\"\r\n   * @param  {string} s The string to wrap\r\n   * @return {string}   The wrapped string\r\n   */\r\n  safe_wrap (s) {\r\n    // If s is a number, return untouched.\r\n    if (!isNumber(s)) {\r\n      // see if there are any non-alphanumeric characters.\r\n      // Wrap the value in quotes if so.\r\n      if (/[^a-z0-9_]/i.test(s)) {\r\n        s = '\"' + this.add_slashes(s) + '\"'\r\n      }\r\n    } else {\r\n      s = Number(s)\r\n    }\r\n    return s\r\n  }\r\n\r\n  /**\r\n   * Add escape slashes to the given string\r\n   * @param  {string} str The string to escape.\r\n   * @return {string}     The escaped string.\r\n   */\r\n  add_slashes (str) {\r\n    return str.replace(/\\\\/g, '\\\\\\\\')\r\n      // eslint-disable-next-line no-control-regex\r\n      .replace(/\\u0008/g, '\\\\b')\r\n      .replace(/\\t/g, '\\\\t')\r\n      .replace(/\\n/g, '\\\\n')\r\n      .replace(/\\f/g, '\\\\f')\r\n      .replace(/\\r/g, '\\\\r')\r\n      .replace(/'/g, '\\\\\\'')\r\n      .replace(/\"/g, '\\\\\"')\r\n  }\r\n\r\n  /**\r\n   * Strip escape slashes from the given string.\r\n   * @param {String} line - The string to strip from escape backslashes\r\n   * @return {String} - The stripped string.\r\n   */\r\n  strip_slashes (line) {\r\n    // Negative lookbehinds require ECMA2018, therefore we fall\r\n    // back to a more clunky technique\r\n    // return line.replace(/(?<!\\\\)\\\\(?=['\"\\\\])/mg, '')\r\n    return line.replace(/\\\\(?=['\"])/mg, '').replace(/\\\\\\\\/mg, '\\\\')\r\n  }\r\n  \r\n  /**\r\n   * Removes tab indentation from a script, if all lines are indented by a\r\n   * single tab.\r\n   * @param {String} script - A script\r\n   * @return {String} - A dedented script\r\n   */\r\n  dedent (script) {\r\n    const lines = script.split('\\n')\r\n    let dedented = []\r\n    for (const line of lines) {\r\n      if (line[0] !== '\\t') {\r\n        return script\r\n      }\r\n      dedented.push(line.slice(1))\r\n    }\r\n    return dedented.join('\\n')\r\n  }\r\n  \r\n  /**\r\n   * Extracts all multineline variable definitions from an OpenSesame script\r\n   * @param {String} script - The OpenSesame script of an item\r\n   * @return {Array} - An array of key, value mappings\r\n   */\r\n  parse_multiline_vars (script) {\r\n    const pattern = /__(\\w+)__\\n(.*?)\\n__end__/gms\r\n    let match\r\n    let vars = []\r\n    while ((match = pattern.exec(script)) !== null) {\r\n      vars[match[1]] = match[2]\r\n    }\r\n    return vars\r\n  }\r\n\r\n  /**\r\n   * Parses an instruction line of OpenSesame script\r\n   * @param {String} line - The line to parse\r\n   * @return {Array} - An array with command, list of arguments and an object with keyword arguments.\r\n   */\r\n  parse_cmd (line) {\r\n    // Check if quoted strings are properly closed.\r\n    if (this.count_quotes(line) % 2 !== 0) {\r\n      // Unequal number of quotes detected. Can't be right.\r\n      this._runner._debugger.addError('Invalid script definition, parsing error: ' + \" '\" + line + \"'\")\r\n    }\r\n\r\n    // Split the string line.\r\n    var tokens = this.split(line)\r\n    var cmd = tokens.shift()\r\n    var args = []\r\n    var kwargs = {}\r\n\r\n    for (var i = 0; i < tokens.length; i++) {\r\n      var value = tokens[i]\r\n      // Monster regex, splits into key/value pair.\r\n      let parsed = value.split(/(?:(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"))|(?:(\\w+)=(?:(?:(-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)|(\\w+))|(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")))/gm).filter(Boolean)\r\n      // This is a horrifying hack to deal with the fact that the regular\r\n      // expression above is not unicode-safe. This means that a single\r\n      // unquoted word is not seen as a word when it doesn't consist of ascii\r\n      // characters (e.g. text=λάθος). See also:\r\n      // - https://github.com/open-cogsci/osweb/issues/49\r\n      if (parsed.length === 1 && parsed[0].startsWith('text=')) {\r\n        parsed = ['text', parsed[0].slice(5)]\r\n      }\r\n      // parsed will have length 1 if the variable has no keyword, and will be\r\n      // of length 2 (split over the = symbol) if the variable had a keyword\r\n      if (parsed.length < 2) {\r\n        args.push(this.convert_if_numeric(this.sanitize(parsed[0])))\r\n      } else {\r\n        kwargs[parsed[0]] = this.convert_if_numeric(this.sanitize(parsed[1]))\r\n      }\r\n    }\r\n    return [cmd, args, kwargs]\r\n  }\r\n\r\n  create_cmd (cmd, args, kwargs) {\r\n    var result = cmd\r\n    if (typeof (args) !== 'undefined' && args instanceof Array && args.length > 0) {\r\n      for (var i = 0; i < args.length; i++) {\r\n        result += ' ' + this.safe_wrap(args[i])\r\n      }\r\n    }\r\n    if (typeof (kwargs) !== 'undefined' && args instanceof Object) {\r\n      for (var key in kwargs) {\r\n        result += ' ' + key + '=' + this.safe_wrap(kwargs[key])\r\n      }\r\n    }\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Remove additional quotes from a string line.\r\n   * @param {String} line - The string width additional quotes.\r\n   * @return {String} - Updated string.\r\n   */\r\n  remove_quotes (line) {\r\n    if (line === '\"\"') {\r\n      return ''\r\n    } else if ((line[0] === '\"') && (line[line.length - 1] === '\"')) {\r\n      return line.slice(1, line.length - 1)\r\n    } else if ((line[0] === \"'\") && (line[line.length - 1] === \"'\")) {\r\n      return line.slice(1, line.length - 1)\r\n    } else {\r\n      return line\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove invalid characters (notably quotes) from the string.\r\n   * @param {String} line - The string to restrecut.\r\n   * @param {Boolean} strict - If true use strict conversion (not implemented yet).\r\n   * @param {Boolean} allowVars -If true allow variable definitions in the string (not implemented yet).\r\n   * @return {String} - The restructured string.\r\n   */\r\n  sanitize (line, strict, allowVars) {\r\n    // Replace quotes.\r\n    line = line.replace(/^\"(.+(?=\"$))\"$/, '$1')\r\n\r\n    // Replace slashes and return result.\r\n    return this.strip_slashes(line)\r\n  }\r\n\r\n  /**\r\n   * Return an array with tokens ignoring whitespaces within.\r\n   * @param {String} line - line the line to split in tokens\r\n   * @return {Array} - The list of tokens\r\n   */\r\n  split (line) {\r\n    var result = line.match(/(?:[^\\s\"]+|\"[^\"]*\")+/g)\r\n    return (result !== null) ? result : []\r\n  }\r\n\r\n  /**\r\n   * Replaces all escaped brackets by a placeholder string of the format\r\n   * `%%OPEN:1:%%`\r\n   * @param {String} text - The text to escape.\r\n   * @return {String} - The escaped text.\r\n   */\r\n  escapeBrackets (text) {\r\n    const result = text.replace(/\\\\+[[\\]]/g, (match, content, offset, str) => {\r\n      const NBrackets = match.length - 1\r\n      if (NBrackets % 2 === 1) {\r\n        const chartype = match[match.length - 1] === '[' ? 'OPEN' : 'CLOSE'\r\n        return `%%${chartype}:${NBrackets}:%%`\r\n      }\r\n      return match\r\n    })\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Replaces all placeholder strings by escaped brackets.\r\n   * `%%OPEN:1:%%`\r\n   * @param {String} text - The text to unescape.\r\n   * @return {String} - The unescaped text.\r\n   */\r\n  unescapeBrackets (text) {\r\n    const result = text.replace(/%%(OPEN|CLOSE):\\d+:%%/g, (match, content, offset, str) => {\r\n      const chartype = match.substr(2, 4) === 'OPEN' ? '[' : ']'\r\n      const i1 = match.indexOf(':') + 1\r\n      const i2 = match.lastIndexOf(':')\r\n      const nBrackets = parseInt(match.substr(i1, i2 - i1))\r\n      return Array(nBrackets).join('\\\\') + chartype\r\n    })\r\n    return result\r\n  }\r\n}\r\n","import filbert from 'filbert'\r\n\r\n/** Class implementing a python math library. */\r\nexport default class PythonMath {\r\n  /**\r\n     * Create a python AST runner.\r\n     * @param {Object} runner - The runner to which the library belongs.\r\n     */\r\n  constructor (runner) {\r\n    // Set class parameter properties.\r\n    this._runner = runner // Parent runner attached to the library.\r\n\r\n    // Set class properties.\r\n    this.e = Math.E\r\n    this.pi = Math.PI\r\n  }\r\n\r\n  /** Initialization phase of the python_math class. */\r\n  _initialize () {\r\n    // Insert math library methods into the python interpreter.\r\n    filbert.pythonRuntime.imports.math = {}\r\n    filbert.pythonRuntime.imports.math.ceil = this.ceil\r\n    filbert.pythonRuntime.imports.math.copysign = this.copysign\r\n    filbert.pythonRuntime.imports.math.fabs = this.fabs\r\n    filbert.pythonRuntime.imports.math.factorial = this.factorial\r\n    filbert.pythonRuntime.imports.math.floor = this.floor\r\n    filbert.pythonRuntime.imports.math.fmod = this.fmod\r\n    filbert.pythonRuntime.imports.math.frexp = this.frexp\r\n    filbert.pythonRuntime.imports.math.fsum = this.fsum\r\n    filbert.pythonRuntime.imports.math.acos = this.acos\r\n    filbert.pythonRuntime.imports.math.asin = this.asin\r\n    filbert.pythonRuntime.imports.math.atan = this.atan\r\n    filbert.pythonRuntime.imports.math.atan2 = this.atan2\r\n    filbert.pythonRuntime.imports.math.cos = this.cos\r\n    filbert.pythonRuntime.imports.math.hypot = this.hypot\r\n    filbert.pythonRuntime.imports.math.sin = this.sin\r\n    filbert.pythonRuntime.imports.math.tan = this.tan\r\n    filbert.pythonRuntime.imports.math.e = this.e\r\n    filbert.pythonRuntime.imports.math.pi = this.pi\r\n  }\r\n\r\n  /** Import 'ceil' function for osweb script. */\r\n  ceil (x) {\r\n  }\r\n\r\n  /** Import 'copysign' function for osweb script. */\r\n  copysign (x, y) {\r\n  }\r\n\r\n  /** Import 'fabs' function for osweb script. */\r\n  fabs (x) {\r\n  }\r\n\r\n  /** Import 'factorial' function for osweb script. */\r\n  factorial (x) {\r\n  }\r\n\r\n  /** Import 'floor' function for osweb script. */\r\n  floor (x) {\r\n    return Math.floor(x)\r\n  }\r\n\r\n  /** Import 'fmod' function for osweb script. */\r\n  fmod (x, y) {\r\n  }\r\n\r\n  /** Import 'frexp' function for osweb script. */\r\n  frexp (x) {\r\n  }\r\n\r\n  /** Import 'fsum' function for osweb script. */\r\n  fsum (iterable) {\r\n  }\r\n\r\n  /** Import 'acos' function for osweb script. */\r\n  acos (x) {\r\n    return Math.acos(x)\r\n  }\r\n\r\n  /** Import 'asin' function for osweb script. */\r\n  asin (x) {\r\n    return Math.asin(x)\r\n  }\r\n\r\n  /** Import 'atan' function for osweb script. */\r\n  atan (x) {\r\n    return Math.atan(x)\r\n  }\r\n\r\n  /** Import 'atan2' function for osweb script. */\r\n  atan2 (y, x) {\r\n    return Math.atan2(y, x)\r\n  }\r\n\r\n  /** Import 'cos' function for osweb script. */\r\n  cos (x) {\r\n    return Math.cos(x)\r\n  }\r\n\r\n  /** Import 'hypot' function for osweb script. */\r\n  hypot (x, y) {\r\n  }\r\n\r\n  /** Import 'sin' function for osweb script. */\r\n  sin (x) {\r\n    return Math.sin(x)\r\n  }\r\n\r\n  /** Import 'tan' function for osweb script. */\r\n  tan (x) {\r\n    return Math.tan(x)\r\n  }\r\n}\r\n","import filbert from 'filbert'\r\nimport Canvas from '../backends/canvas.js'\r\n\r\n/** Class implementing a python opensesame library. */\r\nexport default class PythonOpenSesame {\r\n  /**\r\n     * Create a python AST runner.\r\n     * @param {Object} runner - The runner to which the library belongs.\r\n     */\r\n  constructor (runner) {\r\n    // Set class parameter properties.\r\n    this._runner = runner // Parent runner attached to the library.\r\n  }\r\n\r\n  /** Initialization phase of the python_library class. */\r\n  _initialize () {\r\n    this._objects = {}\r\n\r\n    // Insert clock class into the python interpreter.\r\n    filbert.pythonRuntime.imports.clock = {}\r\n    filbert.pythonRuntime.imports.clock.sleep = this._runner._experiment.clock.sleep\r\n    filbert.pythonRuntime.imports.clock.time = this._runner._experiment.clock.time\r\n\r\n    // Insert log class into the python interpreter.\r\n    filbert.pythonRuntime.imports.log = {}\r\n    filbert.pythonRuntime.imports.log.close = this._runner._experiment._log.close\r\n    filbert.pythonRuntime.imports.log.open = this._runner._experiment._log.open\r\n    filbert.pythonRuntime.imports.log.write = this._runner._experiment._log.write\r\n    filbert.pythonRuntime.imports.log.write_vars = this._runner._experiment._log.write_vars\r\n\r\n    // Insert var class into the python interpreter.\r\n    filbert.pythonRuntime.imports.var = this._runner._experiment.vars\r\n    filbert.pythonRuntime.imports.var.get = this._runner._experiment.vars.get\r\n    filbert.pythonRuntime.imports.var.has = this._runner._experiment.vars.has\r\n    filbert.pythonRuntime.imports.var.set = this._runner._experiment.vars.set\r\n    filbert.pythonRuntime.imports.var.unset = this._runner._experiment.vars.unset\r\n\r\n    // Insert general opensesame methods into the python interpreter.\r\n    filbert.pythonRuntime.functions.reset_feedback = this._runner._experiment.reset_feedback\r\n    filbert.pythonRuntime.functions.set_subject_nr = this._runner._experiment.set_subject\r\n    filbert.pythonRuntime.functions.canvas = this.canvas\r\n    filbert.pythonRuntime.functions.copy_sketchpad = this.copy_sketchpad\r\n    filbert.pythonRuntime.functions.keyboard = this.keyboard\r\n    filbert.pythonRuntime.functions.mouse = this.mouse\r\n    filbert.pythonRuntime.functions.pause = this.pause\r\n    filbert.pythonRuntime.functions.set_subject_nr = this.set_subject_nr\r\n    filbert.pythonRuntime.functions.sometimes = this.sometimes\r\n    filbert.pythonRuntime.functions.synth = this.synth\r\n    filbert.pythonRuntime.functions.xy_circle = this.xy_circle\r\n    filbert.pythonRuntime.functions.xy_distance = this.xy_distance\r\n    filbert.pythonRuntime.functions.xy_from_polar = this.xy_from_polar\r\n    filbert.pythonRuntime.functions.xy_grid = this.xy_grid\r\n    filbert.pythonRuntime.functions.xy_random = this.xy_random\r\n    filbert.pythonRuntime.functions.xy_to_polar = this.xy_to_polar\r\n  }\r\n\r\n  /** Import 'canvas' function for osweb script. */\r\n  canvas (auto_prepare, style_args) {\r\n    return new Canvas(this._runner._experiment, auto_prepare, style_args)\r\n  }\r\n\r\n  /** Import 'copy_sketchpad' function for osweb script. */\r\n  copy_sketchpad (name) {\r\n  }\r\n\r\n  /** Import 'keyboard' function for osweb script. */\r\n  keyboard (resp_args) {\r\n  }\r\n\r\n  /** Import 'mouse' function for osweb script. */\r\n  mouse (resp_args) {\r\n  }\r\n\r\n  /** Import 'pause' function for osweb script. */\r\n  pause (test) {\r\n  }\r\n\r\n  /** Import 'sampler' function for osweb script. */\r\n  sampler (src, playback_args) {\r\n  }\r\n\r\n  /** Import 'set_response' function for osweb script. */\r\n  set_response (response, response_time, correct) {\r\n  }\r\n\r\n  /** Import 'sometimes' function for osweb script. */\r\n  sometimes (p) {\r\n  }\r\n\r\n  /** Import 'synth' function for osweb script. */\r\n  synth (osc, freq, length, attack, decay) {\r\n  }\r\n\r\n  /** Import 'xy_circle' function for osweb script. */\r\n  xy_circle (n, rho, phi0, pole) {\r\n  }\r\n\r\n  /** Import 'xy_distance' function for osweb script. */\r\n  xy_distance (x1, y1, x2, y2) {\r\n  }\r\n\r\n  /** Import 'xy_from_polar' function for osweb script. */\r\n  xy_from_polar (rho, phi, pole) {\r\n  }\r\n\r\n  /** Import 'xy_grid' function for osweb script. */\r\n  xy_grid (n, spacing, pole) {\r\n  }\r\n\r\n  /** Import 'xy_random' function for osweb script. */\r\n  xy_random (n, width, height, min_dist, pole) {\r\n  }\r\n\r\n  /** Import 'xy_to_polar' function for osweb script. */\r\n  xy_to_polar (x, y, pole) {\r\n  }\r\n}\r\n","import filbert from 'filbert'\n\n/** Class implementing a python random library. */\nexport default class PythonRandom {\n  /**\n     * Create a python AST runner.\n     * @param {Object} runner - The runner to which the library belongs.\n     */\n  constructor (runner) {\n    // Set class parameter properties.\n    this._runner = runner // Parent runner attached to the library.\n  }\n\n  /** Initialization phase of the python_library class. */\n  _initialize () {\n    // Insert math library methods into the python interpreter.\n    filbert.pythonRuntime.imports.random = {}\n    filbert.pythonRuntime.imports.random.random = this.random\n    filbert.pythonRuntime.imports.random.shuffle = this.shuffle\n  }\n\n  /** Import 'Random' function for osweb script. */\n  random () {\n    return Math.random()\n  }\n\n  /** Import 'Shuffle' function for osweb script. */\n  shuffle (x, random) {\n    // Fisher-Yates (aka Knuth) Shuffle.\n    var currentIndex = x.length; var temporaryValue; var randomIndex\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex)\n      currentIndex -= 1\n\n      // And swap it with the current element.\n      temporaryValue = x[currentIndex]\n      x[currentIndex] = x[randomIndex]\n      x[randomIndex] = temporaryValue\n    }\n    return x\n  }\n}\n","/** Class implementing a python string library. */\r\nexport default class PythonString {\r\n  /**\r\n     * Create a python AST runner.\r\n     * @param {Object} runner - The runner to which the library belongs.\r\n     */\r\n  constructor (runner) {\r\n    // Set class parameter properties.\r\n    this._runner = runner // Parent runner attached to the library.\r\n  }\r\n\r\n  /** Initialization phase of the python_library class. */\r\n  _initialize () {\r\n  }\r\n\r\n  /** Import 'capitalize' function for osweb script. */\r\n  capitalize () {\r\n  }\r\n\r\n  /** Import 'center' function for osweb script. */\r\n  center (width, fillchar) {\r\n  }\r\n\r\n  /** Import 'upper' function for osweb script. */\r\n  upper () {\r\n  }\r\n}\r\n","import filbert from 'filbert'\r\nimport PythonMath from './python_math.js'\r\nimport PythonOpenSesame from './python_opensesame.js'\r\nimport PythonRandom from './python_random.js'\r\nimport PythonString from './python_string.js'\r\nimport toNumber from 'lodash/toNumber'\r\n\r\n/** Class implementing a python AST interpreter. */\r\nexport default class PythonParser {\r\n  /**\r\n     * Create a python AST runner.\r\n     * @param {Object} runner - The runner to which the AST object belongs.\r\n     */\r\n  constructor (runner) {\r\n    // Set class parameter properties.\r\n    this._runner = runner // Parent runner attached to the AST object.\r\n\r\n    // Set class properties.\r\n    this.python_math = new PythonMath(this._runner)\r\n    this.python_opensesame = new PythonOpenSesame(this._runner)\r\n    this.python_random = new PythonRandom(this._runner)\r\n    this.python_string = new PythonString(this._runner)\r\n\r\n    // Definition of private properties.\r\n    this._classes = {} // Accessible classes within the script code.\r\n    this._function_stack = [] // Function call stack.\r\n    this._global_return_value = null // Global return value for blocking calls.\r\n    this._inline_script = null // Parent inline_script item.\r\n    this._node = null // Current active node.\r\n    this._onConsole = null\r\n    this._stack = 0 // Stack counter (hack to precent stack overflow).\r\n    this._statement = null // process one statement or an script.\r\n    this._status = 0 // Status of the walker.\r\n    this._variables = {} // Object containing all global objects and variables.\r\n  }\r\n\r\n  /** Initialization phase of the python class. */\r\n  _initialize () {\r\n    // Set the python variable connections with opensesame.\r\n    this._variables.clock = this._runner._experiment.clock\r\n    this._variables.exp = this._runner._experiment\r\n    this._variables.items = this._runner._itemStore\r\n    this._variables.pool = this._runner._pool\r\n    this._variables.var = this._runner._experiment.vars\r\n\r\n    // Set the console handler.\r\n    if (this._runner._onConsole !== null) {\r\n      this._onConsole = this._runner._onConsole\r\n    }\r\n\r\n    // Initialize internal libraries to the interpreter.\r\n    this.python_math._initialize()\r\n    this.python_opensesame._initialize()\r\n    this.python_random._initialize()\r\n    this.python_string._initialize()\r\n  }\r\n\r\n  /**\r\n     * Create a python AST runner.\r\n     * @param {String} script - Parse a python script using the filbert library.\r\n     */\r\n  _parse (script) {\r\n    // Check if the script exists.\r\n    if (script !== '\"\"') {\r\n      var locations = false\r\n      var parseFn = filbert.parse\r\n      var ranges = false\r\n\r\n      // Try to parse the script.\r\n      try {\r\n        var code = script\r\n        var ast = parseFn(code, {\r\n          locations: locations,\r\n          ranges: ranges\r\n        })\r\n        return ast\r\n      } catch (e) {\r\n        this._runner._debugger.addError('Script parsing error: ' + e.message)\r\n        return null\r\n      }\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Get the context part of a identifier (before the dot '.').\r\n     * @param {String} identifier - Full name of the identifier.\r\n     */\r\n  _get_context (identifier) {\r\n    // Split the identifer\r\n    var items = identifier.value.split('.')\r\n\r\n    if ((items[0] === '__pythonRuntime') && (items[1] === 'imports')) {\r\n      return this._variables[items[2]]\r\n    } else {\r\n      // Return the object context\r\n      if (this._variables[items[0]] !== undefined) {\r\n        return this._variables[items[0]]\r\n      } else {\r\n        return window[items[0]]\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Get an element form a library of the variable container.\r\n     * @param {String} element - Full name of the element to retrieve.\r\n     * @return {Object} - The given element found in the context.\r\n     */\r\n  _get_element (element) {\r\n    // Split the identifier name space.\r\n    var items = element.value.split('.')\r\n\r\n    // Check if the identifier is part of the internal scope.\r\n    if (items[0] === '__pythonRuntime') {\r\n      // Check if the identifier is part of the import scope.\r\n      if (items[1] === 'imports') {\r\n        var import_lib = filbert.pythonRuntime.imports[items[2]]\r\n        const value = import_lib[items[3]]\r\n        // Attempt to convert the value to a number,\r\n        // if this fails return the original value\r\n        return isNaN(toNumber(value)) ? value : toNumber(value)\r\n      } else {\r\n        var default_lib = filbert.pythonRuntime[items[1]]\r\n        return default_lib[items[2]]\r\n      }\r\n    } else {\r\n      // No internal scope, check if it is defined in the global scope\r\n      if (this._variables[items[0]] !== undefined) {\r\n        if (items.length === 1) {\r\n          return this._variables[items[0]]\r\n        } else {\r\n          return this._variables[items[0]][items[1]]\r\n        }\r\n      } else {\r\n        if (window[items[0]] !== undefined) {\r\n          if (items.length === 1) {\r\n            return window[items[0]]\r\n          } else {\r\n            return window[items[0]][items[1]]\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Get the value of an element form a library of the variable container.\r\n     * @param {String} element - Full name of the element to retrieve.\r\n     * @return {Boolean|Number|Object|String} - The value of the given element.\r\n     */\r\n  _get_element_value (element) {\r\n    switch (element.type) {\r\n    case 'identifier':\r\n      // Split the identifier name space.\r\n      var items = element.value.split('.')\r\n\r\n      // Set the element value in the global scope.\r\n      if (items.length === 1) {\r\n        if (this._variables[items[0]] !== undefined) {\r\n          return this._variables[items[0]]\r\n        } else {\r\n          return window[items[0]]\r\n        }\r\n      } else {\r\n        if (items[0].indexOf('__filbertRight') !== -1) {\r\n          if (items[1].indexOf('__filbertIndex') !== -1) {\r\n            var container = this._variables[items[0]]\r\n            var index = this._variables[items[1]]\r\n            return container[index]\r\n          } else {\r\n            if (this._variables[items[0]] !== undefined) {\r\n              return this._variables[items[0]][items[1]]\r\n            } else {\r\n              return window[items[0]][items[1]]\r\n            }\r\n          }\r\n        } else if (items[0] === '__pythonRuntime') {\r\n          if (items[1] === 'imports') {\r\n            const import_lib = filbert.pythonRuntime.imports[items[2]]\r\n            const value = import_lib[items[3]]\r\n            // Attempt to convert the value to a number,\r\n            // if this fails return the original value\r\n            return isNaN(toNumber(value)) ? value : toNumber(value)\r\n          } else {\r\n            var default_lib = filbert.pythonRuntime[items[1]]\r\n            return default_lib[items[2]]\r\n          }\r\n        } else {\r\n          if (this._variables[items[0]] !== undefined) {\r\n            return this._variables[items[0]][items[1]]\r\n          } else {\r\n            return window[items[0]][items[1]]\r\n          }\r\n        }\r\n      }\r\n    case 'literal':\r\n      // return the value of the literal.\r\n      return element.value\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Set the value of an element.\r\n     * @param {String} element - Full name of the element to set.\r\n     * @param {Boolean|Number|Object|String} value - The value for the given element.\r\n     */\r\n  _set_element_value (element, value) {\r\n    // Split the identifier name space.\r\n    var items = element.value.split('.')\r\n\r\n    // Set the element value in the global scope.\r\n    if (items.length === 1) {\r\n      if (window[items[0]] !== undefined) {\r\n        window[items[0]] = value\r\n      } else {\r\n        this._variables[items[0]] = value\r\n      }\r\n    } else {\r\n      if (window[items[0]] !== undefined) {\r\n        window[items[0]][items[1]] = value\r\n      } else {\r\n        this._variables[items[0]][items[1]] = value\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Set the given node to the current node.\r\n     * @param {Object} node - The node to set as current node.\r\n     */\r\n  _set_node (node) {\r\n    // Set the current node as the parent node\r\n    node.parent = this._node\r\n\r\n    // Set the new node as the current node.\r\n    this._node = node\r\n  }\r\n\r\n  /**\r\n     * Set the return value of a node.\r\n     * @param {Boolean|Number|Object|String} value - The return value for the processed node.\r\n     */\r\n  _set_return_value (value) {\r\n    // Create or acces the return_values array.\r\n    this._node.parent.return_values = (typeof this._node.parent.return_values === 'undefined') ? [] : this._node.parent.return_values\r\n\r\n    // Push the value.\r\n    this._node.parent.return_values.push(value)\r\n  }\r\n\r\n  /** Process an AST array expression. */\r\n  _array_expression () {\r\n    // Initialize node specific properties.\r\n    this._node.index = (typeof this._node.index === 'undefined') ? 0 : this._node.index\r\n\r\n    // Check if all nodes in script have been processed.\r\n    if (this._node.index < this._node.elements.length) {\r\n      // Set current node to node in body.\r\n      this._node.index++\r\n      this._set_node(this._node.elements[this._node.index - 1])\r\n\r\n      // Return to the processor.\r\n      this._process_nodes()\r\n    } else {\r\n      // Redefine the return values.\r\n      for (var i = 0; i < this._node.return_values.length; i++) {\r\n        this._node.return_values[i] = this._get_element_value(this._node.return_values[i])\r\n      }\r\n      var return_value = { type: 'literal', value: this._node.return_values }\r\n\r\n      // Set the return value.\r\n      this._set_return_value(return_value)\r\n\r\n      // Reset node index and return to the parent node.\r\n      this._node.index = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n    }\r\n  }\r\n\r\n  /** Process an AST assignment expression. */\r\n  _assignment_expression () {\r\n    // Initialize node specific properties.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n    case 0:\r\n      // process id.\r\n      this._node.status = 1\r\n      this._set_node(this._node.left)\r\n\r\n      // Return to the processor.\r\n      this._process_nodes()\r\n      break\r\n    case 1:\r\n      // Process init.\r\n      this._node.status = 2\r\n      this._set_node(this._node.right)\r\n\r\n      // Return to the processor.\r\n      this._process_nodes()\r\n      break\r\n    case 2:\r\n      // define variables\r\n      var tmp_value\r\n\r\n      // Select binary operator.\r\n      switch (this._node.operator) {\r\n      case '=':\r\n        // Process the init value.\r\n        this._set_element_value(this._node.return_values[0], this._get_element_value(this._node.return_values[1]))\r\n        break\r\n      case '-=':\r\n        tmp_value = this._get_element_value(this._node.return_values[0])\r\n        this._set_element_value(this._node.return_values[0], tmp_value - this._get_element_value(this._node.return_values[1]))\r\n        break\r\n      case '/=':\r\n        tmp_value = this._get_element_value(this._node.return_values[0])\r\n        this._set_element_value(this._node.return_values[0], tmp_value / this._get_element_value(this._node.return_values[1]))\r\n        break\r\n      case '%=':\r\n        tmp_value = this._get_element_value(this._node.return_values[0])\r\n        this._set_element_value(this._node.return_values[0], tmp_value % this._get_element_value(this._node.return_values[1]))\r\n        break\r\n      }\r\n\r\n      // Reset node index and return to the parent node.\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Process an AST binary expression. */\r\n  _binary_expression () {\r\n    // Initialize status property.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n    case 0:\r\n      // Process object.\r\n      this._node.status = 1\r\n      this._set_node(this._node.left)\r\n\r\n      // Return to the node processor.\r\n      this._process_nodes()\r\n      break\r\n    case 1:\r\n      // Process property\r\n      this._node.status = 2\r\n      this._set_node(this._node.right)\r\n\r\n      // Return to the node processor.\r\n      this._process_nodes()\r\n      break\r\n    case 2:\r\n      // define variables.\r\n      var left = this._get_element_value(this._node.return_values[0])\r\n      var right = this._get_element_value(this._node.return_values[1])\r\n      var return_value = { type: 'literal' }\r\n\r\n      // Select binary operator.\r\n      switch (this._node.operator) {\r\n      case '-':\r\n        return_value.value = left - right\r\n        break\r\n      case '/':\r\n        return_value.value = left / right\r\n        break\r\n      case '==':\r\n        return_value.value = (left === right)\r\n        break\r\n      case '!=':\r\n        return_value.value = (left !== right)\r\n        break\r\n      case '>':\r\n        return_value.value = (left > right)\r\n        break\r\n      case '<':\r\n        return_value.value = (left < right)\r\n        break\r\n      case '>=':\r\n        return_value.value = (left >= right)\r\n        break\r\n      case '<=':\r\n        return_value.value = (left <= right)\r\n        break\r\n      case '%':\r\n        if ((typeof left === 'number') && (typeof right === 'number')) {\r\n          return_value.value = left % right\r\n        } else {\r\n          return_value.value = left.replace(/%s/g, right)\r\n        }\r\n        break\r\n      case 'instanceof':\r\n        return_value.value = left instanceof right\r\n        break\r\n      }\r\n\r\n      // Set the return value.\r\n      this._set_return_value(return_value)\r\n\r\n      // Reset node index and return to the parent node.\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Process an AST block statement. */\r\n  _block_statement () {\r\n    // Initialize node specific properties.\r\n    this._node.break = (typeof this._node.break === 'undefined') ? false : this._node.break\r\n    this._node.index = (typeof this._node.index === 'undefined') ? 0 : this._node.index\r\n\r\n    // Check if all nodes in script have been processed.\r\n    if ((this._node.index < this._node.body.length) && (this._node.break === false)) {\r\n      // Set current node to node in body.\r\n      this._node.index++\r\n      this._set_node(this._node.body[this._node.index - 1])\r\n\r\n      // Return to the processor.\r\n      this._process_nodes()\r\n    } else {\r\n      // Reset node index and return to the parent node.\r\n      if (this._node.break === true) {\r\n        this._node.break = false\r\n        this._node.parent.break = true\r\n      }\r\n\r\n      this._node.index = 0\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n    }\r\n  }\r\n\r\n  /** Process an AST break statement. */\r\n  _break_statement () {\r\n    // Set break flag for parent element.\r\n    this._node.parent.break = true\r\n\r\n    // Return to the parent node.\r\n    this._node = this._node.parent\r\n    this._process_nodes()\r\n  }\r\n\r\n  /** Process an AST call expression. */\r\n  _call_expression () {\r\n    // Initialize status properties.\r\n    this._node.arguments = (typeof this._node.arguments === 'undefined') ? [] : this._node.arguments\r\n    this._node.index = (typeof this._node.index === 'undefined') ? 0 : this._node.index\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n    case 0:\r\n      // Process arguments and caller.\r\n      if (this._node.index < this._node.arguments.length) {\r\n        // Set current node to next node in list.\r\n        this._node.index++\r\n        this._set_node(this._node.arguments[this._node.index - 1])\r\n\r\n        // Return to the node processessor.\r\n        this._process_nodes()\r\n      } else {\r\n        // Set parent node.\r\n        this._node.status = 1\r\n        this._set_node(this._node.callee)\r\n\r\n        // Return to the node processor.\r\n        this._process_nodes()\r\n      }\r\n      break\r\n    case 1:\r\n      // Get the first return value, which is the name of the caller element.\r\n      var return_value = this._node.return_values.pop()\r\n\r\n      // Get the arguments used on the caller element.\r\n      var tmp_arguments = []\r\n      for (var i = 0; i < this._node.return_values.length; i++) {\r\n        tmp_arguments.push(this._get_element_value(this._node.return_values[i]))\r\n      }\r\n\r\n      var caller = this._get_element(return_value)\r\n      var context = this._get_context(return_value)\r\n\r\n      if ((return_value.value === 'sleep') || (return_value.value === '__pythonRuntime.imports.clock.sleep')) {\r\n        // Adjust the status to special.\r\n        this._node.status = 2\r\n\r\n        // Check the context.\r\n        if (typeof context === 'undefined') {\r\n          context = this\r\n        }\r\n\r\n        // Execute the blocking call.\r\n        caller.apply(context, tmp_arguments)\r\n      } else {\r\n        // Check the context.\r\n        if (typeof context === 'undefined') {\r\n          context = this\r\n        }\r\n\r\n        // Execute the call, check first for internal function call.\r\n        if (this._node.callee.type === 'FunctionExpression') {\r\n          return_value = { type: 'literal', value: caller }\r\n        } else {\r\n          return_value = { type: 'literal', value: caller.apply(context, tmp_arguments) }\r\n        }\r\n\r\n        // Set the return value.\r\n        this._set_return_value(return_value)\r\n\r\n        // Reset node index and return to the parent node.\r\n        this._node.index = 0\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n        this._node = this._node.parent\r\n        this._process_nodes()\r\n      }\r\n      break\r\n    case 2:\r\n      // Special state used when calling a blocking method (sleep, clock.sleep, keyboard.get_key(), mouse.get_click).\r\n      this._set_return_value(this.global_return_value)\r\n\r\n      // Reset node index and return to the parent node.\r\n      this._node.index = 0\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Process an AST empty statment. */\r\n  _empty_statement () {\r\n    // Set parent node.\r\n    this._node = this._node.parent\r\n\r\n    // Return to the node processessor.\r\n    this._process_nodes()\r\n  }\r\n\r\n  /** Process an AST expression statement. */\r\n  _expression_statement () {\r\n    // Initialize status property.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    if (this._node.status === 0) {\r\n      // Set parent node.\r\n      this._node.status = 1\r\n      this._set_node(this._node.expression)\r\n\r\n      // Return to the node processor.\r\n      this._process_nodes()\r\n    } else {\r\n      // Set parent node.\r\n      this._node.status = 0\r\n      this._node = this._node.parent\r\n\r\n      // Return to the node processessor.\r\n      this._process_nodes()\r\n    }\r\n  }\r\n\r\n  /** Process an AST for statement. */\r\n  _for_statement () {\r\n    // Initialize status property.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n    case 0:\r\n      // Process object.\r\n      this._node.status = 1\r\n      this._set_node(this._node.init)\r\n\r\n      // Return to the node processessor.\r\n      this._process_nodes()\r\n      break\r\n    case 1:\r\n      // Process object.\r\n      this._node.status = 2\r\n      this._set_node(this._node.test)\r\n\r\n      // Return to the node processessor.\r\n      this._process_nodes()\r\n      break\r\n    case 2:\r\n      // Check if the test node has returned true.\r\n      if (this._node.return_values[0].value === true) {\r\n        // Process object.\r\n        this._node.status = 3\r\n        this._node.return_values = []\r\n        this._set_node(this._node.body)\r\n\r\n        // Return to the node processessor.\r\n        this._process_nodes()\r\n      } else {\r\n        // Range has ended.\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n        this._node = this._node.parent\r\n\r\n        // Return to the node processessor.\r\n        this._process_nodes()\r\n      }\r\n      break\r\n    case 3:\r\n      // Process object.\r\n      this._node.status = 1\r\n      this._set_node(this._node.update)\r\n\r\n      // Return to the node processessor.\r\n      this._process_nodes()\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Process an AST for in statement. */\r\n  _for_in_statement () {\r\n    // Initialize status property.\r\n    this._node.index = (typeof this._node.index === 'undefined') ? 0 : this._node.index\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n    case 0:\r\n      // Process object.\r\n      this._node.status = 1\r\n      this._set_node(this._node.left)\r\n\r\n      // Return to the node processessor.\r\n      this._process_nodes()\r\n      break\r\n    case 1:\r\n      // Process object.\r\n      this._node.status = 2\r\n      this._set_node(this._node.right)\r\n\r\n      // Return to the node processessor.\r\n      this._process_nodes()\r\n      break\r\n    case 2:\r\n      // Retrieve the range on which the loop travels.\r\n      var tmp_range = this._get_element_value(this._node.return_values[1])\r\n\r\n      // Execute the range.\r\n      if (this._node.index < tmp_range.length) {\r\n        // Set the value of the range.\r\n        this._set_element_value(this._node.return_values[0], tmp_range[this._node.index])\r\n\r\n        // Increase the index.\r\n        this._node.index++\r\n\r\n        // Execute the body.\r\n        this._set_node(this._node.body)\r\n        this._process_nodes()\r\n      } else {\r\n        this._node.index = 0\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n        this._node = this._node.parent\r\n        this._process_nodes()\r\n      }\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Process an AST function expression. */\r\n  _function_expression () {\r\n    // Initialize status property.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n    case 0:\r\n      // Process defaults.\r\n      this._node.status = 1\r\n      this._set_node(this._node.body)\r\n\r\n      // Return to the node processor.\r\n      this._process_nodes()\r\n      break\r\n    case 1:\r\n      // Remove the last return value from the global function stack.\r\n      var return_value = this._function_stack.pop()\r\n\r\n      // Set the return value\r\n      this._set_return_value(return_value)\r\n\r\n      // Set parent node.\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Process an AST identifier. */\r\n  _identifier () {\r\n    // Retrieve the identifier information.\r\n    const return_value = { type: 'identifier', value: this._node.name }\r\n\r\n    // Set the return value.\r\n    this._set_return_value(return_value)\r\n\r\n    // Set parent node.\r\n    this._node = this._node.parent\r\n    this._process_nodes()\r\n  }\r\n\r\n  /** Process an AST if statement. */\r\n  _if_statement () {\r\n    // Initialize status property.\r\n    this._node.break = (typeof this._node.break === 'undefined') ? false : this._node.break\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n    case 0:\r\n      // Process object.\r\n      this._node.status = 1\r\n      this._set_node(this._node.test)\r\n\r\n      // Return to the node processor.\r\n      this._process_nodes()\r\n      break\r\n    case 1:\r\n      // Check if expression is true.\r\n      if (this._node.return_values[0].value === true) {\r\n        this._node.status = 2\r\n        this._set_node(this._node.consequent)\r\n\r\n        // Return to the node processor.\r\n        this._process_nodes()\r\n      } else if (this._node.alternate !== null) {\r\n        this._node.status = 2\r\n        this._set_node(this._node.alternate)\r\n\r\n        // Return to the node processor.\r\n        this._process_nodes()\r\n      } else {\r\n        this._node.status = 2\r\n        this._process_nodes()\r\n      }\r\n      break\r\n    case 2:\r\n      // Set parent node.\r\n      if (this._node.break === true) {\r\n        this._node.break = false\r\n        this._node.parent.break = true\r\n      }\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Process an AST literal. */\r\n  _literal () {\r\n    // Retrieve the identifier information.\r\n    var return_value = { type: 'literal', value: this._node.value }\r\n\r\n    // Set the return value.\r\n    this._set_return_value(return_value)\r\n\r\n    // Set parent node.\r\n    this._node = this._node.parent\r\n    this._process_nodes()\r\n  }\r\n\r\n  /** Process an AST logical expression. */\r\n  _logical_expression () {\r\n    // Initialize status property.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n    case 0:\r\n      // Process object.\r\n      this._node.status = 1\r\n      this._set_node(this._node.left)\r\n\r\n      // Return to the node processor.\r\n      this._process_nodes()\r\n      break\r\n    case 1:\r\n      // Process property\r\n      this._node.status = 2\r\n      this._set_node(this._node.right)\r\n\r\n      // Return to the node processor.\r\n      this._process_nodes()\r\n      break\r\n    case 2:\r\n      // define variables.\r\n      var left = this._get_element_value(this._node.return_values[0])\r\n      var right = this._get_element_value(this._node.return_values[1])\r\n      var return_value = { type: 'literal' }\r\n\r\n      // Select binary operator.\r\n      switch (this._node.operator) {\r\n      case '&&':\r\n        return_value.value = left && right\r\n        break\r\n      case '||':\r\n        return_value.value = left || right\r\n        break\r\n      }\r\n\r\n      // Set the return value.\r\n      this._set_return_value(return_value)\r\n\r\n      // Reset node index and return to the parent node.\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Process an AST member expression */\r\n  _member_expression () {\r\n    // Initialize status property.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n    case 0:\r\n      // Process object.\r\n      this._node.status = 1\r\n      this._set_node(this._node.object)\r\n\r\n      // Return to the node processessor.\r\n      this._process_nodes()\r\n      break\r\n    case 1:\r\n      // Process property\r\n      this._node.status = 2\r\n      this._set_node(this._node.property)\r\n\r\n      // Return to the node processessor.\r\n      this._process_nodes()\r\n      break\r\n    case 2:\r\n      // Build the combing return value.\r\n      var return_value = { type: 'identifier', value: this._node.return_values[0].value + '.' + this._node.return_values[1].value }\r\n\r\n      // Set the return value\r\n      this._set_return_value(return_value)\r\n\r\n      // Reset node index and return to the parent node.\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Process an AST new expression. */\r\n  _new_expression () {\r\n    // Initialize status properties.\r\n    this._node.arguments = (typeof this._node.arguments === 'undefined') ? [] : this._node.arguments\r\n    this._node.index = (typeof this._node.index === 'undefined') ? 0 : this._node.index\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    if (this._node.status === 0) {\r\n      // Process arguments and caller.\r\n      if (this._node.index < this._node.arguments.length) {\r\n        // Set current node to next node in list.\r\n        this._node.index++\r\n        this._set_node(this._node.arguments[this._node.index - 1])\r\n\r\n        // Return to the node processessor.\r\n        this._process_nodes()\r\n      } else {\r\n        // Set parent node.\r\n        this._node.status = 1\r\n        this._set_node(this._node.callee)\r\n\r\n        // Return to the node processor.\r\n        this._process_nodes()\r\n      }\r\n    } else {\r\n      // Get the caller and context element.\r\n      let returnValue = this._node.return_values.pop()\r\n      var caller = this._get_element(returnValue)\r\n      var context = this._get_context(returnValue)\r\n\r\n      // Create the aruments array.\r\n      var tmp_arguments = []\r\n      for (var i = 0; i < this._node.return_values.length; i++) {\r\n        tmp_arguments.push(this._get_element_value(this._node.return_values[i]))\r\n      }\r\n\r\n      // Execute the call.\r\n      returnValue = { type: 'literal', value: caller.apply(context, tmp_arguments) }\r\n\r\n      // Set the return value\r\n      this._set_return_value(returnValue)\r\n\r\n      // Reset node index and return to the parent node.\r\n      this._node.index = 0\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n    }\r\n  }\r\n\r\n  /** Process an AST program. */\r\n  _program () {\r\n    // Initialize node specific properties.\r\n    this._node.index = (typeof this._node.index === 'undefined') ? 0 : this._node.index\r\n\r\n    // Check if all nodes in script have been processed.\r\n    if (this._node.index < this._node.body.length) {\r\n      // Set current node to node in body.\r\n      this._node.index++\r\n      this._set_node(this._node.body[this._node.index - 1])\r\n\r\n      // Return to the processor.\r\n      this._process_nodes()\r\n    } else {\r\n      // Change status and end the running process.\r\n      this._node.index = 0\r\n      this._status = 2\r\n\r\n      // Complete the inline item.\r\n      if (this._inline_script !== null) {\r\n        this._inline_script._complete()\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Process an AST return statement. */\r\n  _return_statement () {\r\n    // Initialize status property.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    let returnValue\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n    case 0:\r\n      // Process object.\r\n      this._node.status = 1\r\n      this._set_node(this._node.argument)\r\n\r\n      // Return to the node processessor.\r\n      this._process_nodes()\r\n      break\r\n    case 1:\r\n      // Set return value.\r\n      returnValue = { type: 'identifier', value: this._node.return_values[0].value }\r\n\r\n      // Set the return value\r\n      this._function_stack.push(returnValue)\r\n\r\n      // Reset node index and return to the parent node.\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Process an AST unary expression. */\r\n  _unary_expression () {\r\n    // Initialize node specific properties.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    if (this._node.status === 0) {\r\n      // Set parent node.\r\n      this._node.status = 1\r\n      this._set_node(this._node.argument)\r\n\r\n      // Return to the node processor.\r\n      this._process_nodes()\r\n    } else {\r\n      var return_value = { type: 'literal' }\r\n\r\n      // process the operator.\r\n      switch (this._node.operator) {\r\n      case '!' :\r\n        return_value.value = !(this._node.return_values[0].value)\r\n        break\r\n      case '-' :\r\n        return_value.value = -(this._node.return_values[0].value)\r\n        break\r\n      }\r\n\r\n      // Set the return value\r\n      this._set_return_value(return_value)\r\n\r\n      // Return to the node processessor.\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n    }\r\n  }\r\n\r\n  /** Process an AST update expression. */\r\n  _update_expression () {\r\n    // Initialize node specific properties.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    if (this._node.status === 0) {\r\n      // Set parent node.\r\n      this._node.status = 1\r\n      this._set_node(this._node.argument)\r\n\r\n      // Return to the node processor.\r\n      this._process_nodes()\r\n    } else {\r\n      // Process the init value.\r\n      switch (this._node.operator) {\r\n      case '++' :\r\n        this._set_element_value(this._node.return_values[0], this._get_element_value(this._node.return_values[0]) + 1)\r\n        break\r\n      }\r\n\r\n      // Return to the node processessor.\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n    }\r\n  }\r\n\r\n  /** Process an AST variable declaration. */\r\n  _variable_declaration () {\r\n    // Initialize node specific properties.\r\n    this._node.index = (typeof this._node.index === 'undefined') ? 0 : this._node.index\r\n\r\n    // Check if all nodes in script have been processed.\r\n    if (this._node.index < this._node.declarations.length) {\r\n      // Set current node to next node in list.\r\n      this._node.index++\r\n      this._set_node(this._node.declarations[this._node.index - 1])\r\n\r\n      // Return to the processor.\r\n      this._process_nodes()\r\n    } else {\r\n      // Reset node index and return to the parent node.\r\n      this._node.index = 0\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n    }\r\n  }\r\n\r\n  /** Process an AST variable declarator. */\r\n  _variable_declarator () {\r\n    // Initialize node specific properties.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n    case 0:\r\n      // process id.\r\n      this._node.status = 1\r\n      this._set_node(this._node.id)\r\n\r\n      // Return to the processor.\r\n      this._process_nodes()\r\n      break\r\n    case 1:\r\n      // Process init.\r\n      this._node.status = 2\r\n      this._set_node(this._node.init)\r\n\r\n      // Return to the processor.\r\n      this._process_nodes()\r\n      break\r\n    case 2:\r\n      // Process the init value.\r\n      this._set_element_value(this._node.return_values[0], this._get_element_value(this._node.return_values[1]))\r\n\r\n      // Reset node index and return to the parent node.\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Process an AST while statement. */\r\n  _while_statement () {\r\n    // Initialize status property.\r\n    this._node.break = (typeof this._node.break === 'undefined') ? false : this._node.break\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n    case 0:\r\n      // Check for the break flag.\r\n      if (this._node.break === true) {\r\n        this._node.break = false\r\n        // Set parent node.\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n        this._node = this._node.parent\r\n        this._process_nodes()\r\n      } else {\r\n        // Process object.\r\n        this._node.status = 1\r\n        this._set_node(this._node.test)\r\n\r\n        // Return to the node processeor.\r\n        this._process_nodes()\r\n      }\r\n      break\r\n    case 1:\r\n      // Check if expression is true.\r\n      if (this._node.return_values[0].value === true) {\r\n        // Reset the test\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n\r\n        // execute the body.\r\n        this._set_node(this._node.body)\r\n\r\n        // Return to the node processor.\r\n        this._process_nodes()\r\n      } else {\r\n        // Set parent node.\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n        this._node = this._node.parent\r\n        this._process_nodes()\r\n      }\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Process all AST nodes. */\r\n  _process_nodes () {\r\n    // Select type of processing.\r\n    if (this._statement === null) {\r\n      // Script processing.\r\n      this._process_nodes_jump()\r\n    } else {\r\n      if (this._node === this._statement) {\r\n        // Return the result value of the expression.\r\n        return (this._node.body[0].return_values[0].value)\r\n      } else {\r\n        // Statement processing.\r\n        this._process_nodes_timeout()\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Process a single AST nodes (timeout is for non-blocking) */\r\n  _process_nodes_jump () {\r\n    // Increase the stack counter.\r\n    this._stack++\r\n    if (this._stack > 500) {\r\n      // Clear the stack.\r\n      this._stack = 0\r\n\r\n      // Process nodes with a timeout (this is a hack for clearing the browser cache.\r\n      setTimeout(function () {\r\n        this._process_nodes_timeout()\r\n      }.bind(this), 1)\r\n    } else {\r\n      // Process the nodes without a timeout.\r\n      this._process_nodes_timeout()\r\n    }\r\n  }\r\n\r\n  /** Process a single AST nodes (timeout is for non-blocking) */\r\n  _process_nodes_timeout () {\r\n    // Select the type of node to process\r\n    switch (this._node.type) {\r\n    case 'ArrayExpression':\r\n      this._array_expression()\r\n      break\r\n    case 'AssignmentExpression':\r\n      this._assignment_expression()\r\n      break\r\n    case 'BinaryExpression':\r\n      this._binary_expression()\r\n      break\r\n    case 'BlockStatement':\r\n      this._block_statement()\r\n      break\r\n    case 'BreakStatement':\r\n      this._break_statement()\r\n      break\r\n    case 'CallExpression':\r\n      this._call_expression()\r\n      break\r\n    case 'EmptyStatement':\r\n      this._empty_statement()\r\n      break\r\n    case 'ExpressionStatement':\r\n      this._expression_statement()\r\n      break\r\n    case 'ForStatement':\r\n      this._for_statement()\r\n      break\r\n    case 'ForInStatement':\r\n      this._for_in_statement()\r\n      break\r\n    case 'FunctionExpression':\r\n      this._function_expression()\r\n      break\r\n    case 'Identifier':\r\n      this._identifier()\r\n      break\r\n    case 'IfStatement':\r\n      this._if_statement()\r\n      break\r\n    case 'Literal':\r\n      this._literal()\r\n      break\r\n    case 'LogicalExpression':\r\n      this._logical_expression()\r\n      break\r\n    case 'MemberExpression':\r\n      this._member_expression()\r\n      break\r\n    case 'NewExpression':\r\n      this._new_expression()\r\n      break\r\n    case 'Program':\r\n      this._program()\r\n      break\r\n    case 'ReturnStatement':\r\n      this._return_statement()\r\n      break\r\n    case 'UnaryExpression':\r\n      this._unary_expression()\r\n      break\r\n    case 'UpdateExpression':\r\n      this._update_expression()\r\n      break\r\n    case 'VariableDeclaration':\r\n      this._variable_declaration()\r\n      break\r\n    case 'VariableDeclarator':\r\n      this._variable_declarator()\r\n      break\r\n    case 'WhileStatement':\r\n      this._while_statement()\r\n      break\r\n    default:\r\n      this._runner._debugger.addError('Invalid node type to process: ' + this._node.type)\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Run a single line python AST statement.\r\n     * @param {Object} ast_tree - The AST tree to run.\r\n     * @return {Boolean|Number|Object|String} - The result value of the AST evaluation.\r\n     */\r\n  _run_statement (ast_tree) {\r\n    this._node = ast_tree.body[0]\r\n    this._node.parent = ast_tree\r\n    this._statement = ast_tree\r\n\r\n    // Adjust status of partser to running and start the process.\r\n    this._status = 1\r\n\r\n    // Process the nodes.\r\n    this._process_nodes()\r\n\r\n    // Return the result value of the expression.\r\n    let returnValue\r\n    if (ast_tree.body[0].return_values[0].type === 'identifier') {\r\n      returnValue = this._get_element_value(ast_tree.body[0].return_values[0])\r\n    } else {\r\n      returnValue = ast_tree.body[0].return_values[0].value\r\n    }\r\n\r\n    // Clear the return value container for next cycle.\r\n    ast_tree.body[0].return_values = []\r\n\r\n    // Retur value of the statement.\r\n    return returnValue\r\n  }\r\n\r\n  /**\r\n     * Run an AST python script.\r\n     * @param {Object} inline_script - The Inline Script item to which the AST tree belongs.\r\n     * @param {Object} ast_tree - The AST tree to run.\r\n     */\r\n  _run (inline_script, ast_tree) {\r\n    // Set the inline item.\r\n    this._inline_script = inline_script\r\n\r\n    // set the self parameter.\r\n    this._variables.self = inline_script\r\n\r\n    // Set the first node and its parent.\r\n    this._node = ast_tree\r\n    this._node.parent = null\r\n    this._statement = null\r\n\r\n    // Adjust status of partser to running and start the process.\r\n    this._status = 1\r\n    this._process_nodes()\r\n  }\r\n}\r\n","import isFunction from 'lodash/isFunction'\r\n\r\n/** Class representing a data logger. */\r\nexport default class Log {\r\n  /**\r\n   * Create a log object which stores all the response data.\r\n   * @param {Object} experiment - The experiment to which the logger belongs.\r\n   */\r\n  constructor (experiment) {\r\n    this._experiment = experiment // Anchor to the experiment object.\r\n  }\r\n\r\n  /**\r\n   * Write one signle line to the message log.\r\n   * @param {Array} varList - Array with variables to write to the log.\r\n   */\r\n  write_vars (varList) {\r\n    const entry = {}\r\n    for (const varName of varList) {\r\n      const value = this._experiment.vars.get(varName, 'NA', false)\r\n      if (isFunction(value)) continue\r\n      entry[varName] = value\r\n    }\r\n    if (isFunction(this._experiment.onLog)) {\r\n      this._experiment.onLog(entry)\r\n    }\r\n    this._experiment._runner._data.push(entry)\r\n  }\r\n}\r\n","import Item from './item.js'\r\nimport JavaScriptWorkspace from '../classes/javascript_workspace.js'\r\nimport Canvas from '../backends/canvas.js'\r\nimport Log from '../backends/log'\r\nimport {\r\n  constants\r\n} from '../system/constants.js'\r\nimport {\r\n  VERSION_NAME,\r\n  VERSION_NUMBER\r\n} from '../index.js'\r\n\r\n/**\r\n * Class representing an Experiment item.\r\n * @extends Item\r\n */\r\nexport default class Experiment extends Item {\r\n  /** The experiment class defines the starting point for an experiment. */\r\n  constructor (experiment, name, script) {\r\n    // Inherited.\r\n    super(experiment, name, script)\r\n\r\n    // Create and set private properties.\r\n    this._canvas = new Canvas(this)\r\n    this._currentCanvas = this._canvas\r\n    this._log = new Log(this)\r\n    this._scale_x = 1 // Scaling of the canvas for fullscreen mode.\r\n    this._scale_y = 1 // Scaling of the canvas for fullscreen mode.\r\n    this._javascriptWorkspace = new JavaScriptWorkspace(this)\r\n\r\n    // Create and set public properties.\r\n    this.debug = this._runner._debugger.enabled\r\n    this.items = this._runner._itemStore\r\n    this.pool = this._runner._pool\r\n\r\n    // Set default variables\r\n    this.vars.start = 'experiment'\r\n    this.vars.title = 'My Experiment'\r\n    this.vars.bidi = 'no'\r\n    this.vars.round_decimals = 2\r\n    this.vars.form_clicks = 'no'\r\n    this.vars.uniform_coordinates = 'no'\r\n    this.vars.sessionid = new Date().valueOf() + Math.floor(Math.random() * 100000)\r\n\r\n    // Sound parameters.\r\n    this.vars.sound_freq = 48000\r\n    this.vars.sound_sample_size = -16\r\n    this.vars.sound_channels = 2\r\n    this.vars.sound_buf_size = 1024\r\n\r\n    // Default backend\r\n    this.vars.canvas_backend = 'xpyriment'\r\n\r\n    // Display parameters.\r\n    this.vars.width = 1024\r\n    this.vars.height = 768\r\n    this.vars.background = 0x000000\r\n    this.vars.foreground = 0xFFFFFF\r\n    this.vars.penwidth = 1\r\n\r\n    // Font parameters.\r\n    this.vars.font_size = 18\r\n    this.vars.font_family = 'mono'\r\n    this.vars.font_italic = 'no'\r\n    this.vars.font_bold = 'no'\r\n    this.vars.font_underline = 'no'\r\n  }\r\n\r\n  /** Resets the feedback variables (acc, avg_rt, etc.). */\r\n  reset_feedback () {\r\n    this.vars.total_responses = 0\r\n    this.vars.total_correct = 0\r\n    this.vars.total_response_time = 0\r\n    this.vars.avg_rt = 'undefined'\r\n    this.vars.average_response_time = 'undefined'\r\n    this.vars.accuracy = 'undefined'\r\n    this.vars.acc = 'undefined'\r\n  }\r\n\r\n  /**\r\n    * Sets the subject number and parity (even/ odd).\r\n    * @param  {Number} pNr - The subject number to be used.\r\n    */\r\n  set_subject (pNr) {\r\n    // Sets the subject number and parity (even/ odd).\r\n    this.vars.subject_nr = pNr\r\n    if ((pNr % 2) === 0) {\r\n      this.vars.subject_parity = 'even'\r\n    } else {\r\n      this.vars.subject_parity = 'odd'\r\n    }\r\n  }\r\n\r\n  /**\r\n    * Extracts a the definition of a single item from the string.\r\n    * @param {String} script - The script to read the definition form.\r\n    * @return {String} - The definition found from the script.\r\n    */\r\n  read_definition (script) {\r\n    // Extracts a the definition of a single item from the string.\r\n    var line = script.shift()\r\n    var def_str = ''\r\n    while ((line !== null) && (line.length > 0) && (line.charAt(0) === '\\t')) {\r\n      def_str = def_str + line.substring(1) + '\\n'\r\n      line = script.shift()\r\n    }\r\n    return def_str\r\n  }\r\n\r\n  /**\r\n   * Construct the experiment object from OpenSesame script.\r\n   * @param {String} script - The opensesame script contents\r\n   */\r\n  from_string (script) {\r\n    // Split the string into an array of lines.\r\n    if (script !== null) {\r\n      script = script.replace(/\\r\\n|\\r|\\n/g, '\\n')  // convert line endings\r\n      this._source = script.split('\\n')\r\n      var l = this._source.shift()\r\n      while (l != null) {\r\n        // Set the processing of the next line.\r\n        const get_next = true\r\n        // eslint-disable-next-line no-unused-vars\r\n        let cmd, args, kwargs\r\n        try {\r\n          // Split the single line into a set of tokens.\r\n          [cmd, args, kwargs] = this._runner._syntax.parse_cmd(l)\r\n        } catch (e) {\r\n          this._runner._debugger.addError('Failed to parse script. Maybe it contains illegal characters or unclosed quotes: ' + e.message)\r\n        }\r\n\r\n        if ((cmd !== null) && (args.length > 0)) {\r\n          // Try to parse the line as variable (or comment)\r\n          if (this.parse_variable(l) === false) {\r\n            if (cmd === 'define') {\r\n              if (args.length === 2) {\r\n                // Get the type, name and definition string of an item.\r\n                var item_type = args[0]\r\n                var item_name = this._runner._syntax.sanitize(args[1])\r\n                var def_str = this.read_definition(this._source)\r\n                this._runner._itemStore.newItem(item_type, item_name, def_str)\r\n              } else {\r\n                this._runner._debugger.addError('Failed to parse definition: ' + l)\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // Get the next line.\r\n        if (get_next === true) {\r\n          l = this._source.shift()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes the clock backend. */\r\n  init_clock () {\r\n    // Initializes the clock backend.\r\n    this.clock._initialize()\r\n  }\r\n\r\n  /** Initializes the canvas backend. */\r\n  init_display () {\r\n    // Initializes the canvas backend.\r\n    this._canvas.init_display(this)\r\n  }\r\n\r\n  /** Event handler for external data retrieval. */\r\n  onLog (data) {\r\n    // Function to be overwritten by external handler\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Runs the experiment.\r\n    switch (this._status) {\r\n    case constants.STATUS_INITIALIZE:\r\n      // Adjust the status of the item.\r\n      this._status = constants.STATUS_FINALIZE\r\n\r\n      // Save the date and time, and the version of OpenSesame\r\n      this.vars.datetime = new Date().toString()\r\n      this.vars.opensesame_version = VERSION_NUMBER\r\n      this.vars.opensesame_codename = VERSION_NAME\r\n      this.init_clock()\r\n      this.init_display()\r\n      this.reset_feedback()\r\n\r\n      // Add closing message to debug system.\r\n      this._runner._debugger.addMessage('experiment.run(): experiment started at ' + new Date().toUTCString())\r\n\r\n      if (this._runner._itemStore._items[this.vars.start] !== null) {\r\n        this._runner._itemStack.clear()\r\n        this._runner._itemStore.prepare(this.vars.start, this)\r\n      } else {\r\n        this._runner._debugger.addError('Could not find the item that is the entry point of the experiment: ' + this.vars.start)\r\n      }\r\n      break\r\n    case constants.STATUS_FINALIZE:\r\n      // Add closing message to debug system.\r\n      this._runner._debugger.addMessage('experiment.run(): experiment finished at ' + new Date().toUTCString())\r\n\r\n      // Complete the run process.\r\n      this.end()\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Ends an experiment. */\r\n  end () {\r\n    this._runner._finalize()\r\n  }\r\n}\r\n","import { autoDetectRenderer } from 'pixi.js'\r\nimport {\r\n  constants\r\n} from './constants.js'\r\nimport Debugger from './debugger.js'\r\nimport Convertor from './convertor.js'\r\nimport Events from './events.js'\r\nimport Parameters from './parameters.js'\r\nimport Screen from './screen.js'\r\nimport Session from './session.js'\r\nimport Transfer from './transfer.js'\r\nimport ItemStack from '../classes/item_stack.js'\r\nimport ItemStore from '../classes/item_store.js'\r\nimport PythonWorkspace from '../classes/python_workspace.js'\r\nimport FilePoolStore from '../classes/file_pool_store.js'\r\nimport Syntax from '../classes/syntax.js'\r\nimport PythonParser from '../python/python.js'\r\nimport Experiment from '../items/experiment.js'\r\n\r\n/** Class representing the Runner. */\r\nexport default class Runner {\r\n  /** Create a runner which runs an experiment. */\r\n  constructor (content) {\r\n    // Create and set private properties.\r\n    this._confirm = null // Optionale confirm dialog function.\r\n    this._container = null // HTML: The container (div) element.\r\n    this._data = [] // Experiment result data.\r\n    this._experiment = null // The experiment container.\r\n    this._fullScreen = false // Full screen toggle mode.\r\n    this._mimetype = null // Distinction between text and binanry files.\r\n    this._name = 'noname.exp' // Name of the experiment which is run.\r\n    this._onConsole = null // Event handler for processing print messages.\r\n    this._onFinished = null // Event handler for finishing the experiment.\r\n    this._onLog = null // Event handler to call when logger is encountered.\r\n    this._onError = null // Event handler to call when an error is encountered.\r\n    this._prompt = null // Optional prompt dialog function.\r\n    this._renderer = null // PIXI: The visual stimuli renderer.\r\n    this._scaleMode = 'noScale' // Scale type used for full screen mode.\r\n    this._script = null // Container for the experiment script.\r\n    this._source = null // Link to the source experiment file.\r\n    this._subject = null // If defined containing the subject number.\r\n    this._target = null // Link to the target location for the data.\r\n\r\n    // Create and set private class properties.\r\n    this._debugger = new Debugger(this) // Internal error system.\r\n    this._convertor = new Convertor(this)\r\n    this._events = new Events(this) // The event processor.\r\n    this._itemStack = new ItemStack(this) // The global item stack.\r\n    this._itemStore = new ItemStore(this) // The global item store.\r\n    this._parameters = new Parameters(this) // Parameter processor.\r\n    this._pool = new FilePoolStore(this) // The virtual file pool store.\r\n    this._pythonParser = new PythonParser(this) // Python parser\r\n    this._pythonWorkspace = new PythonWorkspace(this) // Python workspace.\r\n    this._screen = new Screen(this) // Introduction screen renderer.\r\n    this._session = new Session(this) // Session information container.\r\n    this._syntax = new Syntax(this) // The script syntax checker.\r\n    this._transfer = new Transfer(this) // File transfer system.\r\n\r\n    // Create the content container.\r\n    this._setupContent(content)\r\n  }\r\n\r\n  /**\r\n   * Setup the content container which shows all the visual output.\r\n   * @param {String|Object} content - The content (div element) in which the experiment is projected.\r\n   */\r\n  _setupContent (content) {\r\n    // Check if the experiment container is defined.\r\n    if (typeof content !== 'undefined') {\r\n      // Get the div element from the DOM element tree\r\n      this._container = (typeof content === 'string') ? document.getElementById(content) : content\r\n\r\n      // Create and set the experiment canvas.\r\n      this._renderer = autoDetectRenderer(800, 600, {\r\n        antialias: true,\r\n        transparent: false,\r\n        resolution: 1\r\n      })\r\n      this._renderer.backgroundColor = 0x000000\r\n\r\n      // Append the canvas to the container.\r\n      this._container.appendChild(this._renderer.view)\r\n    } else {\r\n      // Show error message.\r\n      this._debugger.addError('No content parameter specified.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup the context from which the experiment is created.\r\n   * @param {Object} context - An JSON object containing information about the experiment.\r\n   */\r\n  async _setupContext (context) {\r\n    // Check if the script parameter is defined.\r\n    if (typeof context !== 'undefined') {\r\n      // Initialize the context parameters.\r\n      // Use ES6 destructuring to determine values and set default ones if\r\n      // required.\r\n      ({\r\n        confirm: this._confirm = null,\r\n        debug: this._debugger.enabled = false,\r\n        fullScreen: this._fullScreen = false,\r\n        introClick: this._screen._click = true,\r\n        introScreen: this._screen._active = true,\r\n        mimetype: this._mimetype = null,\r\n        name: this._name = 'noname.exp',\r\n        onConsole: this._onConsole = null,\r\n        onFinished: this._onFinished = null,\r\n        onLog: this._onLog = null,\r\n        onError: this._onError = null,\r\n        prompt: this._prompt = null,\r\n        scaleMode: this._scaleMode = 'noScale',\r\n        source: this._source = null,\r\n        subject: this._subject = null,\r\n        target: this._target = null,\r\n        welcomeText: this._welcomeText = null\r\n      } = context)\r\n\r\n      // Set up the introscreen.\r\n      this._screen._setupIntroScreen()\r\n\r\n      this._screen._updateIntroScreen('Loading experiment.')\r\n      this._screen._updateProgressBar(-1)\r\n\r\n      // Load the script file, using the source parameter.\r\n      try {\r\n        this._script = await this._transfer._readSource(this._source)\r\n      } catch (e) {\r\n        this._debugger.addError(`Error reading osexp: ${e}`)\r\n        this._exit()\r\n        return\r\n      }\r\n\r\n      // Update the introscreen\r\n      this._screen._updateIntroScreen('Building experiment structure.')\r\n\r\n      // Continue the experiment build.\r\n      this._build()\r\n\r\n      // Initialize the parameters class and request user input.\r\n      this._parameters._initialize()\r\n    } else {\r\n      // Show error message.\r\n      this.debugger.addError('No context parameter specified.')\r\n    }\r\n  }\r\n\r\n  /** Build the experiment system. */\r\n  _build () {\r\n    // Create the experiment item.\r\n    this._experiment = new Experiment(this, this._name, this._script)\r\n    this._convertor.parseScript(this._script)\r\n    this._experiment.from_string(this._script)\r\n\r\n    // Set the onlog event handler (if defined).\r\n    if (this._onLog) {\r\n      this._experiment.onLog = this._onLog\r\n    }\r\n  }\r\n\r\n  /** initialize the runner. */\r\n  _initialize () {\r\n    // Initialize the helper classes.\r\n    this._debugger._initialize()\r\n    this._events._initialize()\r\n    this._pythonParser._initialize()\r\n    this._session._initialize()\r\n\r\n    // Prepare and run the experiment item.\r\n    this._experiment.prepare()\r\n    this._experiment.run()\r\n  }\r\n\r\n  /** finalize the runner. */\r\n  _finalize () {\r\n    // Finalize the event system.\r\n    this._events._finalize()\r\n\r\n    // Finalize the debugger.\r\n    this._debugger._finalize()\r\n\r\n    // Clear the item store and file pool.\r\n    this._itemStore._clean_up()\r\n    this._pool._clean_up()\r\n\r\n    // Exit the runner.\r\n    this._exit()\r\n  }\r\n\r\n  /** Exit the experiment environment and execute the optional callback. */\r\n  _exit () {\r\n    // Leave the full screen mode\r\n    this._screen._fullScreenExit()\r\n\r\n    // Reset te size of the container and the canvas.\r\n    this._experiment._canvas._exitDisplay()\r\n\r\n    // Clear the experiment item.\r\n    this._experiment = null\r\n\r\n    // Check if a callback function is defined.\r\n    if (this._onFinished) {\r\n      // Execute callback function.\r\n      this._onFinished(this._data, this._session._session)\r\n    }\r\n  }\r\n\r\n  /** Exit a running experiment. */\r\n  exit () {\r\n    // Set state of the event system to break.\r\n    this._events._state = constants.TIMER_BREAK\r\n  }\r\n\r\n  /** Run an experiment */\r\n  run (context) {\r\n    // Build the experiment.\r\n    this._setupContext(context)\r\n  }\r\n}\r\n","/* eslint-disable no-undef */\n/* eslint-disable no-extend-native */\n/*\n * OsWeb\n *\n * An experiment research tool written in Javascript (ES2016) and HTML to be\n * used in Qualtrics or other web-based tools. Based upon OpenSesame.\n *\n * Author: drs. J. Bos, D. Schreij & S. Mathot\n *\n * Copyright (c) University of Groningen\n * Faculty of Behavioural and Social Sciences\n * Technical Support Service\n *\n */\n\nimport Runner from './system/runner.js'\n\nexport const VERSION_NAME = OSWEB_VERSION_NAME\nexport const VERSION_NUMBER = OSWEB_VERSION_NO\n\n// Add replaceAll function to string prototype\n// eslint-disable-next-line no-extend-native\nString.prototype.replaceAll = function (str1, str2, ignore) {\n  return this.replace(\n    new RegExp(\n      str1.replace(/([/,!\\\\^${}[]\\(\\)\\.\\*\\+\\?\\|<>-&])/g, '\\\\$&'),\n      (ignore ? 'gi' : 'g')),\n    (typeof (str2) === 'string') ? str2.replace(/\\$/g, '$$$$') : str2)\n}\n\n// Add _pySlide function to string prototype (HACK for the filbert interpreter).\nString.prototype._pySlice = function (start, end, step) {\n  if (end !== null) {\n    return this.slice(start, end)\n  } else {\n    return this.slice(start)\n  }\n}\n\n// Create the osweb library container.\nconst osweb = {\n  printVersionInfo: function () {\n    // Show library name and library version number in the console.\n    console.log(`${VERSION_NAME} v${VERSION_NUMBER}`)\n  },\n  getRunner: function (target) {\n    return new Runner(target)\n  }\n}\n\nexport default osweb\n","/* This is the entry script for the webpack builder\nThis script ties all needed modules or files together and provides the\ncorrect setting for the webpack-devserver\n*/\nimport './scss/osweb.scss'\nimport osweb from './js/osweb/index.js'\n\nif (typeof window !== 'undefined') {\n  window.alertify = require('alertifyjs')\n  require('alertifyjs/build/css/alertify.css')\n  require('alertifyjs/build/css/themes/default.css')\n  window.osweb = osweb\n  window.osweb.printVersionInfo()\n}\n\nif (module.hot) {\n  module.hot.accept()\n}\n","import { Container, Graphics, Sprite, Text, Texture } from 'pixi.js'\nimport Styles from './styles.js'\n\n/** Class representing a drawing canvas. */\nexport default class Canvas {\n  /**\n   * Create a canvas object which is used to show all visual stimuli.\n   * @param {Object} experiment - The experiment to which the canvas belongs.\n   * @param {Boolean} auto_prepare - If true the canvas is prepared after drawing.\n   * @param {Object} style_args - Optional styling argument for the canvas.\n   */\n  constructor (experiment, auto_prepare) {\n    // Create and set public properties.\n    this.auto_prepare = (typeof auto_prepare === 'undefined') ? true : auto_prepare // Set autoprepare toggle (not supported yet).\n    this.experiment = experiment // Anchor to the experiment object.\n\n    // Create and set private properties.\n    this._container = new Container() // Create the container which represents the canvas.\n    this._font_string = 'bold 18px Courier New' // Default font definition string.\n    this._height = this.experiment._runner._renderer.height // Height of the HTML canvas used for drawing.\n    this._styles = new Styles() // The style container.\n    this._width = this.experiment._runner._renderer.width // Width of the HTML canvas used for drawing.\n    this._textures = []\n  }\n\n  /**\n   * Calculate the coordinates for the arraw shape.\n   * @param {Number} sx - The starting x coordinate of the element.\n   * @param {Number} sy - The starting y coordinate of the element.\n   * @param {Number} ex - The ending x coordinate of the element.\n   * @param {Number} ey - The ending y coordinate of the element.\n   * @param {Number} bodyWidth - The width of the element body.\n   * @param {Number} bodyLength - The height of the element body.\n   * @param {Number} headWidth - The width of the element head.\n   * @return {Array} - The coordinates defining the arrow element.\n   */\n  _arrow_shape (sx, sy, ex, ey, bodyWidth, bodyLength, headWidth) {\n    // Length\n    var d = Math.sqrt(Math.pow(ey - sy, 2) + Math.pow(sx - ex, 2))\n    var angle = Math.atan2(ey - sy, ex - sx)\n    var _headWidth = (1 - bodyWidth) / 2.0\n    bodyWidth = bodyWidth / 2.0\n\n    // calculate coordinates\n    var p4 = [ex, ey]\n    var p1 = [sx + bodyWidth * headWidth * Math.cos(angle - Math.PI / 2), sy + bodyWidth * headWidth * Math.sin(angle - Math.PI / 2)]\n    var p2 = [p1[0] + bodyLength * Math.cos(angle) * d, p1[1] + bodyLength * Math.sin(angle) * d]\n    var p3 = [p2[0] + _headWidth * headWidth * Math.cos(angle - Math.PI / 2), p2[1] + _headWidth * headWidth * Math.sin(angle - Math.PI / 2)]\n    var p7 = [sx + bodyWidth * headWidth * Math.cos(angle + Math.PI / 2), sy + bodyWidth * headWidth * Math.sin(angle + Math.PI / 2)]\n    var p6 = [p7[0] + bodyLength * Math.cos(angle) * d, p7[1] + bodyLength * Math.sin(angle) * d]\n    var p5 = [p6[0] + _headWidth * headWidth * Math.cos(angle + Math.PI / 2), p6[1] + _headWidth * headWidth * Math.sin(angle + Math.PI / 2)]\n\n    return [p1, p2, p3, p4, p5, p6, p7]\n  }\n\n  /**\n   * Checks if the supplied string contains HTML markup.\n   * @param {String} str - The string to check.\n   * @return {Boolean} - True if HTML markup was found, false if not.\n   */\n  _containsHTML (str) {\n    let doc\n    try {\n      doc = new DOMParser().parseFromString(str, 'text/html')\n      return Array.from(doc.childNodes).some(node => node.nodeType === 1)\n    } catch (e) {\n      console.error('Could not parse DOM: ' + e.message)\n    }\n  }\n\n  /** Exit the display and return to default settings. */\n  _exitDisplay () {\n    // Clear container.\n    this.clear()\n\n    // Set the cursor visibility to default (visible).\n    this.experiment._runner._renderer.view.style.cursor = 'default'\n\n    //  Set the renderer dimensions.\n    this.experiment._runner._renderer.resize(800, 600)\n\n    // Clear the renderer.\n    this.experiment._runner._renderer.backgroundColor = 0x000000\n    this.experiment._runner._renderer.clear()\n    this.experiment._runner._renderer.render(this._container)\n\n    try {\n      document.body.style.backgroundColor = '#FFFFFF'\n    } catch (e) {\n      console.log('Could not reset body color to white', e)\n    }\n  }\n\n  /**\n   * Checks if addiotional style is defined otherwise use default.\n   * @param {Object} styleArgs - The additional style.\n   * @return {Object} - returns a style object.\n   */\n  _getStyle (styleArgs) {\n    // Check if the supplied style does exist.\n    if (typeof (styleArgs) === 'undefined') {\n      return this._styles\n    } else {\n      const styles = new Styles()\n      Object.assign(styles, styleArgs)\n      return styles\n    }\n  }\n\n  /**\n   * Calculates the height, ascent en descent in pixels for the given font.\n   * @param {String} textLine The line of text.\n   * @param {String} fontFamily The font family to use.\n   * @param {Number} fontSize The size of the font.\n   * @return {Object} object containing the height, ascent en descent of the text.\n   */\n  _getTextBaseline (textLine, fontFamily, fontSize, fontBold) {\n    // Create the text element.\n    const text = document.createElement('span')\n    text.style.fontFamily = fontFamily || 'Arial'\n    text.style.fontWeight = (fontBold === true) ? 'bold' : 'normal'\n    text.style.fontSize = String(fontSize) + 'px'\n    text.innerHTML = textLine\n    // Create the calculation div.\n    const block = document.createElement('div')\n    block.style.display = 'inline-block'\n    block.style.lineHeight = 'normal'\n    // block.style.width = '1px'\n    // block.style.height = '0px'\n    // Create the container div.\n    const div = document.createElement('div')\n    div.append(text, block)\n    document.body.appendChild(div)\n\n    // Set the variables.\n    const result = {}\n    let rect\n    let top1\n    let top2\n\n    // Calculate the ascent\n    block.style.verticalAlign = 'baseline'\n    rect = block.getBoundingClientRect()\n    top1 = rect.top + document.body.scrollTop\n    rect = text.getBoundingClientRect()\n    top2 = rect.top + document.body.scrollTop\n    result.ascent = Math.round(top1 - top2)\n\n    // Calculate the descent and the heigt.\n    block.style.verticalAlign = 'bottom'\n    rect = block.getBoundingClientRect()\n    top1 = rect.top + document.body.scrollTop\n    rect = text.getBoundingClientRect()\n    top2 = rect.top + document.body.scrollTop\n    result.height = Math.round(top1 - top2)\n    result.descent = result.height - result.ascent\n\n    document.body.removeChild(div)\n\n    // Return the result.\n    return result\n  }\n\n  /**\n   * Returns the correct envelop setting to use.\n   * @param {String} env - Envelop parameter.\n   * @return {String} - The envelop type to use.\n   */\n  _match_env (env) {\n    if (['c', 'circular', 'round'].includes(env)) {\n      return 'c'\n    } else if (['g', 'gaussian', 'gauss', 'normal', 'rect', 'square'].includes(env)) {\n      return 'g'\n    } else if (['rectangular', 'rectangle'].includes(env)) {\n      return 'r'\n    } else if (['l', 'linear', 'lin', 'ln'].includes(env)) {\n      return 'l'\n    } else {\n      return 'g'\n    }\n  }\n\n  /**\n   * Parse recursively a HTML based text area and returns a set of text elements.\n   * @param {Object} htmlNode - The html node to process.\n   * @param {Object} textBlock - Object containing the translated text block.\n   * @param {Object} currentStyle - Object containing the current style to use.\n   */\n  _parseHtmlNode (htmlNode, textBlock, currentStyle) {\n    // Create a style for the current leven\n    var elementStyle = this._getStyle(currentStyle)\n\n    // Process the node content itself.\n    switch (htmlNode.nodeType) {\n    case 1:\n      // Select the proper html tag\n      switch (htmlNode.nodeName) {\n      case 'B':\n        // Process bold tag.\n        elementStyle.font_bold = true\n        break\n      case 'BR':\n        // Process break tag, get the total width of the line.\n        textBlock.row.height = (textBlock.row.height > 0) ? textBlock.row.height : textBlock.prev_height\n        textBlock.row.width = (textBlock.x_pos > textBlock.row.width) ? textBlock.x_pos : textBlock.row.width\n        textBlock.width = (textBlock.width > textBlock.row.width) ? textBlock.width : textBlock.row.width\n        textBlock.y_pos = textBlock.y_pos + textBlock.row.height\n        textBlock.x_pos = 4\n        textBlock.height = textBlock.height + textBlock.row.height\n        // new row with elements.\n        textBlock.rows.push(textBlock.row)\n        textBlock.row = {\n          ascent: 0,\n          width: 0,\n          height: 0,\n          text_elements: [],\n          text_dimensions: [],\n          text_underline: []\n        }\n        break\n      case 'I':\n        // Process italic tag.\n        elementStyle.font_italic = true\n        break\n      case 'SPAN':\n        // Get the style tokens.\n        if (htmlNode.attributes.length > 0) {\n          var tokens = htmlNode.attributes[0].value.split(';')\n          // parse through the style tokens.\n          for (var j = 0; j < tokens.length; j++) {\n            var property = tokens[j].slice(0, tokens[j].indexOf(':'))\n            var value = tokens[j].slice(tokens[j].indexOf(':') + 1, tokens[j].length)\n            // Set the supported properties.\n            switch (property) {\n            case 'color':\n              elementStyle.color = value\n              break\n            case 'font-size':\n              elementStyle.font_size = value\n              break\n            case 'font-family':\n              elementStyle.font_family = value\n              break\n            }\n          }\n        }\n        break\n      case 'U':\n        // Process underline tag.\n        elementStyle.font_underline = true\n        break\n      }\n      break\n    case 3:\n      // Create the text style element.\n      var textStyle = {\n        fontFamily: elementStyle.font_family,\n        fontStyle: (elementStyle.font_italic === true) ? 'italic' : 'normal',\n        fontWeight: (elementStyle.font_bold === true) ? 'bold' : 'normal',\n        fontSize: elementStyle.font_size,\n        fill: elementStyle.color\n      }\n\n      // Create the text element and get the dimension.\n      var bounds = {}\n      var textElement = new Text(htmlNode.textContent, textStyle)\n      textElement.getBounds(false, bounds)\n\n      // Get the height and descent (for vertical positioning);\n      var dimension = this._getTextBaseline(htmlNode.textContent, elementStyle.font_family, elementStyle.font_size, elementStyle.font_bold)\n\n      // Position the text element and update the width.\n      textElement.x = textBlock.x_pos\n      textElement.y = textBlock.y_pos\n      textBlock.x_pos = textBlock.x_pos + bounds.width\n      textBlock.row.width = (textBlock.x_pos > textBlock.row.width) ? textBlock.x_pos : textBlock.row.width\n      textBlock.width = (textBlock.width > textBlock.row.width) ? textBlock.width : textBlock.row.width\n      textBlock.row.height = ((bounds.height + 1) > textBlock.row.height) ? bounds.height + 1 : textBlock.row.height\n      textBlock.row.ascent = (dimension.ascent > textBlock.row.ascent) ? dimension.ascent : textBlock.row.ascent\n      textBlock.prev_height = textBlock.row.height\n      textBlock.row.text_elements.push(textElement)\n      textBlock.row.text_dimensions.push(dimension)\n      textBlock.row.text_underline.push(elementStyle.font_underline)\n      break\n    }\n\n    // Process the child nodes recursive (if any).\n    for (var i = 0; i < htmlNode.childNodes.length; i++) {\n      this._parseHtmlNode(htmlNode.childNodes[i], textBlock, elementStyle, (i === (htmlNode.childNodes.length - 1)))\n    }\n  }\n\n  /**\n   * Resizes the container div (osweb_div), which contains all elements on display\n   * @param {Number} width - Width to set.\n   * @param {Number} height -Hheight to set.\n   */\n  _resizeContainer (width, height) {\n    // Set the parent container dimensions.\n    this.experiment._runner._container.style.width = width + 'px'\n    this.experiment._runner._container.style.height = height + 'px'\n  }\n\n  /**\n   * Draws an arrow element on the canvas.\n   * @param {Number} sx - The starting x coordinate of the element.\n   * @param {Number} sy - The starting y coordinate of the element.\n   * @param {Number} ex - The ending x coordinate of the element.\n   * @param {Number} ey - The ending y coordinate of the element.\n   * @param {Number} bodyWidth - The width of the element body.\n   * @param {Number} bodyLength - The height of the element body.\n   * @param {Number} headWidth - The width of the element head.\n   * @param {Object} styleArgs - Optional styling arguments for the element.\n   */\n  arrow (sx, sy, ex, ey, bodyWidth, bodyLength, headWidth, styleArgs) {\n    // Calculate coordinate points for the arrow.\n    var points = this._arrow_shape(sx, sy, ex, ey, bodyWidth, bodyLength, headWidth)\n\n    // Draw the arrow as a polygon.\n    this.polygon(points, styleArgs)\n  }\n\n  /**\n   * Draws an arrow element on the canvas.\n   * @param {Number} sx - The x coordinate of the element.\n   * @param {Number} sy - The y coordinate of the element.\n   * @param {Number} ex - The radius the element.\n   * @param {Object} styleArgs - Optional styling argument for the element.\n   */\n  circle (x, y, r, styleArgs) {\n    // Get the style\n    var elementStyle = this._getStyle(styleArgs)\n\n    // Create a circle element.\n    var circle = new Graphics()\n    circle.lineStyle(elementStyle.penwidth, elementStyle.color, 1)\n    if (elementStyle.fill === true) {\n      circle.beginFill(elementStyle.color)\n      circle.drawCircle(0, 0, r)\n      circle.endFill()\n    } else {\n      circle.drawCircle(0, 0, r)\n    }\n    circle.x = x\n    circle.y = y\n\n    // Add the circle element to container.\n    this._container.addChild(circle)\n  }\n\n  /**\n   * Clear the current canvas.\n   * @param {Number} background_color - The color to draw (optional).\n   * @param {Object} style_args - JSON object containing style arguments (optional).\n   */\n  clear (backgroundColor, styleArgs) {\n    // Clear the stage by temoving al the child elements.\n    for (var i = this._container.children.length - 1; i >= 0; i--) {\n      this._container.removeChild(this._container.children[i])\n    }\n    let texture\n    while (this._textures.length > 0) {\n      texture = this._textures.pop()\n      texture.destroy(true)\n    }\n  }\n\n  /**\n   * Copies the contents of the passed canvas onto current one.\n   * @param  {osweb.canvas} canvas The source canvas to copy\n   * @return {void}\n   */\n  copy (canvas) {\n    this.clear()\n\n    // Loop over the shapes on the passed canvas and copy them onto the current one\n    for (const shape of canvas._container.children) {\n      this._container.addChild(shape.clone())\n    }\n  }\n\n  /**\n   * Draws an ellipse element on the canvas.\n   * @param {Number} x - The x coordinate of the element.\n   * @param {Number} y - The y coordinate of the element.\n   * @param {Number} w - The width the element.\n   * @param {Number} h - The height the element.\n   * @param {Object} styleArgs - Optional styling argument for the element.\n   */\n  ellipse (x, y, w, h, styleArgs) {\n    // Get the style\n    var elementStyle = this._getStyle(styleArgs)\n\n    // Create an ellipse element.\n    var ellipse = new Graphics()\n    ellipse.lineStyle(elementStyle.penwidth, elementStyle.color, 1)\n    if (elementStyle.fill === true) {\n      ellipse.beginFill(elementStyle.color)\n      ellipse.drawEllipse(0, 0, (w / 2), (h / 2))\n      ellipse.endFill()\n    } else {\n      ellipse.drawEllipse(0, 0, (w / 2), (h / 2))\n    }\n    ellipse.x = x + (w / 2)\n    ellipse.y = y + (h / 2)\n\n    // Add the ellipse element to container.\n    this._container.addChild(ellipse)\n  }\n\n  /**\n   * Draws a fixdot element on the canvas.\n   * @param {int} x - The x coordinate of the element.\n   * @param {int} y - The y coordinate of the element.\n   * @param {String} - The style of the fixation dot.\n   * @param {Object} styleArgs - Optional styling argument for the element.\n   */\n  fixdot (x, y, style, styleArgs) {\n    // Check the color and style arguments.\n    style = (typeof style === 'undefined') ? 'default' : style\n\n    // Get the style\n    var elementStyle = this._getStyle(styleArgs)\n\n    if (typeof x === 'undefined') {\n      if (this.uniform_coordinates === true) {\n        x = 0\n      } else {\n        x = this._width / 2\n      }\n    }\n    if (typeof y === 'undefined') {\n      if (this.uniform_coordinates === true) {\n        y = 0\n      } else {\n        y = this._height / 2\n      }\n    }\n\n    var s = 4\n    var h = 2\n    if (style.indexOf('large') !== -1) {\n      s = 16\n    } else if ((style.indexOf('medium') !== -1) || (style === 'default')) {\n      s = 8\n    } else if (style.indexOf('small') !== -1) {\n      s = 4\n    } else {\n      this.experiment._runner._debugger.addError('Unknown style: ' + style)\n    }\n\n    var styles = new Styles()\n    if ((style.indexOf('open') !== -1) || (style === 'default')) {\n      styles._fill = true\n      styles._background_color = elementStyle.color\n      styles._color = elementStyle.color\n      this.ellipse(x - s, y - s, 2 * s, 2 * s, styles)\n      styles._background_color = elementStyle.background_color\n      styles._color = elementStyle.background_color\n      this.ellipse(x - h, y - h, 2 * h, 2 * h, styles)\n    } else if (style.indexOf('filled') !== -1) {\n      styles._fill = true\n      styles._background_color = elementStyle.color\n      styles._color = elementStyle.color\n      this.ellipse(x - s, y - s, 2 * s, 2 * s, styles)\n    } else if (style.indexOf('cross') !== -1) {\n      styles._penwidth = 1\n      styles._color = elementStyle.color\n      this.line(x, y - s, x, y + s, styles)\n      this.line(x - s, y, x + s, y, styles)\n    } else {\n      this.experiment._runner._debugger.addError('Unknown style: ' + style)\n    }\n  }\n\n  /**\n   * Draws a gabor element on the canvas.\n   *\n   * @param {Number} x The x coordinate of the element\n   * @param {Number} y The y coordinate of the element\n   * @param {float} orient The rotation of the element (range between 0 and 1)\n   * @param {float} freq The frequency of the bands\n   * @param {String} env The type of envelope used for the element\n   * @param {*} size The size of the gabor\n   * @param {*} stdev The standard deviation of the guass fade\n   * @param {*} phase The phase of the element (start offset)\n   * @param {*} color1 The first color for the element\n   * @param {*} color2 The second color for the element\n   * @param {*} bgmode The background mode of the element\n   * @memberof Canvas\n   */\n  gabor (x, y, orient, freq, env, size, stdev, phase, color1, color2, bgmode) {\n    // Returns a surface containing a Gabor patch.\n    env = this._match_env(env)\n\n    // Create a temporary canvas to make an image data array.\n    const canvas = document.createElement('canvas')\n    canvas.width = size\n    canvas.height = size\n    const ctx = canvas.getContext('2d')\n    const px = ctx.getImageData(0, 0, size, size)\n\n    // Conver the orientation to radians.\n    orient = Math.PI * orient / -180\n    color1 = this._styles._convertColorValueToRGB(color1)\n    color2 = this._styles._convertColorValueToRGB(color2)\n\n    // rx and ry reflect the real coordinates in the target image\n    for (let rx = 0; rx < size; rx++) {\n      for (let ry = 0; ry < size; ry++) {\n        // Distance from the center\n        const dx = rx - 0.5 * size\n        const dy = ry - 0.5 * size\n\n        // Get the coordinates (x, y) in the unrotated Gabor patch.\n        const t = Math.atan2(dy, dx) + orient\n        const r = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2))\n        const ux = r * Math.cos(t)\n        const uy = r * Math.sin(t)\n        let f\n\n        // Get the amplitude without the envelope (0 .. 1).\n        let amp = 0.5 + 0.5 * Math.cos(2.0 * Math.PI * (ux * freq + phase))\n\n        // The envelope adjustment\n        if (env === 'g') {\n          // $f = exp(-0.5 * pow($x / $std, 2) - 0.5 * pow($y / $std, 2));\n          f = Math.exp(-0.5 * Math.pow(ux / stdev, 2) - 0.5 * Math.pow(uy / stdev, 2))\n        } else if (env === 'l') {\n          f = Math.max(0, (0.5 * size - r) / (0.5 * size))\n        } else if (env === 'c') {\n          if (r > 0.5 * size) {\n            f = 0.0\n          } else {\n            f = 1.0\n          }\n        } else {\n          f = 1.0\n        }\n\n        // Apply the envelope\n        if (bgmode === 'avg') {\n          amp = amp * f + 0.5 * (1.0 - f)\n        } else {\n          amp = amp * f\n        }\n\n        // Recalculate the color values.\n        const color = {\n          r: color1[0] * amp + color2[0] * (1.0 - amp),\n          g: color1[1] * amp + color2[1] * (1.0 - amp),\n          b: color1[2] * amp + color2[2] * (1.0 - amp)\n        }\n\n        // Set the color values at pixel level.\n        var position = rx * 4 + (ry * size * 4)\n        px.data[position] = color.r\n        px.data[position + 1] = color.g\n        px.data[position + 2] = color.b\n        px.data[position + 3] = 255\n      }\n    }\n\n    // Put the calculated data back on the canvas and create an image of it.\n    ctx.putImageData(px, 0, 0)\n\n    // Retrieve the image from the recourses\n    const texture = Texture.from(canvas)\n    this._textures.push(texture)\n    var sprite = new Sprite(texture)\n\n    // Position the image.\n    sprite.x = x - (size / 2)\n    sprite.y = y - (size / 2)\n\n    // Add the image to the stage.\n    this._container.addChild(sprite)\n  }\n\n  /**\n   * Returns the canvas height\n   * @return {Number} - The height of the canvas in pixels.\n   */\n  get height () {\n    return this._height\n  }\n\n  /**\n   * Returns the canvas width\n   * @return {Number} - The width of the canvas in pixels.\n   */\n  get width () {\n    return this._width\n  }\n\n  /**\n   * Draws an image element on the canvas.\n   * @param {String} fname - The name of the element to draw.\n   * @param {Boolean|Number|String} center - If true the image is centered.\n   * @param {Number} x - The x coordinate of the element.\n   * @param {Number} y - The y coordinate of the element.\n   * @param {Number} scale - The scaling factor of the element.\n   * @param {Number} rotation - Clockwise rotation in degrees.\n   */\n  image (fname, center, x, y, scale, rotation) {\n    const name = this.experiment._runner._syntax.remove_quotes(fname)\n    const path = this.experiment._runner._pool[name]\n    if (typeof (path) === 'undefined') {\n      this.experiment._runner._debugger.addError(`\"${fname}\" does not exist`)\n    }\n    const img = path.data\n    // Create a temporary canvas to make an image data array.\n    const canvas = document.createElement('canvas')\n    canvas.width = img.width\n    canvas.height = img.height\n    const ctx = canvas.getContext('2d')\n    ctx.drawImage(img, 0, 0)\n    const texture = Texture.from(canvas)\n    this._textures.push(texture)\n    const sprite = new Sprite(texture)\n    sprite.anchor.set(.5)\n    if (typeof scale !== 'undefined') {\n      sprite.scale.x = scale\n      sprite.scale.y = scale\n    }\n    if (typeof rotation !== 'undefined')\n      sprite.angle = rotation\n    // Position the image\n    if ([1, '1', true, 'yes'].indexOf(center) !== -1) {\n      sprite.x = x\n      sprite.y = y\n    } else {\n      sprite.x = x + (sprite.width / 2)\n      sprite.y = y + (sprite.height / 2)\n    }\n    this._container.addChild(sprite)\n  }\n\n  /**\n   * Initializes the  display container on which the canvas is displayed.\n   * @param {Object} experiment - The experiment to which the canvas belongs.\n   */\n  init_display (experiment) {\n    // Set the dimension properties.\n    this._height = experiment.vars.height\n    this._width = experiment.vars.width\n\n    // Set the renderer dimensions.\n    experiment._runner._renderer.resize(this._width, this._height)\n\n    // Set the renderer background color.\n    experiment._runner._renderer.clear(this._styles._convertColorValue(experiment.vars.background, 'number'))\n    experiment._runner._renderer.backgroundColor = this._styles._convertColorValue(experiment.vars.background, 'number')\n\n    // PIXU: Set the cursor visibility to none (default).\n    experiment._runner._renderer.view.style.cursor = 'none'\n\n    // Start the fullscreen mode (if enabled).\n    experiment._runner._screen._fullScreenInit()\n\n    // Set focus to the experiment canvas.\n    experiment._runner._renderer.view.focus()\n  }\n\n  /**\n   * Draws a line element on the canvas.\n   * @param {Number} sx - The starting x coordinate of the element.\n   * @param {Number} sy - The starting y coordinate of the element.\n   * @param {Number} ex - The ending x coordinate of the element.\n   * @param {Number} ey - The ending y coordinate of the element.\n   * @param {Object} styleArgs - Optional styling argument for the element.\n   */\n  line (sx, sy, ex, ey, styleArgs) {\n    // Get the style\n    var elementStyle = this._getStyle(styleArgs)\n\n    // Create a line element.\n    var line = new Graphics()\n    line.lineStyle(elementStyle.penwidth, elementStyle.color, 1)\n    line.moveTo(0, 0)\n    line.lineTo(ex - sx, ey - sy)\n    line.x = sx\n    line.y = sy\n\n    // Add the line element to container.\n    this._container.addChild(line)\n  }\n\n  /**\n   * Draws a gabor element on the canvas.\n   * @param {Number} x - The x coordinate of the element.\n   * @param {Number} y - The y coordinate of the element.\n   * @param {String} env - The type of envelop used  for the element.\n   * @param {Object} size - Optional styling argument for the element.\n   * @param {Number} stdev - The standard deviation  for the element.\n   * @param {Number|String} color1 - The first color for the element.\n   * @param {Number|String} color2 - Teh second color for the element.\n   * @param {String} bgmode - The type of background mode for the element.\n   */\n  noise (x, y, env, size, stdev, color1, color2, bgmode) {\n    // Returns a surface containing a noise patch.\n    env = this._match_env(env)\n\n    // Create a temporary canvas to make an image data array.\n    var canvas = document.createElement('canvas')\n    canvas.width = size\n    canvas.height = size\n    var ctx = canvas.getContext('2d')\n    var px = ctx.getImageData(0, 0, size, size)\n\n    // Create a surface\n    color1 = this._styles._convertColorValueToRGB(color1)\n    color2 = this._styles._convertColorValueToRGB(color2)\n\n    // rx and ry reflect the real coordinates in the target image\n    for (let rx = 0; rx < size; rx++) {\n      for (let ry = 0; ry < size; ry++) {\n        // Distance from the center\n        const ux = rx - 0.5 * size\n        const uy = ry - 0.5 * size\n        const r = Math.sqrt(Math.pow(ux, 2) + Math.pow(uy, 2))\n        let f\n        // Get the amplitude without the envelope (0 .. 1)\n        var amp = Math.random()\n        // The envelope adjustment\n        if (env === 'g') {\n          f = Math.exp(-0.5 * Math.pow(ux / stdev, 2) - 0.5 * Math.pow(uy / stdev, 2))\n        } else if (env === 'l') {\n          f = Math.max(0, (0.5 * size - r) / (0.5 * size))\n        } else if (env === 'c') {\n          if (r > 0.5 * size) {\n            f = 0.0\n          } else {\n            f = 1.0\n          }\n        } else {\n          f = 1.0\n        }\n\n        // Apply the envelope\n        if (bgmode === 'avg') {\n          amp = amp * f + 0.5 * (1.0 - f)\n        } else {\n          amp = amp * f\n        }\n\n        // Recalculate the collor values.\n        const color = {\n          r: color1[0] * amp + color2[0] * (1.0 - amp),\n          g: color1[1] * amp + color2[1] * (1.0 - amp),\n          b: color1[2] * amp + color2[2] * (1.0 - amp)\n        }\n\n        // Set the color values at pixel level.\n        var position = rx * 4 + (ry * size * 4)\n        px.data[position] = color.r\n        px.data[position + 1] = color.g\n        px.data[position + 2] = color.b\n        px.data[position + 3] = 255\n      }\n    }\n\n    // Put the calculated data back on the canvas and create an image of it.\n    ctx.putImageData(px, 0, 0)\n\n    // Retrieve the image from the recourses\n    const texture = Texture.from(canvas)\n    this._textures.push(texture)\n    var sprite = new Sprite(texture)\n\n    // Position the image.\n    sprite.x = x - (size / 2)\n    sprite.y = y - (size / 2)\n\n    // Add the image to the stage.\n    this._container.addChild(sprite)\n  }\n\n  /**\n   * Draws a polygon element on the canvas.\n   * @param {Array} verticles - The coordinates of the element.\n   * @param {Object} styleArgs - Optional styling argument for the element.\n   */\n  polygon (verticles, styleArgs) {\n    // Get the style\n    var elementStyle = this._getStyle(styleArgs)\n\n    // Adjust the points.\n    var path = []\n    for (var i = 0; i < verticles.length; i++) {\n      path.push(verticles[i][0])\n      path.push(verticles[i][1])\n    }\n    path.push(verticles[0][0])\n    path.push(verticles[0][1])\n\n    // Create a polygon element.\n    var polygon = new Graphics()\n    polygon.lineStyle(elementStyle.penwidth, elementStyle.color, 1)\n    if (elementStyle.fill === true) polygon.beginFill(elementStyle.color)\n    polygon.drawPolygon(path)\n    if (elementStyle.fill === true) polygon.endFill()\n\n    // Add the polygon item to container.\n    this._container.addChild(polygon)\n  }\n\n  /** Implements the prepare phase of a canvas. */\n  prepare () {}\n\n  /**\n   * Draws a rectangle element on the canvas.\n   * @param {Number} x - The x coordinate of the element.\n   * @param {Number} y - The y coordinate of the element.\n   * @param {Number} w - The width of the element.\n   * @param {Number} h - The height of the element.\n   * @param {Object} styleArgs - Optional styling argument for the element.\n   */\n  rect (x, y, w, h, styleArgs) {\n    // Get the style\n    var elementStyle = this._getStyle(styleArgs)\n    // Create a rectangle element.\n    var rectangle = new Graphics()\n    rectangle.lineStyle(elementStyle.penwidth, elementStyle.color, 1)\n    if (elementStyle.fill === true) {\n      rectangle.beginFill(elementStyle.color)\n      rectangle.drawRect(0, 0, w, h)\n      rectangle.endFill()\n    } else {\n      rectangle.drawRect(0, 0, w, h)\n    }\n    rectangle.x = x\n    rectangle.y = y\n\n    // Add the rectangle element to container.\n    this._container.addChild(rectangle)\n  }\n\n  /**\n   * Returns the size ion pixels of the canvas.\n   * @return {Array} - The widht an height as an array tupple.\n   */\n  size () {\n    // Create object tuple.\n    var size = {\n      width: this._width,\n      height: this._height\n    }\n    return size\n  }\n\n  /**\n   * Show a canvas on the ptimary canvas.\n   * @param {Object} experiment - The experiment to which the canvas belongs.\n   * @return {Number} - The current time stamp.\n   */\n  show (experiment) {\n    // Check parameter.\n    experiment = (typeof experiment !== 'undefined') ? experiment : this.experiment\n\n    // Add the container to the stage object and update the stage.\n    this.experiment._currentCanvas = this\n\n    // Set the scaling.\n    this._container.scale.x = this.experiment._scale_x\n    this._container.scale.y = this.experiment._scale_y\n\n    // Set renderer background and render the content.\n    this.experiment._runner._renderer.backgroundColor = this._styles._background_color\n    try {\n      const c = this._styles.rgb\n      document.body.style.backgroundColor = `rgb(${c.r},${c.g},${c.b})`\n    } catch (e) {\n      console.error(e)\n    }\n    this.experiment._runner._renderer.render(this._container)\n    return (experiment != null ? experiment.clock.time() : null)\n  }\n\n  /**\n   * Draws a text element on the canvas.\n   * @param {String} txt - The x coordinate of the element.\n   * @param {Boolean} center - If true the text must be centered.\n   * @param {Number} x - The x coordinate of the element.\n   * @param {Number} y - The y coordinate of the element.\n   * @param {Boolean} html - If true the text parameter contains HTML tags.\n   * @param {Object} styleArgs - Optional styling argument for the element.\n   */\n  text (txt, center, x, y, html, styleArgs) {\n    // Newlines are not dealt with correctly, so we convert them to <br />\n    // tags, which results in the same behavior as the desktop.\n    txt = txt.toString().replace('\\n', '<br />')\n    // Get the style\n    const elementStyle = this._getStyle(styleArgs)\n\n    // Only jump through the HTML rendering hoops if the html == 'yes' and\n    // text actually contains HTML markup.\n    if ((html === 'yes') && (this._containsHTML(txt))) {\n      //  Define the text block object.\n      const textBlock = {\n        element_style: elementStyle,\n        height: 0,\n        row: {\n          ascent: 0,\n          height: 0,\n          text_elements: [],\n          text_dimensions: [],\n          text_underline: [],\n          width: 0\n        },\n        rows: [],\n        styles: [],\n        width: 0,\n        x_pos: 4,\n        y_pos: 0\n      }\n\n      // First create a div container for parsing the html text.\n      const div = document.createElement('div')\n      document.body.appendChild(div)\n      div.style.fontFamily = elementStyle.font_family\n      div.style.fontSize = String(elementStyle.font_size) + 'px'\n      div.style.fontWeight = (elementStyle.font_bold === true) ? 'bold' : 'normal'\n      div.style.lineHeight = 'normal'\n      div.style.display = 'inline-block'\n      div.style.visibility = 'hidden'\n      div.innerHTML = txt\n\n      // Parse the html recursive.\n      this._parseHtmlNode(div, textBlock, elementStyle)\n\n      // Remove the html div.\n      document.body.removeChild(div)\n\n      // Add the last row (if any).\n      if (textBlock.row.text_elements.length !== 0) {\n        textBlock.height = textBlock.height + textBlock.row.height\n        textBlock.rows.push(textBlock.row)\n      }\n\n      // Recalculate the x and y positions depending on height, width and centering.\n      textBlock.y_pos = 0\n      for (let i = 0; i < textBlock.rows.length; i++) {\n        // Parse a textline.\n        for (let j = 0; j < textBlock.rows[i].text_elements.length; j++) {\n          // Check for vertical correction.\n          const adjust = textBlock.rows[i].ascent - textBlock.rows[i].text_dimensions[j].ascent\n          textBlock.rows[i].text_elements[j].y = textBlock.y_pos + adjust\n\n          // Check for horizontal centering.\n          if ([1, '1', true, 'yes'].indexOf(center) !== -1) {\n            textBlock.rows[i].text_elements[j].x = textBlock.rows[i].text_elements[j].x + x - (textBlock.rows[i].width / 2)\n            textBlock.rows[i].text_elements[j].y = textBlock.rows[i].text_elements[j].y + y - (textBlock.height / 2)\n          } else {\n            textBlock.rows[i].text_elements[j].x = textBlock.rows[i].text_elements[j].x + x\n            textBlock.rows[i].text_elements[j].y = textBlock.rows[i].text_elements[j].y + y + 6\n          }\n\n          // if underlined add additional styling.\n          if (textBlock.rows[i].text_underline[j] === true) {\n            this.line(textBlock.rows[i].text_elements[j].x,\n              textBlock.rows[i].text_elements[j].y + textBlock.rows[i].text_dimensions[j].ascent + 7,\n              textBlock.rows[i].text_elements[j].x + textBlock.rows[i].text_elements[j].width,\n              textBlock.rows[i].text_elements[j].y + textBlock.rows[i].text_dimensions[j].ascent + 7,\n              elementStyle)\n          }\n\n          //  Add text element to the stage.\n          this._container.addChild(textBlock.rows[i].text_elements[j])\n        }\n        textBlock.y_pos = textBlock.y_pos + textBlock.rows[i].height\n      }\n    } else {\n      //  Create the text element\n      var textStyle = {\n        fontFamily: elementStyle.font_family,\n        fontSize: elementStyle.font_size,\n        fontWeight: (elementStyle.font_bold === true) ? 'bold' : 'normal',\n        fill: elementStyle.color\n      }\n      var textElement = new Text(txt, textStyle)\n\n      if ([1, '1', true, 'yes'].indexOf(center) !== -1) {\n        textElement.x = x - (textElement.width / 2)\n        textElement.y = y - (textElement.height / 2)\n      } else {\n        textElement.x = x\n        textElement.y = y\n      }\n\n      //  Add text element to the stage.\n      this._container.addChild(textElement)\n    }\n  }\n}\n","import isInteger from 'lodash/isInteger'\nimport isArray from 'lodash/isArray'\nimport colorConvert from 'color-convert'\n\nconst colorHex = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i\nconst colorRGB255 = /rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)/i\nconst colorRGBPerc = /rgb\\(\\s*([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+))\\s*%\\s*,\\s*([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+))\\s*%\\s*,\\s*([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+))\\s*%\\s*\\)/i\nconst colorHSV = /hsv\\(\\s*([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+))\\s*\\s*,\\s*([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+))\\s*%\\s*,\\s*([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+))\\s*%\\s*\\)/i\nconst colorHSL = /hsl\\(\\s*([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+))\\s*\\s*,\\s*([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+))\\s*%\\s*,\\s*([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+))\\s*%\\s*\\)/i\nconst colorLAB = /lab\\(\\s*([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+))\\s*\\s*,\\s*([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+))\\s*\\s*,\\s*([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+))\\s*\\s*\\)/i\n\n/** Class representing a style container. */\nexport default class Styles {\n  /** Styles is a simple class that holds information about the style. */\n  constructor (item) {\n    this._initConstants()\n    // Set class private properties.\n    if (typeof (item) === 'undefined') {\n      this._background_color = 0x000000\n      this._bidi = false\n      this._color = 'white'\n      this._fill = false\n      this._font_bold = false\n      this._font_family = 'Arial'\n      this._font_italic = false\n      this._font_size = 24\n      this._font_underline = false\n      this._html = false\n      this._penwidth = 1\n    } else {\n      this.background_color = item.vars.get('background', 0x000000)\n      this.bidi = item.vars.get('bidi', 'no')\n      this.color = item.vars.get('foreground', 'white')\n      this.fill = item.vars.get('fill', 'no') === 'yes'\n      this.font_bold = item.vars.get('font_bold', 'no')\n      this.font_family = item.vars.get('font_family', 'Arial')\n      this.font_italic = item.vars.get('font_italic', 'no')\n      this.font_size = item.vars.get('font_size', 24)\n      this.font_underline = item.vars.get('font_underline', 'no')\n      this.html = item.vars.get('html', 'no')\n      this.penwidth = item.vars.get('penwidth', 1)\n    }\n  }\n\n  /**\n   * Converts a color value to a numeric value for use in PIXI. This should\n   * accept all color specifications as described here:\n   * - https://osdoc.cogsci.nl/3.3/manual/python/canvas/#colors\n   * @param {String|Number|Object} color - The color to convert.\n   * @return {Number} - The color value.\n   */\n  _convertColorValue (color) {\n    const [r, g, b] = this._convertColorValueToRGB(color).map(Math.round)\n    return 65536 * r + 256 * g + b\n  }\n  \n  /**\n   * Extracts three float numbers from a color based on a regular expression\n   * that matches three float numbers.\n   * @param {String} color\n   * @return {Array<Number>}\n   **/\n  _matchFloats(color, re) {\n    const m = color.match(re)\n    return [m[1], m[4], m[7]].map(Number)\n  }\n\n  _convertColorValueToRGB (color) {\n    if (typeof (color) === 'string') {\n      const rgb = colorConvert.keyword.rgb(color)\n      if (typeof rgb !== 'undefined')\n        return rgb\n      if (colorHex.test(color) === true)\n        return colorConvert.hex.rgb(color)\n      if (colorRGB255.test(color) === true)\n        return color.match(colorRGB255).slice(1, 4).map(Number)\n      if (colorRGBPerc.test(color) === true)\n        return this._matchFloats(color, colorRGBPerc).map(\n            perc => perc * 2.55)\n      if (colorHSV.test(color) === true)\n        return colorConvert.hsv.rgb(this._matchFloats(color, colorHSV))\n      if (colorHSL.test(color) === true)\n        return colorConvert.hsl.rgb(this._matchFloats(color, colorHSL))\n      if (colorLAB.test(color) === true)\n        return colorConvert.lab.rgb(this._matchFloats(color, colorLAB))\n      if (!isNaN(Number(color)))  // For single numbers a strings\n        color = Number(color)\n    }\n    if (isInteger(color))\n      return [color, color, color]\n    if (isArray(color) && color.length == 3)\n      return color.map(Number)\n    throw 'Invalid color specification: ' + color + ' (' + typeof color + ')'\n  }\n\n  get rgb () {\n    return this._convertColorValue(this._background_color)\n  }\n\n  set rgb (val) {\n  }\n\n  /**\n   * Checks if the passed value is an integer.\n   * @param {Number} value -  The value to check.\n   * @return {Boolean} - True if passed value is an integer.\n   */\n  _isInt (value) {\n    return isInteger(value)\n  }\n\n  /**\n   * Checks if value is possibly specified as 'yes'/'no' or 1/0 instead of\n   * true or false (as is done in OS script). Convert 'yes' and 'no' values\n   * to booleans\n   * @param {Number|String} value - The value to check.\n   * @return {Boolean} - The original boolean, or true if value was 'yes'.\n   */\n  _checkVal (value) {\n    return [true, 'yes', 1, '1'].indexOf(value) !== -1\n  }\n\n  /**\n   * Get the background_color value.\n   * @return {String} The background_color value.\n   */\n  get background_color () {\n    return this._background_color\n  }\n\n  /**\n   * Set the background_color value.\n   * @param {Number|String} val - The background_color value to set.\n   */\n  set background_color (val) {\n    this._background_color = this._convertColorValue(val, 'number')\n  }\n\n  /**\n   * Get the bidi value.\n   * @return {Boolean} The bidi value.\n   */\n  get bidi () {\n    return this._bidi\n  }\n\n  /**\n   * Set the bidi value.\n   * @param {Boolean} val - The bidi value to set.\n   */\n  set bidi (val) {\n    this._bidi = this._checkVal(val)\n  }\n\n  /**\n   * Get the color value.\n   * @return {String} The color value.\n   */\n  get color () {\n    return this._color\n  }\n\n  /**\n   * Set the color value.\n   * @param {Number|String} val - The color value to set.\n   */\n  set color (val) {\n    this._color = this._convertColorValue(val, 'number')\n  }\n\n  /**\n   * Get the fill value.\n   * @return {Boolean} The fill value.\n   */\n  get fill () {\n    return this._fill\n  }\n\n  /**\n   * Set the fill value.\n   * @param {Boolean} val - The fill value to set.\n   */\n  set fill (val) {\n    this._fill = ([1, '1', true, 'yes'].indexOf(val) !== -1)\n  }\n\n  /**\n   * Get the font_bold value.\n   * @return {Boolean} The font_bold value.\n   */\n  get font_bold () {\n    return this._font_bold\n  }\n\n  /**\n   * Set the font_bold value.\n   * @param {Boolean} val - The font_bold value to set.\n   */\n  set font_bold (val) {\n    this._font_bold = this._checkVal(val)\n  }\n\n  /**\n   * Get the font_family value.\n   * @return {String} The font_family value.\n   */\n  get font_family () {\n    return this._font_family\n  }\n\n  /**\n   * Set the font_family value.\n   * @param {String} val - The font_family value to set.\n   */\n  set font_family (val) {\n    if (val in this._DEFAULT_FONTS) {\n      this._font_family = this._DEFAULT_FONTS[val]\n    } else {\n      this._font_family = val\n    }\n  }\n\n  /**\n   * Get the font_italic value.\n   * @return {Boolean} The font_italic value.\n   */\n  get font_italic () {\n    return this._font_italic\n  }\n\n  /**\n   * Set the font_italic value.\n   * @param {Boolean} val - The font_bold value to set.\n   */\n  set font_italic (val) {\n    this._font_italic = this._checkVal(val)\n  }\n\n  /**\n   * Get the font_size value.\n   * @return {Number} The font_size value.\n   */\n  get font_size () {\n    return this._font_size\n  }\n\n  /**\n   * Set the font_size value.\n   * @param {Number} val - The font_size value to set.\n   */\n  set font_size (val) {\n    if (!this._isInt(val)) {\n      // remove px part\n      this._font_size = Number(val.slice(0, -2))\n    } else {\n      this._font_size = val\n    }\n  }\n\n  /**\n   * Get the font_underline value.\n   * @return {Boolean} The font_underline value.\n   */\n  get font_underline () {\n    return this._font_underline\n  }\n\n  /**\n   * Set the font_underline value.\n   * @param {Boolean} val - The font_underline value to set.\n   */\n  set font_underline (val) {\n    this._font_underline = this._checkVal(val)\n  }\n\n  /**\n   * Get the html value.\n   * @return {Boolean} The html value.\n   */\n  get html () {\n    return this._html\n  }\n\n  /**\n   * Set the html value.\n   * @param {Boolean} val - The html value to set.\n   */\n  set html (val) {\n    this._html = this._checkVal(val)\n  }\n\n  /**\n   * Get the penwidth value.\n   * @return {Boolean} The penwidth value.\n   */\n  get penwidth () {\n    return this._penwidth\n  }\n\n  /**\n   * Set the penwidth value.\n   * @param {Boolean} val - The penwidth value to set.\n   */\n  set penwidth (val) {\n    if (!this._isInt(val)) {\n      this._penwidth = 1\n    }\n    this._penwidth = val\n  }\n\n  _initConstants () {\n    this._DEFAULT_FONTS = {\n      sans: 'Droid Sans',\n      serif: 'Droid Serif',\n      mono: 'Droid Sans Mono',\n      'chinese-japanese-korean': 'WenQuanYi Micro Hei',\n      arabic: 'Droid Arabic Naskh',\n      hebrew: 'Droid Sans Hebrew',\n      hindi: 'Lohit Hindi'\n    }\n  }\n}\n","import Styles from '../backends/styles.js'\nimport Canvas from '../backends/canvas.js'\n\n/**\n * The `Canvas` class is used to present visual stimuli. You generally\n * create a `Canvas` object with the `Canvas()` factory function. Because\n * `Canvas()` is a function, you do *not* need to use `new` when calling it.\n * The JavaScript `Canvas` class mimicks the corresponding Python `Canvas`\n * class.\n * \n * __Style keywords__ can be passed to all functions that accept `styleArgs`.\n * Style keywords can also be set as properties of the `Canvas` object. For an\n * overview of style keywords, see the\n * [Python `Canvas` documentation](%url:manual/python/canvas%).\n * \n * __Important:__ JavaScript doesn't support named parameters (or: keywords).\n * Therefore, parameters are passed an `Object` with named properties and\n * default values. Like so:\n *\n * ```js\n * var myCanvas = Canvas()\n * // (correct) pass parameters as an Object ...\n * myCanvas.fixdot({color: 'red'})\n * // (incorrect) ... and *not* as named parameters\n * // myCanvas.fixdot(color='red')\n * myCanvas.show()\n * ```\n *\n * [TOC]\n *\n * @class\n * @name Canvas\n **/ \nexport default class CanvasHandler {\n\n  constructor (experiment, styleArgs = {}) {\n    this._canvas = new Canvas(experiment)\n    this._style = new Styles(experiment)\n    Object.assign(this._style, styleArgs)\n    this._xc = this._canvas.width / 2\n    this._yc = this._canvas.height / 2\n  }\n  \n  get color() {return this._style.color}\n  set color(val) {this._style.color = val}\n  get background_color() {return this._style.background_color}\n  set background_color(val) {this._style.background_color = val}\n  get fill() {return this._style.fill}\n  set fill(val) {this._style.fill = val}\n  get html() {return this._style.html}\n  set html(val) {this._style.html = val}\n  get font_family() {return this._style.font_family}\n  set font_family(val) {this._style.font_family = val}\n  get font_size() {return this._style.font_size}\n  set font_size(val) {this._style.font_size = val}\n  get font_italic() {return this._style.font_italic}\n  set font_italic(val) {this._style.font_italic = val}\n  get font_bold() {return this._style.font_bold}\n  set font_bold(val) {this._style.font_bold = val}\n  get font_underline() {return this._style.font_underline}\n  set font_underline(val) {this._style.font_underline = val}\n  \n  _element_style (styleArgs) {\n    if (typeof styleArgs === \"undefined\") {\n      return this._style\n    }\n    const style = new Styles()\n    Object.assign(style, this._style)\n    Object.assign(style, styleArgs)\n    return style\n  }\n  \n  /**\n   * Draws an arrow. An arrow is a polygon consisting of 7 vertices, with an\n   * arrowhead pointing at (ex, ey).\n   *\n   * @example\n   * var myCanvas = Canvas()\n   * var w = vars.width / 2\n   * var h = vars.height / 2\n   * // Important: parameters are passed as an Object\n   * myCanvas.arrow({sx: 0, sy: 0, w: w, h: h, head_width:100, body_length:0.5})\n   *\n   * @param {Object} obj\n   * @param {Number} obj.sx=0\n   * @param {Number} obj.sy=0\n   * @param {Number} obj.ex=50\n   * @param {Number} obj.ey=0\n   * @param {Number} obj.body_length=0.8\n   * @param {Number} obj.body_width=0.5\n   * @param {Number} obj.head_width=30\n   * @param {Object} ..obj.styleArgs={}\n   *\n   * @name Canvas.arrow\n   * @function\n   **/\n  arrow({sx = 0, sy = 0, ex = 50, ey = 0, body_length = 0.8, body_width = 0.5,\n      head_width = 30, ...styleArgs} = {}) {\n    this._canvas.arrow(\n        sx + this._xc,\n        sy + this._yc,\n        ex + this._xc,\n        ey + this._yc,\n        body_width,\n        body_length,\n        head_width,\n        this._element_style(styleArgs))\n  }\n  \n  /**\n   *\t Clears the canvas with the current background color. Note that it is\n   *\t generally faster to use a different canvas for each experimental\n   *\t display than to use a single canvas and repeatedly clear and redraw\n   *\t it.\n   *\n   * @example\n   * var myCanvas = Canvas()\n   * myCanvas.fixdot({color: 'green'})\n   * myCanvas.show()\n   * // do something\n   * myCanvas.clear()\n   * myCanvas.fixdot({color: 'red'})\n   * myCanvas.show()\n   *\n   * @param {Object} [styleArgs={}]\n   * @name Canvas.clear\n   * @function\n   **/\n  clear(styleArgs = {}) {\n    this._canvas.clear(this._element_style(styleArgs).background_color)\n  }\n  \n  /**\n   * Draws a circle.\n   *\n   * @example\n   * var myCanvas = Canvas()\n   * myCanvas.circle({x: 100, y: 100, r: 50, fill: true, color:'red'})\n   *\n   * @param {Object} obj\n   * @param {Number} obj.x=0\n   * @param {Number} obj.y=0\n   * @param {Number} obj.r=50\n   * @param {Object} ..obj.styleArgs={}\n   *\n   * @name Canvas.circle\n   * @function\n   **/\n  circle({x = 0, y = 0, r = 50, ...styleArgs} = {}) {\n    this._canvas.circle(\n        x + this._xc,\n        y + this._yc,\n        r,\n        this._element_style(styleArgs))\n  }\n\n  /**\n   * Draws an ellipse.\n   *\n   * @example\n   * var myCanvas = Canvas()\n   * myCanvas.ellipse({x: -10, y: -10, w: 20, h: 20, fill:true})\n   *\n   * @param {Object} obj\n   * @param {Number} obj.x=-50\n   * @param {Number} obj.y=-25\n   * @param {Number} obj.w=100\n   * @param {Number} obj.h=50\n   * @param {Object} ..obj.styleArgs={}\n   *\n   * @name Canvas.ellipse\n   * @function\n   **/\n  ellipse({x = -50, y = -25, w = 100, h = 50, ...styleArgs} = {}) {\n    this._canvas.ellipse(\n        x + this._xc,\n        y + this._yc,\n        w,\n        h,\n        this._element_style(styleArgs))\n  }\n  \n  /**\n   * Draws a fixation dot. The default style is medium-open.\n   * \n   * - 'large-filled' is a filled circle with a 16px radius.\n   * - 'medium-filled' is a filled circle with an 8px radius.\n   * - 'small-filled' is a filled circle with a 4px radius.\n   * - 'large-open' is a filled circle with a 16px radius and a 2px hole.\n   * - 'medium-open' is a filled circle with an 8px radius and a 2px hole.\n   * - 'small-open' is a filled circle with a 4px radius and a 2px hole.\n   * - 'large-cross' is 16px cross.\n   * - 'medium-cross' is an 8px cross.\n   * - 'small-cross' is a 4px cross.\n   *\n   * @example\n   * var myCanvas = Canvas()\n   * myCanvas.fixdot()\n   *\n   * @param {Object} obj\n   * @param {Number} obj.x=0\n   * @param {Number} obj.y=0\n   * @param {String} obj.style='default'\n   * @param {Object} ..obj.styleArgs={}\n   *\n   * @name Canvas.fixdot\n   * @function\n   **/\n  fixdot({x = 0, y = 0, style = 'default', ... styleArgs} = {}) {\n    this._canvas.fixdot(\n        x + this._xc,\n        y + this._yc,\n        style,\n        this._element_style(styleArgs))\n  }\n  \n  /**\n   * Draws a gabor patch.\n   *\n   * @example\n   * var myCanvas = Canvas()\n   * myCanvas.gabor({x: 100, y: 100, orient: 45, freq: .05})\n   *\n   * @param {Object} obj\n   * @param {Number} obj.x=0\n   * @param {Number} obj.y=0\n   * @param {Number} obj.orient=0\n   * @param {Number} obj.freq=.1\n   * @param {String} obj.env='gaussian'\n   * @param {Number} obj.size=96\n   * @param {Number} obj.stdev=12\n   * @param {Number} obj.phase=0\n   * @param {String} obj.col1='white'\n   * @param {String} obj.col2='black'\n   * @param {String} obj.bgmode='avg'\n   * @param {Object} ..obj.styleArgs={}\n   *\n   * @name Canvas.gabor\n   * @function\n   **/\n  gabor({x = 0, y = 0, orient = 0, freq = .1, env = 'gaussian', size = 96,\n      stdev = 12, phase = 0, col1 = 'white', col2 = 'black',\n      bgmode = 'avg'} = {}) {\n    this._canvas.gabor(\n        x + this._xc,\n        y + this._yc,\n        orient,\n        freq,\n        env,\n        size,\n        stdev,\n        phase,\n        col1,\n        col2,\n        bgmode)\n  }\n  \n  /**\n   * Draws an image from a file in the file pool.\n   *\n   * @example\n   * var myCanvas = Canvas()\n   * myCanvas.image({fname: 'image_in_pool.png'})\n   *\n   * @param {Object} obj\n   * @param {String} obj.fname\n   * @param {Boolean} obj.center=true\n   * @param {Number} obj.x=0\n   * @param {Number} obj.y=0\n   * @param {Number} obj.scale=1\n   * @param {Number} obj.rotation=0\n   * @param {Object} ..obj.styleArgs={}\n   *\n   * @name Canvas.image\n   * @function\n   **/\n  image({fname, center = true, x = 0, y = 0, scale = 1, rotation = 0} = {}) {\n    if (typeof fname === \"undefined\") {\n      throw \"fname is a required parameter for Canvas.image()\"\n    }\n    this._canvas.image(\n        fname,\n        center,\n        x + this._xc,\n        y + this._yc,\n        scale,\n        rotation)\n  }\n  \n  /**\n   * Draws a line.\n   *\n   * @example\n   * var myCanvas = Canvas()\n   * var ex = vars.width / 2\n   * var ey = vars.height / 2\n   * myCanvas.line({sx: 0, sy: 0, ex: ex, ey: ey})\n   * \n   * @param {Object} obj\n   * @param {Number} obj.sx=0\n   * @param {Number} obj.sy=0\n   * @param {Number} obj.ex=50\n   * @param {Number} obj.ey=0\n   * @param {Object} ..obj.styleArgs={}\n   *\n   * @name Canvas.line\n   * @function\n   **/\n  line({sx = 0, sy = 0, ex = 50, ey = 0, ...styleArgs} = {}) {\n    this._canvas.line(\n        sx + this._xc,\n        sy + this._yc,\n        ex + this._xc,\n        ey + this._yc,\n        this._element_style(styleArgs))\n  }\n  \n  /**\n   * Draws a patch of noise, with an envelope.\n   *\n   * @example\n   * var myCanvas = Canvas()\n   * myCanvas.noise_patch({x: 100, y: 100, env: 'circular'})\n   *\n   * @param {Object} obj\n   * @param {Number} obj.x=0\n   * @param {Number} obj.y=0\n   * @param {String} obj.env='gaussian'\n   * @param {Number} obj.size=96\n   * @param {Number} obj.stdev=12\n   * @param {String} obj.col1='white'\n   * @param {String} obj.col2='black'\n   * @param {String} obj.bgmode='avg'\n   * @param {Object} ..obj.styleArgs={}\n   *\n   * @name Canvas.noise_patch\n   * @function\n   **/\n  noise_patch({x = 0, y = 0, env = 'gaussian', size = 96, stdev = 12,\n      col1 = 'white', col2 = 'black', bgmode = 'avg'} = {}) {\n    this._canvas.noise(\n        x + this._xc,\n        y + this._yc,\n        env,\n        size,\n        stdev,\n        col1,\n        col2,\n        bgmode)\n  }\n  \n  /**\n   * Draws a polygon that defined by a list of vertices. I.e. a shape of\n   * points connected by lines.\n   *\n   * @example\n   * var myCanvas = Canvas()\n   * var n1 = [0,0]\n   * var n2 = [100, 100]\n   * var n3 = [0, 100]\n   * myCanvas.polygon({vertices: [n1, n2, n3]})\n   *\n   * @param {Object} obj\n   * @param {Array<Array<Number>>} obj.vertices\n   * @param {Object} ..obj.styleArgs={}\n   *\n   * @name Canvas.polygon\n   * @function\n   **/\n  polygon({vertices, ...styleArgs} = {}) {\n    if (typeof vertices === \"undefined\") {\n      throw \"vertices is a required parameter for Canvas.polygon()\"\n    }\n    // Adjust the coordinates of all vertices\n    const v = []\n    for (const [x, y] of vertices)\n      v.push([x + this._xc, y + this._yc])\n    this._canvas.polygon(v, this._element_style(styleArgs))\n  }\n\n  /**\n   * Draws a rectangle.\n   *\n   * @example\n   * var myCanvas = Canvas()\n   * myCanvas.rect({x: -10, y: -10, w: 20, h: 20, fill:true})\n   *\n   * @param {Object} obj\n   * @param {Number} obj.x=-50\n   * @param {Number} obj.y=-25\n   * @param {Number} obj.w=100\n   * @param {Number} obj.h=50\n   * @param {Object} ..obj.styleArgs={}\n   *\n   * @name Canvas.rect\n   * @function\n   **/\n  rect({x = -50, y = -25, w = 100, h = 50, ...styleArgs} = {}) {\n    this._canvas.rect(\n        x + this._xc,\n        y + this._yc,\n        w,\n        h,\n        this._element_style(styleArgs))\n  }\n  \n  /**\n   * Shows, or 'flips', the canvas on the screen.\n   *\n   * @return {Number} A timestamp of the time at which the canvas appeared on\n   *     the screen.\n   *\n   * @name Canvas.show\n   * @function\n   **/ \n  show() {\n    return this._canvas.show()\n  }\n  \n  /**\n   * Draws text.\n   *\n   * @example\n   * var myCanvas = Canvas()\n   * myCanvas.text({text: 'Some text'})\n   *\n   * @param {Object} obj\n   * @param {String} obj.text\n   * @param {Boolean} obj.center=true\n   * @param {Number} obj.x=0\n   * @param {Number} obj.y=0\n   * @param {Object} ..obj.styleArgs={}\n   *\n   * @name Canvas.text\n   * @function\n   **/\n  text({text, center = true, x = 0, y = 0, ...styleArgs} = {}) {\n    if (typeof text === \"undefined\") {\n      throw \"text is a required parameter for Canvas.text()\"\n    }    \n    let style = this._element_style(styleArgs)\n    this._canvas.text(\n        text,\n        center,\n        x + this._xc,\n        y + this._yc,\n        style.html,\n        style)\n  }\n}\n","import CanvasHandler from '../classes/canvas_handler'\nimport JavaScriptWorkspaceAPI from '../classes/javascript_workspace_api'\nimport randomExt from 'random-ext'\nimport colorConvert from 'color-convert'\nimport parse from \"csv-parse/lib/sync\"\nimport {\n    range as pyRange,\n    enumerate as pyEnumerate,\n    items as pyItems,\n    zip as pyZip,\n    zipLongest as pyZipLongest} from 'pythonic'\n\n/**\n * A proxy handler for the VarStore that maps properties onto calls to\n * VarStore.get(), so that variables are automatically evaluated, just like\n * in the OpenSesame `var` API.\n */\nclass VarStoreHandler {\n  get (target, prop) {\n    // The VarStore sets a property on itself to bypass this proxy. This\n    // avoids feedback loops when the VarStore tries to get a variable without\n    // evaluating it.\n    if (target._bypass_proxy === true) {\n      return target[prop]\n    }\n    return typeof target[prop] === 'string'\n      ? target.get(prop, null, true, null, false)\n      : target[prop]\n  }\n}\n\n\n/**\n * A workspace for executing inline JavaScript code. For now, the workspace is\n * not persistent, and only exposes the vars object.\n */\nexport default class JavaScriptWorkspace {\n  /**\n   * Create a JavaScript workspace.\n   * @param {Object} experiment - The experiment item to which the item belongs.\n   */\n  constructor (experiment) {\n    this.experiment = experiment\n    this.vars_proxy = new Proxy(this.experiment.vars, new VarStoreHandler())\n    this.api = new JavaScriptWorkspaceAPI(this.experiment)\n    this._persistent = {}\n  }\n\n  /**\n   * Executes JavaScript code in the workspace.\n   * @param {String} js - JavaScript code to execute\n   */\n  _eval (js) {\n    // OSWeb objects\n    const vars = this.vars_proxy\n    const Canvas = (styleArgs = {}) => new CanvasHandler(\n        this.experiment, styleArgs)\n    const pool = this.experiment.pool\n    const persistent = this._persistent\n    // Expose common functions. Binding is necessary to provide the correct\n    // scope for the functions.\n    const reset_feedback = this.api.reset_feedback.bind(this.api)\n    const set_subject_nr = this.api.set_subject_nr.bind(this.api)\n    const sometimes = this.api.sometimes.bind(this.api)\n    const xy_from_polar = this.api.xy_from_polar.bind(this.api)\n    const xy_to_polar = this.api.xy_to_polar.bind(this.api)\n    const xy_distance = this.api.xy_distance.bind(this.api)\n    const xy_circle = this.api.xy_circle.bind(this.api)\n    const xy_grid = this.api.xy_grid.bind(this.api)\n    const xy_random = this.api.xy_random.bind(this.api)\n    // Expose useful libraries\n    const random = randomExt\n    const convert = colorConvert\n    const csvParse = parse\n    // Expose the pythonic functions\n    const range = pyRange\n    const zip = pyZip\n    const zipLongest = pyZipLongest\n    const enumerate = pyEnumerate\n    const items = pyItems\n    eval(js)\n  }\n}\n","import {range} from 'pythonic'\n\n/**\n * Provides common functions based on the Python API.\n **/\nexport default class JavaScriptWorkspaceAPI {\n\n  constructor(experiment) {\n    this._experiment = experiment\n  }\n\n  /**\n   * Resets all feedback variables to their initial state.\n   *\n   * @example\n   * reset_feedback()\n   **/\n  reset_feedback() {\n    this._experiment.reset_feedback()\n  }\n\n  /**\n   * Sets the subject number and parity (even/ odd). This function is called\n   * automatically when an experiment is started, so you only need to call it\n   * yourself if you overwrite the subject number that was specified when the\n   * experiment was launched.\n   *\n   * @param {Number} nr The subject number\n   *\n   * @example\n   * set_subject_nr(1)\n   * console.log('Subject nr = ' + vars.subject_nr)\n   * console.log('Subject parity = ' + vars.subject_parity)\n   **/\n  set_subject_nr(nr) {\n    this._experiment.set_subject(nr)\n  }\n\n  /**\n   * Returns true with a certain probability. (For more advanced randomization,\n   * use the `random-ext` package, which is available as `random`.)\n   * \n   * @param {Number} [p=.5] The probability of returning true\n   *\n   * @example\n   * if (sometimes()) {\n   *   console.log('Sometimes you win')\n   * } else {\n   *   console.log('Sometimes you lose')\n   * }\n   **/\n  sometimes(p=.5) {\n    if (typeof p !== \"number\" || p < 0 || p > 1)\n      throw \"p should be a numeric value between 0 and 1\"\n    return Math.random() < p\n  }\n\n  /**\n   * Converts polar coordinates (distance, angle) to Cartesian coordinates\n   * (x, y).\n   *\n   * @param {Number} rho The radial coordinate, also distance or eccentricity.\n   * @param {Number} phi The angular coordinate. This reflects a clockwise\n   *     rotation in degrees (i.e. not radians), where 0 is straight right.\n   * @param {Array<Number>} [pole=[0, 0]] The reference point.\n   * @return {Array<Number>} An [x, y] array.\n   *\n   * @example\n   * // ECMA 5.1\n   * var xy1 = xy_from_polar(100, 45)\n   * var xy2 = xy_from_polar(100, -45)\n   * var c = Canvas()\n   * c.line({sx: xy1[0], sy: xy1[1], ex: -xy1[0], ey: -xy1[1]})\n   * c.line({sx: xy2[0], sy: xy2[1], ex: -xy2[0], ey: -xy2[1]})\n   * c.show()\n   * // ECMA 6\n   * let [x1, y1] = xy_from_polar(100, 45)\n   * let [x2, y2] = xy_from_polar(100, -45)\n   * let c = Canvas()\n   * c.line({sx: x1, sy: y1, ex: -x1, ey: -y1})\n   * c.line({sx: x2, sy: y2, ex: -x2, ey: -y2})\n   * c.show()\n   **/\n  xy_from_polar(rho, phi, pole=[0, 0]) {\n    if (typeof rho !== \"number\")\n      throw \"rho should be numeric in xy_from_polar()\"\n    if (typeof phi !== \"number\")\n      throw \"phi should be numeric in xy_from_polar()\"\n    phi = this._radians(phi)\n    const [ox, oy] = this._parse_pole(pole)\n    const x = rho * Math.cos(phi) + ox\n    const y = rho * Math.sin(phi) + oy\n    return [x, y]\n  }\n\n  /**\n   * Converts Cartesian coordinates (x, y) to polar coordinates (distance,\n   * angle).\n   *\n   * @param {Number} x The X coordinate.\n   * @param {Number} y The Y coordinate\n   * @param {Array<Number>} [pole=[0, 0]] The reference point.\n   * @return {Array<Number>} An [rho, phi] array. Here, `rho` is the radial\n   *     coordinate, also distance or eccentricity. `phi` is the angular\n   *     coordinate in degrees (i.e. not radians), and reflects a\n   *     counterclockwise rotation, where 0 is straight right.\n   *\n   * @example\n   * // ECMA 5.1 (browser + desktop)\n   * var rho_phi = xy_to_polar(100, 100)\n   * var rho = rho_phi[0]\n   * var phi = rho_phi[1]\n   * // ECMA 6 (browser only)\n   * let [rho, phi] = xy_to_polar(100, 100)\n   **/\n  xy_to_polar(x, y, pole=[0, 0]) {\n    if (typeof x !== \"number\")\n      throw \"x should be numeric in xy_to_polar()\"\n    if (typeof y !== \"number\")\n      throw \"y should be numeric in xy_to_polar()\"\n    const [ox, oy] = this._parse_pole(pole)\n    const dx = x - ox\n    const dy = y - oy\n    const rho = Math.sqrt(dx ** 2 + dy ** 2)\n    const phi = this._degrees(Math.atan2(dy, dx))\n    return [rho, phi]\n  }\n  \n  /**\n   * Gives the distance between two points.\n   *\n   * @param {Number} x1 The x coordinate of the first point.\n   * @param {Number} y1 The y coordinate of the first point.\n   * @param {Number} x2 The x coordinate of the second point.\n   * @param {Number} y2 The y coordinate of the second point.\n   * @return {Number} The distance between the two points.\n   **/\n  xy_distance(x1, y1, x2, y2) {\n    if (typeof x1 !== \"number\" || typeof y1 !== \"number\" || \n        typeof x2 !== \"number\" || typeof y2 !== \"number\")\n      throw \"Coordinates should be numeric in xy_distance()\"\n    return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n  }\n  \n  /**\n   * Generates a list of points (x,y coordinates) in a circle. This can be\n   * used to draw stimuli in a circular arrangement.\n   *\n   * @param {Number} n The number of x,y coordinates to generate.\n   * @param {Number} rho The radial coordinate, also distance or eccentricity,\n   *     of the first point.\n   * @param {Number} [phi0=0] The angular coordinate for the first coordinate.\n   *     This is a counterclockwise rotation in degrees (i.e. not radians),\n   *     where 0 is straight right.\n   * @param {Array<Number>} [pole=[0, 0]] The reference point.\n   * @return {Array<Array<Number>>} An array of [x,y] coordinate arrays.\n   *\n   * @example\n   * // Draw 8 rectangles around a central fixation dot\n   * // ECMA 5.1 (browser + desktop)\n   * var c = Canvas()\n   * c.fixdot()\n   * var points = xy_circle(8, 100)\n   * for (var i in points) {\n   *   var x = points[i][0]\n   *   var y = points[i][1]\n   *   c.rect({x: x - 10, y: y - 10, w: 20, h: 20})\n   * }\n   * c.show()\n   * // ECMA 6 (browser only)\n   * let c = Canvas()\n   * c.fixdot()\n   * for (let [x, y] of xy_circle(8, 100)) {\n   *   c.rect({x: x - 10, y: y - 10, w: 20, h: 20})\n   * }\n   * c.show()\n   **/\n  xy_circle(n, rho, phi0=0, pole=[0, 0]) {\n    if (typeof n !== \"number\" || n < 0)\n      throw \"n should be a non-negative integer in xy_circle()\"\n    if (typeof rho !== \"number\" || typeof phi0 !== \"number\")\n      throw \"rho and phi0 should be numeric in xy_circle()\"\n    const a = []\n    for (const i of range(n)) {\n      a.push(this.xy_from_polar(rho, phi0, pole))\n      phi0 += 360 / n\n    }\n    return a\n  }\n  \n  /**\n   * Generates a list of points (x,y coordinates) in a grid. This can be used\n   * to draw stimuli in a grid arrangement.\n   *\n   * @param {Number|Array<Number>} n A number that indicates the number of\n   *     columns and rows, so that `n=2` indicates a 2x2 grid, or a [n_col,\n   *     n_row] array, so that `n=[2,3]` indicates a 2x3 grid.\n   * @param {Number|Array<Number>} spacing A numeric value that indicates the\n   *     spacing between cells, or a [col_spacing, row_spacing] array.\n   * @param {Array<Number>} [pole=[0, 0]] The reference point.\n   * @return {Array<Array<Number>>} An array of [x,y] coordinate arrays.\n   *\n   * @example\n   * // Draw a 4x4 grid of rectangles\n   * // ECMA 5 (desktop + browser)\n   * var c = Canvas()\n   * c.fixdot()\n   * var points = xy_grid(4, 100)\n   * for (var i in points) {\n   *   var x = points[i][0]\n   *   var y = points[i][1]\n   *   c.rect({x: x - 10, y: y - 10, w: 20, h: 20})\n   * }\n   * c.show()\n   * // ECMA 6 (browser only)\n   * let c = Canvas()\n   * c.fixdot()\n   * for (let [x, y] in xy_grid(4, 100)) {\n   *   c.rect({x: x-10, y: y-10, w: 20, y: 20})\n   * }\n   * c.show()\n   **/\n  xy_grid(n, spacing, pole=[0, 0]) {\n    // Parse and validate the n\n    const n_err_msg = \"n should be a single non-negative number, or an array of two non-negative numbers in xy_grid()\"\n    let n_col\n    let n_row\n    if (typeof n === \"object\") {\n      if (n.length !== 2)\n        throw n_err_msg\n      [n_col, n_row] = n\n    } else {\n      n_col = n\n      n_row = n\n    }\n    if (typeof n_col !== \"number\" || typeof n_row !== \"number\")\n      throw n_err_msg\n    // Parse and validate the spacing\n    const spacing_err_msg = \"spacing should be a single non-negative number, or an array of two non-negative numbers xy_grid()\"\n    let s_col\n    let s_row\n    if (typeof spacing === \"object\") {\n      if (spacing.length !== 2)\n        throw spacing_err_msg\n      [s_col, s_row] = spacing\n    } else {\n      s_col = spacing\n      s_row = spacing\n    }\n    if (typeof s_col !== \"number\" || typeof s_row !== \"number\")\n      throw spacing_err_msg\n    // Generate the grid\n    const [ox, oy] = this._parse_pole(pole)\n    const a = []\n    let x\n    let y\n    for (const row of range(n_row)) {\n      y = (row - (n_row - 1) / 2) * s_row + oy\n      for (const col of range(n_col)) {\n        x = (col - (n_col - 1) / 2) * s_col + ox\n        a.push([x, y])\n      }\n    }\n    return a\n  }\n  \n  /**\n   * Generates a list of random points (x,y coordinates) with a minimum\n   * spacing between each pair of points. This function will throw an error\n   * when the coordinate list cannot be generated, typically because there are\n   * too many points, the min_dist is set too high, or the width or height are\n   * set too low.\n   *\n   * @param {Number} n The number of points to generate.\n   * @param {Number} width The width of the field with random points.\n   * @param {Number} height The height of the field with random points.\n   * @param {Number} [min_dist=0] The minimum distance between each point.\n   * @param {Array<Number>} [pole=[0, 0]] The reference point.\n   * @return {Array<Array<Number>>} An array of [x,y] coordinate arrays.\n   *\n   * @example\n   * // Draw a 50 rectangles in a random grid\n   * // ECMA 5 (desktop + browser)\n   * var c = Canvas()\n   * c.fixdot()\n   * var points = xy_random(50, 500, 500, 40)\n   * for (var i in points) {\n   *   var x = points[i][0]\n   *   var y = points[i][1]\n   *   c.rect({x: x - 10, y: y - 10, w: 20, h: 20})\n   * }\n   * c.show()   \n   * // ECMA 6 (browser only)\n   * let c = Canvas()\n   * c.fixdot()\n   * for (let [x, y] of xy_random(50, 500, 500, 40)) {\n   *   c.rect({x: x-10, y: y-10, w: 20, h: 20})\n   * }\n   * c.show()\n   **/\n  xy_random(n, width, height, min_dist=0, pole=[0, 0]) {\n    if (typeof n !== \"number\" || n < 0)\n      throw \"n should be a non-negative number in xy_circle()\"\n    if (typeof min_dist !== \"number\" || n < 0)\n      throw \"min_dist should be a non-negative number in xy_circle()\"\n    if (typeof width !== \"number\" || typeof height !== \"number\")\n      throw \"width and height should be numeric in xy_circle()\"\n    const [ox, oy] = this._parse_pole(pole)\n    const max_try = 1000\n    let a, i, t2, x1, y1, x2, y2, too_close\n    for (const t1 of range(max_try)) {\n      a = []\n      for (i of range(n)) {\n        // A loop for trying to find a single new point\n        for (t2 of range(max_try)) {\n          // Generate a point and check if it's not too close to the other\n          // points so far\n          x1 = (Math.random() - .5) * width + ox\n          y1 = (Math.random() - .5) * height + oy\n          too_close = false\n          for ([x2, y2] of a) {\n            if (this.xy_distance(x1, y1, x2, y2) < min_dist) {\n              too_close = true\n              break\n            }\n          }\n          // Add the point and the break the loop for finding a single point\n          if (!too_close) {\n            a.push([x1, y1])\n            break\n          }\n        }\n      }\n      // If the array is complete, return it. If not, the outer for loop will\n      // try again until max_try is reached\n      if (a.length === n)\n        return a\n    }\n    throw \"Failed to generate random coordinates in xy_random()\"\n  }\n  \n  _radians(a) {\n    return (a / 360) * 2 * Math.PI\n  }\n  \n  _degrees(a) {\n    return (a / (2 * Math.PI)) * 360\n  }\n  \n  _parse_pole(pole) {\n    if (pole.length !== 2)\n      throw \"pole should be an array of two numeric values\"\n    const [x, y] = pole\n    if (typeof x !== \"number\" || typeof y !== \"number\")\n      throw \"pole should be an array of two numeric values\"\n    return [x, y]\n  }\n}\n","import {\r\n  isBoolean\r\n} from 'lodash'\r\n\r\n/** Class representing a python workspace. */\r\nexport default class PythonWorkspace {\r\n  /**\r\n   * Create a python workspace object.\r\n   * @param {Object} runner - The runner to which the python workspace belongs.\r\n   */\r\n  constructor (runner) {\r\n    // Set class parameter properties.\r\n    this._runner = runner // Parent runner attached to the python workspace class.\r\n  }\r\n\r\n  /**\r\n   * Evaluate an expression within osweb.\r\n   * @param {Boolean|Object|String} bytecode - The expression to evaluate.\r\n   * @return {Boolean|Number|Object|String} - The result of the evaluated expression.\r\n   */\r\n  _eval (bytecode) {\r\n    // Check wich type of expression must be evaled.\r\n    if (isBoolean(bytecode)) {\r\n      return bytecode\r\n    } else if (typeof bytecode === 'string') {\r\n      // Open sesame script, first check for parameter values.\r\n      bytecode = this._runner._syntax.eval_text(bytecode, null, true)\r\n\r\n      // Evaluate the expression.\r\n      var evalString = this._runner._syntax.remove_quotes(bytecode)\r\n      if (evalString === 'always') {\r\n        return true\r\n      } else if (evalString === 'never') {\r\n        return false\r\n      } else {\r\n        // eslint-disable-next-line no-eval\r\n        return eval(evalString)\r\n      }\r\n    } else {\r\n      // Python script, run the internal Python interpreter.\r\n      return this._runner._pythonParser._run_statement(bytecode)\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}